# cortex_trader_pro.py
import telebot
from telebot import types
import os
from cortex_core import CortexCore
from staking_system import SmartStaking
from ai_signals import AISignalGenerator

class CortexTraderPro:
    def __init__(self, token):
        self.bot = telebot.TeleBot(token, parse_mode="HTML")
        self.core = CortexCore()
        self.staking = SmartStaking()
        self.ai = AISignalGenerator()
        
        self.register_handlers()
    
    def register_handlers(self):
        @self.bot.message_handler(commands=['start'])
        def start(message):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton('üí∞ –ó–∞—Ä–æ–±–∏—Ç–∏')
            btn2 = types.KeyboardButton('üìä –ú–æ—ó —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó')
            btn3 = types.KeyboardButton('üöÄ –¢–æ–ø —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó')
            markup.add(btn1, btn2, btn3)
            
            text = """
üéØ <b>Cortex Trading Ecosystem</b>

üí° <i>–ü–µ—Ä—à–∞ —É —Å–≤—ñ—Ç—ñ –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, –¥–µ –∫–æ–∂–µ–Ω –º–æ–∂–µ –∑–∞—Ä–æ–±–ª—è—Ç–∏ –Ω–∞ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫—É –±–µ–∑ –¥–æ—Å–≤—ñ–¥—É!</i>

üåü <b>–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î:</b>
1. –û–±–∏—Ä–∞—î—Ç–µ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—É —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é
2. –°—Ç–µ–π–∫—É—î—Ç–µ —Å—É–º—É (–≤—ñ–¥ $10)
3. –û—Ç—Ä–∏–º—É—î—Ç–µ —â–æ–¥–µ–Ω–Ω—ñ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
4. –ú–æ–∂–µ—Ç–µ –≤–∏–≤–µ—Å—Ç–∏ –≤ –±—É–¥—å-—è–∫–∏–π –º–æ–º–µ–Ω—Ç

üìà <b>–°–µ—Ä–µ–¥–Ω—è –¥–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å:</b> 15-30% monthly
üîí <b>–ì–∞—Ä–∞–Ω—Ç—ñ—ó:</b> Smart-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∏, —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è
            """
            self.bot.send_message(message.chat.id, text, reply_markup=markup)
        
        @self.bot.message_handler(func=lambda message: message.text == 'üí∞ –ó–∞—Ä–æ–±–∏—Ç–∏')
        def earn(message):
            markup = types.InlineKeyboardMarkup()
            strategies = self.get_top_strategies()
            
            for strat in strategies[:3]:
                btn = types.InlineKeyboardButton(
                    f"{strat['name']} - {strat['performance']}%", 
                    callback_data=f"strat_{strat['id']}"
                )
                markup.add(btn)
            
            text = """
üéØ <b>–û–ë–ï–†–Ü–¢–¨ –°–¢–†–ê–¢–ï–ì–Ü–Æ –î–õ–Ø –ó–ê–†–û–ë–Ü–¢–ö–£</b>

–¢–æ–ø-3 –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –∑ –Ω–∞–π–≤–∏—â–æ—é –¥–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—é:

üîπ <b>Blue Chip Hodl</b> - 23.4% –º—ñ—Å—è—á–Ω–æ
üîπ <b>DeFi Yield Farming</b> - 31.2% –º—ñ—Å—è—á–Ω–æ  
üîπ <b>AI Swing Trading</b> - 28.7% –º—ñ—Å—è—á–Ω–æ

üí° <i>–ö–æ–∂–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è –º–∞—î —Å—Ç—Ä–∞—Ö–æ–≤–∏–π —Ñ–æ–Ω–¥ —Ç–∞ –∞—É–¥–∏—Ç</i>
            """
            self.bot.send_message(message.chat.id, text, reply_markup=markup)
        
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('strat_'))
        def show_strategy(call):
            strategy_id = int(call.data.split('_')[1])
            strategy = self.get_strategy_info(strategy_id)
            
            text = f"""
üìä <b>{strategy['name']}</b>

üí∞ –î–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å: <b>{strategy['performance']}%</b> –º—ñ—Å—è—á–Ω–æ
‚ö° –†–∏–∑–∏–∫: {strategy['risk_level']}/5
üèÜ –¢–≤–æ—Ä–µ—Ü—å: {strategy['creator']}
üìà –í—ñ–∫ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó: {strategy['age']} –¥–Ω—ñ–≤

üí° <i>–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Å—Ç–µ–π–∫: $10</i>
üéØ <i>–©–æ–¥–µ–Ω–Ω—ñ –≤–∏–ø–ª–∞—Ç–∏</i>
üîí <i>–°—Ç—Ä–∞—Ö–æ–≤–∏–π —Ñ–æ–Ω–¥: $15,000</i>

–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è —ñ–Ω–≤–µ—Å—Ç—É–≤–∞–Ω–Ω—è:
            """
            self.bot.send_message(call.message.chat.id, text)
            
            # –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ —ñ–Ω–≤–µ—Å—Ç—É–≤–∞–Ω–Ω—è