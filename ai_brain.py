# ai_brain.py
import random
from datetime import datetime

class AIBrain:
    def __init__(self):
        self.market_mood = "neutral"
        self.conversations = {}
        
    def analyze_market(self):
        """–ê–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫—É"""
        moods = {
            "bullish": "üöÄ <b>–ë–∏—á–∏–π –Ω–∞—Å—Ç—Ä—ñ–π!</b>\n–†–∏–Ω–æ–∫ –≥–æ—Ç–æ–≤–∏–π –¥–æ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è!",
            "bearish": "üìâ <b>–í–µ–¥–º–µ–∂–∏–π –Ω–∞—Å—Ç—Ä—ñ–π!</b>\n–ë—É–¥—å—Ç–µ –æ–±–µ—Ä–µ–∂–Ω—ñ –∑ –ø–æ–∑–∏—Ü—ñ—è–º–∏.",
            "neutral": "‚öñÔ∏è <b>–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π –Ω–∞—Å—Ç—Ä—ñ–π!</b>\n–†–∏–Ω–æ–∫ –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π."
        }
        
        # –¢–∏–º—á–∞—Å–æ–≤–æ - –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –Ω–∞—Å—Ç—Ä—ñ–π
        self.market_mood = random.choice(list(moods.keys()))
        return moods[self.market_mood]
    
    def start_discussion(self, user_id):
        """–ü–æ—á–∞—Ç–æ–∫ –¥—ñ–∞–ª–æ–≥—É"""
        questions = [
            "üß† <b>–î–∞–≤–∞–π—Ç–µ –æ–±–≥–æ–≤–æ—Ä–∏–º–æ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é!</b>\n–Ø–∫–∏–π –∞–∫—Ç–∏–≤ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?",
            "üéØ <b>–ì–æ—Ç–æ–≤–∏–π –¥–æ –¥–∏—Å–∫—É—Å—ñ—ó!</b>\n–ü—Ä–æ —è–∫—É –º–æ–Ω–µ—Ç—É —Ö–æ—á–µ—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏?",
            "üí° <b>–û–±–≥–æ–≤–æ—Ä—é—î–º–æ —Ç–æ—Ä–≥—ñ–≤–ª—é!</b>\n–©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å —Å—å–æ–≥–æ–¥–Ω—ñ?"
        ]
        
        self.conversations[user_id] = {
            'stage': 'awaiting_asset',
            'context': {}
        }
        
        return random.choice(questions)
    
    def continue_discussion(self, user_id, message):
        """–ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É"""
        if user_id not in self.conversations:
            return "‚ùå –î–∞–≤–∞–π—Ç–µ –ø–æ—á–Ω–µ–º–æ –∑ /discuss"
        
        session = self.conversations[user_id]
        
        if session['stage'] == 'awaiting_asset':
            session['context']['asset'] = message.upper()
            session['stage'] = 'awaiting_strategy'
            
            responses = [
                f"üìä <b>{message.upper()}</b> - –≤—ñ–¥–º—ñ–Ω–Ω–∏–π –≤–∏–±—ñ—Ä!\n–Ø–∫—É —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é —Ä–æ–∑–≥–ª—è–¥–∞—î—Ç–µ?",
                f"üéØ <b>{message.upper()}</b>! –ß—É–¥–æ–≤–æ!\n–û–ø–∏—à—ñ—Ç—å –≤–∞—à —Ç–æ—Ä–≥–æ–≤–∏–π –ø–ª–∞–Ω:",
                f"üíé <b>{message.upper()}</b> - —Ü—ñ–∫–∞–≤–∏–π –∞–∫—Ç–∏–≤!\n–Ø–∫ —Ö–æ—á–µ—Ç–µ –¥—ñ—è—Ç–∏?"
            ]
            return random.choice(responses)
        
        elif session['stage'] == 'awaiting_strategy':
            # –¢—É—Ç –±—É–¥–µ AI –∞–Ω–∞–ª—ñ–∑ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó
            asset = session['context']['asset']
            
            feedbacks = [
                f"ü§ñ <b>–ê–Ω–∞–ª—ñ–∑—É—é –≤–∞—à—É —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é –¥–ª—è {asset}...</b>\n–í–∏–≥–ª—è–¥–∞—î –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ!",
                f"üß† <b>–í–∞—à –ø–ª–∞–Ω –¥–ª—è {asset}:</b>\n–¶—ñ–∫–∞–≤–∏–π –ø—ñ–¥—Ö—ñ–¥! –î–æ–¥–∞–º —Å–≤–æ—ó —ñ–¥–µ—ó...",
                f"üìà <b>–°—Ç—Ä–∞—Ç–µ–≥—ñ—è {asset}:</b>\n–ú–∞—î –ø–æ—Ç–µ–Ω—Ü—ñ–∞–ª! –†–µ–∫–æ–º–µ–Ω–¥—É—é —É–≤–∞–∂–Ω–æ —Å—Ç–µ–∂–∏—Ç–∏ –∑–∞ —Ä–∏–Ω–∫–æ–º."
            ]
            
            # –ó–∞–≤–µ—Ä—à—É—î–º–æ –¥—ñ–∞–ª–æ–≥
            del self.conversations[user_id]
            return random.choice(feedbacks)
    
    def process_message(self, message):
        """–û–±—Ä–æ–±–∫–∞ –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        responses = [
            "üß† <b>CortexTrader</b> —Å–ª—É—Ö–∞—î!\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤–π—Ç–µ /analyze –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ä–∏–Ω–∫—É",
            "üí° <b>–ì–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏!</b>\n–°–ø—Ä–æ–±—É–π—Ç–µ /discuss –¥–ª—è –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó",
            "üéØ <b>–ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?</b>\n–ö–æ–º–∞–Ω–¥–∞ /help –ø–æ–∫–∞–∂–µ –≤—Å—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ"
        ]
        return random.choice(responses)