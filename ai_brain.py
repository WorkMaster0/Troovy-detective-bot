# ai_brain.py
import random
import openai
import os
from datetime import datetime

class AIBrain:
    def __init__(self):
        self.market_mood = "neutral"
        self.conversations = {}
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è OpenAI
        openai.api_key = os.getenv('OPENAI_API_KEY')
        
    def get_ai_response(self, prompt, context=""):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ GPT-4"""
        try:
            response = openai.chat.completions.create(
                model="gpt-4",
                messages=[
                    {
                        "role": "system", 
                        "content": f"""–¢–∏ CortexTrader - AI —Ç—Ä–µ–π–¥—ñ–Ω–≥–æ–≤–∏–π –ø–æ–º—ñ—á–Ω–∏–∫. 
                        –¢–∏ –µ–∫—Å–ø–µ—Ä—Ç –∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É —Ç–∞ —Ä–∏–Ω–∫–æ–≤–∏—Ö —Ç–µ–Ω–¥–µ–Ω—Ü—ñ–π.
                        –ë—É–¥—å –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–º, –∞–ª–µ –¥—Ä—É–∂–Ω—ñ–º. –î–∞–≤–∞–π –∫–æ—Ä–∏—Å–Ω—ñ –ø–æ—Ä–∞–¥–∏.
                        –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}"""
                    },
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                max_tokens=500,
                temperature=0.7
            )
            return response.choices[0].message.content
        except Exception as e:
            return f"ü§ñ –ü–æ–º–∏–ª–∫–∞ AI: {str(e)}"
    
    def analyze_market(self):
        """AI –∞–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫—É –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏"""
        prompt = """
        –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ä–∏–Ω–∫—É. 
        –û—Ü—ñ–Ω–∏ –Ω–∞—Å—Ç—Ä—ñ–π (–±–∏—á–∏–π/–≤–µ–¥–º–µ–∂–∏–π/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π), –∫–ª—é—á–æ–≤—ñ —Ä—ñ–≤–Ω—ñ, 
        –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Ç–∞ —Ä–∏–∑–∏–∫–∏. –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º.
        """
        
        return self.get_ai_response(prompt, "market_analysis")
    
    def start_discussion(self, user_id):
        """–ü–æ—á–∞—Ç–æ–∫ –¥—ñ–∞–ª–æ–≥—É –∑ AI"""
        prompt = """
        –¢–∏ - AI —Ç—Ä–µ–π–¥—ñ–Ω–≥–æ–≤–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ CortexTrader. 
        –ü–æ—á–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥ –∑ —Ç—Ä–µ–π–¥–µ—Ä–æ–º –ø—Ä–æ —Ç–æ—Ä–≥–æ–≤—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó.
        –ó–∞–ø–∏—Ç–∞–π –ø—Ä–æ –∞–∫—Ç–∏–≤–∏ —è–∫—ñ —Ü—ñ–∫–∞–≤–ª—è—Ç—å, —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó —á–∏ –ø–∏—Ç–∞–Ω–Ω—è.
        –ë—É–¥—å –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–º —Ç–∞ –∑–∞–æ—Ö–æ—á—É–π –¥–æ –¥—ñ–∞–ª–æ–≥—É.
        """
        
        self.conversations[user_id] = {
            'stage': 'awaiting_topic',
            'context': {},
            'history': []
        }
        
        response = self.get_ai_response(prompt)
        return response
    
    def continue_discussion(self, user_id, message):
        """–ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É –∑ AI"""
        if user_id not in self.conversations:
            return self.start_discussion(user_id)
        
        session = self.conversations[user_id]
        session['history'].append(f"User: {message}")
        
        # –§–æ—Ä–º—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI
        context = f"""
        –Ü—Å—Ç–æ—Ä—ñ—è –¥—ñ–∞–ª–æ–≥—É: {' | '.join(session['history'][-5:])}
        –ü–æ—Ç–æ—á–Ω–∏–π –µ—Ç–∞–ø: {session['stage']}
        –ö–æ–Ω—Ç–µ–∫—Å—Ç: {session['context']}
        """
        
        prompt = f"""
        –ü—Ä–æ–¥–æ–≤–∂ –¥—ñ–∞–ª–æ–≥ –∑ —Ç—Ä–µ–π–¥–µ—Ä–æ–º. –ô–æ–≥–æ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: "{message}"
        –ë—É–¥—å –∫–æ—Ä–∏—Å–Ω–∏–º —Ç—Ä–µ–π–¥—ñ–Ω–≥–æ–≤–∏–º –ø–æ–º—ñ—á–Ω–∏–∫–æ–º. –ê–Ω–∞–ª—ñ–∑—É–π, —Ä–∞–¥–∏, –æ–±–≥–æ–≤–æ—Ä—é–π.
        """
        
        response = self.get_ai_response(prompt, context)
        session['history'].append(f"AI: {response}")
        
        return response
    
    def process_message(self, message):
        """–û–±—Ä–æ–±–∫–∞ –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ AI"""
        prompt = f"""
        –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–ø–∏—Å–∞–≤: "{message}"
        –¢–∏ - CortexTrader, AI —Ç—Ä–µ–π–¥—ñ–Ω–≥–æ–≤–∏–π –ø–æ–º—ñ—á–Ω–∏–∫. 
        –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å–Ω–æ —Ç–∞ –ø–æ –¥—ñ–ª—É. –ó–∞–ø—Ä–æ–ø–æ–Ω—É–π —Å–≤–æ—ó –ø–æ—Å–ª—É–≥–∏.
        """
        
        return self.get_ai_response(prompt)

    def get_market_insight(self, asset):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Å–∞–π—Ç—ñ–≤ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∞–∫—Ç–∏–≤—É"""
        prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É {asset}. 
        –¢–µ—Ö–Ω—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑, —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ñ —Ñ–∞–∫—Ç–æ—Ä–∏, 
        –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥—É/–≤–∏—Ö–æ–¥—É, —Ä–∏–∑–∏–∫–∏.
        –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º —Ç–∞ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–º.
        """
        
        return self.get_ai_response(prompt, f"analysis_{asset}")