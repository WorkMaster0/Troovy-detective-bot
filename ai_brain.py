# ai_brain.py
import random
import re
from datetime import datetime
from transformers import pipeline, AutoTokenizer, AutoModelForCausalLM
import torch

class AIBrain:
    def __init__(self):
        self.market_mood = "neutral"
        self.conversations = {}
        self.chatbot = None
        self.setup_ai()
        
    def setup_ai(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ—ó AI –º–æ–¥–µ–ª—ñ"""
        try:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–µ–≥–∫—É –º–æ–¥–µ–ª—å –¥–ª—è —á–∞—Ç—É
            self.chatbot = pipeline(
                "text-generation",
                model="microsoft/DialoGPT-medium",
                tokenizer="microsoft/DialoGPT-medium",
                torch_dtype=torch.float16,
                device_map="auto" if torch.cuda.is_available() else None
            )
            print("‚úÖ AI –º–æ–¥–µ–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞!")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è AI: {e}")
            self.chatbot = None
    
    def get_ai_response(self, prompt, context=""):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ—ó AI"""
        if self.chatbot is None:
            return self.get_fallback_response(prompt)
        
        try:
            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤–Ω–∏–π –ø—Ä–æ–º–ø—Ç
            full_prompt = f"""
            –¢–∏ CortexTrader - AI –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥—É. 
            –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}
            
            –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {prompt}
            CortexTrader:
            """
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            response = self.chatbot(
                full_prompt,
                max_length=200,
                num_return_sequences=1,
                temperature=0.8,
                do_sample=True
            )
            
            # –û—á–∏—â–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            ai_text = response[0]['generated_text']
            ai_text = ai_text.replace(full_prompt, "").strip()
            ai_text = re.split(r'[.!?]', ai_text)[0] + "."
            
            return ai_text
            
        except Exception as e:
            return self.get_fallback_response(prompt)
    
    def get_fallback_response(self, prompt):
        """–†–µ–∑–µ—Ä–≤–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –±–µ–∑ AI"""
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∑–∞–ø–∏—Ç —ñ –¥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        prompt_lower = prompt.lower()
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–µ–º—É –∑–∞–ø–∏—Ç—É
        if any(word in prompt_lower for word in ['btc', 'bitcoin', '–±—ñ—Ç–∫–æ']):
            return "‚Çø Bitcoin –ø–æ–∫–∞–∑—É—î —Å–∏–ª—å–Ω—É –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å. –î–∏–≤—ñ—Ç—å—Å—è –∑–∞ —Ä—ñ–≤–Ω–µ–º $42K - —Ü–µ –∫–ª—é—á–æ–≤–∞ –∑–æ–Ω–∞!"
        
        elif any(word in prompt_lower for word in ['eth', 'ethereum', '–µ—Ç–µ—Ä']):
            return "üî∑ Ethereum –º–∞—î —Ö–æ—Ä–æ—à—É –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å. –°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ —Ä—ñ–≤–Ω–µ–º $2,200 - —Ü–µ –≤–∞–∂–ª–∏–≤–∏–π –æ–ø—ñ—Ä."
        
        elif any(word in prompt_lower for word in ['–∫—É–ø–∏—Ç–∏', 'buy', '–ª–æ–Ω–≥']):
            return "üéØ –î–ª—è –ø–æ–∫—É–ø–∫–∏ —à—É–∫–∞–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç—Ä–µ–Ω–¥—É —Ç–∞ volume spike. –†–∏–∑–∏–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π!"
        
        elif any(word in prompt_lower for word in ['–ø—Ä–æ–¥–∞—Ç–∏', 'sell', '—à–æ—Ä—Ç']):
            return "üìâ –î–ª—è –ø—Ä–æ–¥–∞–∂—É —á–µ–∫–∞–π—Ç–µ –ø—Ä–æ–±–æ—é –ø—ñ–¥—Ç—Ä–∏–º–æ–∫ –∞–±–æ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü—ñ—ó. –°—Ç–æ–ø-–ª–æ—Å –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π!"
        
        elif any(word in prompt_lower for word in ['—Ä–∏–Ω–æ–∫', 'market', '—Ç—Ä–µ–Ω–¥']):
            return "üìä –ü–æ—Ç–æ—á–Ω–∏–π —Ä–∏–Ω–æ–∫ –Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω–∏–π. –†–µ–∫–æ–º–µ–Ω–¥—É—é —Ç–æ—Ä–≥—É–≤–∞—Ç–∏ –æ–±–µ—Ä–µ–∂–Ω–æ —Ç–∞ –∑ –º–µ–Ω—à–∏–º–∏ –æ–±'—î–º–∞–º–∏."
        
        else:
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            responses = [
                "üß† –Ø–∫ AI —Ç—Ä–µ–π–¥—ñ–Ω–≥–æ–≤–∏–π –ø–æ–º—ñ—á–Ω–∏–∫, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –º–Ω–æ–∂–∏–Ω–Ω—ñ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∏ –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º —É –ø–æ–∑–∏—Ü—ñ—é.",
                "üí° –ü–∞–º'—è—Ç–∞–π—Ç–µ –ø—Ä–æ —Ä–∏–∑–∏–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç! –ù–µ —Ä–∏–∑–∏–∫—É–π—Ç–µ –±—ñ–ª—å—à–µ –Ω—ñ–∂ 2% –≤—ñ–¥ –¥–µ–ø–æ–∑–∏—Ç—É –Ω–∞ –æ–¥–Ω—É —É–≥–æ–¥—É.",
                "üìà –î–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É –≤–∞–∂–ª–∏–≤–æ –º–∞—Ç–∏ —á—ñ—Ç–∫–∏–π –ø–ª–∞–Ω —Ç–∞ –¥–æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏—Å—è –π–æ–≥–æ.",
                "‚ö° –í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å –Ω–∞ —Ä–∏–Ω–∫—É –≤–∏—Å–æ–∫–∞. –†–µ–∫–æ–º–µ–Ω–¥—É—é —á–µ–∫–∞—Ç–∏ —è—Å–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º.",
                "üéØ –ó–≤–µ—Ä—Ç–∞–π—Ç–µ —É–≤–∞–≥—É –Ω–∞ –æ–±—Å—è–≥–∏ - –≤–æ–Ω–∏ —á–∞—Å—Ç–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é—Ç—å —Ä—É—Ö —Ü—ñ–Ω–∏."
            ]
            return random.choice(responses)
    
    def analyze_market(self):
        """–ê–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫—É –∑ —Ç–µ—Ö–Ω—ñ—á–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏"""
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ (—Å–ø—Ä–æ—â–µ–Ω–æ)
        btc_price = self.get_crypto_price("BTCUSDT")
        eth_price = self.get_crypto_price("ETHUSDT")
        
        analysis = f"""
üìä <b>–ê–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫—É:</b>

‚Çø Bitcoin: ${btc_price:,.2f}
üî∑ Ethereum: ${eth_price:,.2f}

<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:</b>
‚Ä¢ –°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –∫–ª—é—á–æ–≤–∏–º–∏ —Ä—ñ–≤–Ω—è–º–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏/–æ–ø–æ—Ä—É
‚Ä¢ –ê–Ω–∞–ª—ñ–∑—É–π—Ç–µ –æ–±—Å—è–≥–∏ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä—É—Ö—ñ–≤
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–∏–∑–∏–∫–∞–º–∏

üéØ <i>–ì–æ—Ç–æ–≤–∏–π –æ–±–≥–æ–≤–æ—Ä–∏—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó!</i>
        """
        
        return analysis
    
    def get_crypto_price(self, symbol):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏ (—Å–ø—Ä–æ—â–µ–Ω–æ)"""
        # –¢—É—Ç –±—É–¥–µ —Ä–µ–∞–ª—å–Ω–∏–π API –≤—ã–∑–æ–≤, –ø–æ–∫–∏ —ñ–º—ñ—Ç—É—î–º–æ
        prices = {
            "BTCUSDT": random.uniform(40000, 45000),
            "ETHUSDT": random.uniform(2200, 2500),
            "SOLUSDT": random.uniform(90, 120)
        }
        return prices.get(symbol, 0)
    
    def start_discussion(self, user_id):
        """–ü–æ—á–∞—Ç–æ–∫ –¥—ñ–∞–ª–æ–≥—É"""
        self.conversations[user_id] = {
            'stage': 'awaiting_topic',
            'context': {}
        }
        
        questions = [
            "üß† <b>–î–∞–≤–∞–π—Ç–µ –æ–±–≥–æ–≤–æ—Ä–∏–º–æ —Ç–æ—Ä–≥–æ–≤—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó!</b>\n–Ø–∫–∏–π –∞–∫—Ç–∏–≤ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å –Ω–∞–π–±—ñ–ª—å—à–µ?",
            "üéØ <b>–ì–æ—Ç–æ–≤–∏–π –¥–æ –¥—ñ–∞–ª–æ–≥—É –ø—Ä–æ —Ç—Ä–µ–π–¥–∏–Ω–≥!</b>\n–†–æ–∑–∫–∞–∂—ñ—Ç—å –ø—Ä–æ –≤–∞—à —Ç–æ—Ä–≥–æ–≤–∏–π –ø—ñ–¥—Ö—ñ–¥?",
            "üí° <b>–û–±–≥–æ–≤–æ—Ä—é—î–º–æ —Ä–∏–Ω–æ–∫ —Ä–∞–∑–æ–º!</b>\n–Ø–∫—ñ –º–æ–Ω–µ—Ç–∏ –≤ –≤–∞—à–æ–º—É –ø–æ—Ä—Ç—Ñ–µ–ª—ñ?"
        ]
        
        return random.choice(questions)
    
    def continue_discussion(self, user_id, message):
        """–ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É"""
        if user_id not in self.conversations:
            return self.start_discussion(user_id)
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ AI –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        response = self.get_ai_response(
            message, 
            context="–æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–µ–π–¥–∏–Ω–≥–æ–≤–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π"
        )
        
        return response

# –î–æ–¥–∞–π—Ç–µ —Ü—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –≤ cortex_trader.py