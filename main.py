import ccxt
import requests
import time
import os
from datetime import datetime
from flask import Flask, request
import telebot
import threading
import json
import math
from typing import List, Tuple, Dict

# -------------------------
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ environment variables
# -------------------------
API_KEY_TELEGRAM = os.getenv("API_KEY_TELEGRAM")
CHAT_ID = os.getenv("CHAT_ID")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = WEBHOOK_HOST + WEBHOOK_PATH

GATE_API_KEY = os.getenv("GATE_API_KEY")
GATE_API_SECRET = os.getenv("GATE_API_SECRET")

MORALIS_API_KEY = os.getenv("MORALIS_API_KEY")
COINGECKO_API_KEY = os.getenv("COINGECKO_API_KEY", "")

TRADE_AMOUNT_USD = float(os.getenv("TRADE_AMOUNT_USD", 50))  # –ó–±—ñ–ª—å—à–∏–ª–∏ –¥–ª—è —Ñ'—é—á–µ—Ä—Å—ñ–≤
SPREAD_THRESHOLD = float(os.getenv("SPREAD_THRESHOLD", 1.5))  # –ú–µ–Ω—à–∏–π —Å–ø—Ä–µ–¥ –¥–ª—è —Ñ'—é—á–µ—Ä—Å—ñ–≤
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", 60))  # –ß–∞—Å—Ç—ñ—à—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
LEVERAGE = int(os.getenv("LEVERAGE", 3))  # –ö—Ä–µ–¥–∏—Ç–Ω–µ –ø–ª–µ—á–µ

bot = telebot.TeleBot(API_KEY_TELEGRAM)
app = Flask(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±—ñ—Ä–∂—ñ –¥–ª—è —Ñ'—é—á–µ—Ä—Å—ñ–≤
try:
    gate = ccxt.gateio({
        "apiKey": GATE_API_KEY,
        "secret": GATE_API_SECRET,
        "options": {
            "defaultType": "swap",  # –§'—é—á–µ—Ä—Å–∏
            "adjustForTimeDifference": True
        }
    })
    gate.load_markets()
    print(f"{datetime.now()} | ‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Gate.io Futures")
except Exception as e:
    print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Gate.io Futures: {e}")
    gate = None

active_positions = {}
token_blacklist = set()
coingecko_last_call = 0

# -------------------------
# –§'–Æ–ß–ï–†–°–ù–Ü –§–£–ù–ö–¶–Ü–á
# -------------------------
def set_leverage(symbol: str, leverage: int = LEVERAGE):
    """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø–ª–µ—á–∞"""
    try:
        gate.set_leverage(leverage, symbol)
        print(f"{datetime.now()} | ‚öôÔ∏è –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–ª–µ—á–µ {leverage}x –¥–ª—è {symbol}")
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–ª–µ—á–∞ {symbol}: {e}")

def get_futures_balance() -> float:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É —Ñ'—é—á–µ—Ä—Å–Ω–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É"""
    try:
        balance = gate.fetch_balance()
        return balance['USDT']['total']
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É: {e}")
        return 0

def get_futures_positions():
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π"""
    try:
        positions = gate.fetch_positions()
        return [p for p in positions if p['contracts'] > 0]
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π: {e}")
        return []

# -------------------------
# –û–¢–†–ò–ú–ê–ù–ù–Ø –¢–û–ö–ï–ù–Ü–í –î–õ–Ø –§'–Æ–ß–ï–†–°–Ü–í
# -------------------------
def get_top_futures_tokens(limit=20) -> List[Tuple[str, float]]:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø —Ç–æ–∫–µ–Ω—ñ–≤ –¥–ª—è —Ñ'—é—á–µ—Ä—Å—ñ–≤"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –º–∞—Ä–∫–µ—Ç–∏ —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ —Ñ'—é—á–µ—Ä—Å–∏
        markets = gate.load_markets()
        futures_markets = []
        
        for symbol, market in markets.items():
            if market['swap'] and market['active'] and symbol.endswith('/USDT:USDT'):
                # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ —Ñ–æ—Ä–º–∞—Ç: BTC/USDT:USDT -> BTC/USDT
                clean_symbol = symbol.replace(':USDT', '')
                try:
                    ticker = gate.fetch_ticker(symbol)
                    if ticker['last'] and ticker['last'] > 0:
                        futures_markets.append((clean_symbol, ticker['last']))
                        if len(futures_markets) >= limit:
                            break
                except:
                    continue
        
        return futures_markets
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ'—é—á–µ—Ä—Å–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤: {e}")
        return []

def get_futures_tokens_from_coingecko(limit=15) -> List[Tuple[str, float]]:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –∑ CoinGecko –¥–ª—è —Ñ'—é—á–µ—Ä—Å—ñ–≤"""
    global coingecko_last_call
    
    current_time = time.time()
    if current_time - coingecko_last_call < 60:
        return []
    
    try:
        url = "https://api.coingecko.com/api/v3/coins/markets"
        params = {
            "vs_currency": "usd",
            "order": "market_cap_desc",
            "per_page": limit,
            "page": 1,
            "sparkline": False
        }
        
        headers = {}
        if COINGECKO_API_KEY:
            headers = {"x-cg-demo-api-key": COINGECKO_API_KEY}
            
        response = requests.get(url, params=params, headers=headers, timeout=15)
        coingecko_last_call = current_time
        
        if response.status_code == 200:
            tokens = []
            for coin in response.json():
                symbol = coin["symbol"].upper()
                price = coin["current_price"]
                if price and price > 0:
                    tokens.append((f"{symbol}/USDT", price))
            return tokens
        return []
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå CoinGecko –ø–æ–º–∏–ª–∫–∞: {e}")
        return []

# -------------------------
# –§'–Æ–ß–ï–†–°–ù–ê –¢–û–†–ì–û–í–ê –õ–û–ì–Ü–ö–ê
# -------------------------
def calculate_futures_amount(symbol: str, price: float) -> float:
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤ –¥–ª—è —Ñ'—é—á–µ—Ä—Å—ñ–≤"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –º–∞—Ä–∫–µ—Ç
        market = gate.market(symbol + ':USDT')
        contract_size = float(market['contractSize'])
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤
        amount = (TRADE_AMOUNT_USD * LEVERAGE) / (price * contract_size)
        return round(amount, market['precision']['amount'])
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ: {e}")
        return 0

def execute_futures_trade(symbol: str, gate_price: float, dex_price: float, spread: float):
    """–í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ'—é—á–µ—Ä—Å–Ω–æ—ó —Ç–æ—Ä–≥–æ–≤–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó"""
    try:
        futures_symbol = symbol + ':USDT'
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–ª–µ—á–µ
        set_leverage(futures_symbol, LEVERAGE)
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
        amount = calculate_futures_amount(symbol, gate_price)
        if amount <= 0:
            return
        
        if spread > 0:  # DEX —Ü—ñ–Ω–∞ –≤–∏—â–∞ - –∫—É–ø—É—î–º–æ —Ñ'—é—á–µ—Ä—Å–∏
            order = gate.create_market_buy_order(futures_symbol, amount)
            
            msg = f"‚úÖ LONG {symbol}\n"
            msg += f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å: {amount:.4f} –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤\n"
            msg += f"–¶—ñ–Ω–∞: ${gate_price:.4f}\n"
            msg += f"–ü–ª–µ—á–µ: {LEVERAGE}x\n"
            msg += f"Spread: {spread:.2f}%"
            
        else:  # Gate —Ü—ñ–Ω–∞ –≤–∏—â–∞ - –ø—Ä–æ–¥–∞—î–º–æ —Ñ'—é—á–µ—Ä—Å–∏
            order = gate.create_market_sell_order(futures_symbol, amount)
            
            msg = f"‚úÖ SHORT {symbol}\n"
            msg += f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å: {amount:.4f} –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤\n"
            msg += f"–¶—ñ–Ω–∞: ${gate_price:.4f}\n"
            msg += f"–ü–ª–µ—á–µ: {LEVERAGE}x\n"
            msg += f"Spread: {spread:.2f}%"
        
        bot.send_message(CHAT_ID, msg)
        print(f"{datetime.now()} | {msg}")
        
        # –î–æ–¥–∞—î–º–æ –≤ –∞–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó
        active_positions[symbol] = {
            'side': 'long' if spread > 0 else 'short',
            'entry_price': gate_price,
            'amount': amount,
            'timestamp': datetime.now()
        }
        
    except Exception as e:
        error_msg = f"‚ùå –ü–û–ú–ò–õ–ö–ê —Ç–æ—Ä–≥—ñ–≤–ª—ñ {symbol}: {e}"
        bot.send_message(CHAT_ID, error_msg)
        print(f"{datetime.now()} | {error_msg}")

# -------------------------
# –ü–û–ö–†–ê–©–ï–ù–ò–ô –ê–†–ë–Ü–¢–†–ê–ñ –î–õ–Ø –§'–Æ–ß–ï–†–°–Ü–í
# -------------------------
def smart_futures_arbitrage(symbol: str, dex_price: float):
    """–†–æ–∑—É–º–Ω–∏–π –∞—Ä–±—ñ—Ç—Ä–∞–∂ –¥–ª—è —Ñ'—é—á–µ—Ä—Å—ñ–≤"""
    if not gate or symbol in active_positions or symbol in token_blacklist:
        return
    
    try:
        futures_symbol = symbol + ':USDT'
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –ø–∞—Ä–∏
        markets = gate.load_markets()
        if futures_symbol not in markets or not markets[futures_symbol].get('active', False):
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ü—ñ–Ω—É —Ñ'—é—á–µ—Ä—Å—ñ–≤
        ticker = gate.fetch_ticker(futures_symbol)
        gate_price = ticker['last']
        volume = ticker['quoteVolume']
        
        if gate_price == 0 or dex_price == 0 or volume < 10000:
            return
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å–ø—Ä–µ–¥
        spread = ((dex_price - gate_price) / gate_price) * 100
        
        # –§—ñ–ª—å—Ç—Ä –∑–Ω–∞—á—É—â–æ–≥–æ —Å–ø—Ä–µ–¥—É
        if abs(spread) < SPREAD_THRESHOLD:
            return
        
        print(f"{datetime.now()} | üìä {symbol} | Futures: {gate_price:.6f} | Spot: {dex_price:.6f} | Spread: {spread:.2f}%")
        
        # –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ –ø—Ä–∏ –∑–Ω–∞—á–Ω–æ–º—É —Å–ø—Ä–µ–¥—ñ
        if abs(spread) >= SPREAD_THRESHOLD:
            execute_futures_trade(symbol, gate_price, dex_price, spread)
            
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ —Ñ'—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É {symbol}: {e}")
        token_blacklist.add(symbol)

# -------------------------
# –ú–û–ù–Ü–¢–û–†–ò–ù–ì –ü–û–ó–ò–¶–Ü–ô
# -------------------------
def monitor_positions():
    """–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ç–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ–π"""
    while True:
        try:
            current_prices = {}
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ü—ñ–Ω–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π
            for symbol in list(active_positions.keys()):
                try:
                    ticker = gate.fetch_ticker(symbol + ':USDT')
                    current_prices[symbol] = ticker['last']
                    
                    position = active_positions[symbol]
                    entry_price = position['entry_price']
                    current_price = ticker['last']
                    
                    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ PnL
                    if position['side'] == 'long':
                        pnl_percent = ((current_price - entry_price) / entry_price) * 100 * LEVERAGE
                    else:
                        pnl_percent = ((entry_price - current_price) / entry_price) * 100 * LEVERAGE
                    
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—ñ —Ü—ñ–ª—ñ
                    if abs(pnl_percent) >= 5:  # 5% –ø—Ä–∏–±—É—Ç–æ–∫/–∑–±–∏—Ç–æ–∫
                        close_position(symbol, current_price, pnl_percent)
                        
                except Exception as e:
                    print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É {symbol}: {e}")
            
            time.sleep(30)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
            
        except Exception as e:
            print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø–æ–∑–∏—Ü—ñ–π: {e}")
            time.sleep(60)

def close_position(symbol: str, current_price: float, pnl_percent: float):
    """–ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó"""
    try:
        futures_symbol = symbol + ':USDT'
        position = active_positions[symbol]
        
        if position['side'] == 'long':
            order = gate.create_market_sell_order(futures_symbol, position['amount'])
        else:
            order = gate.create_market_buy_order(futures_symbol, position['amount'])
        
        # –í–∏–¥–∞–ª—è—î–º–æ –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π
        del active_positions[symbol]
        
        msg = f"üîí –ó–ê–ö–†–ò–¢–û {symbol}\n"
        msg += f"–°—Ç–æ—Ä–æ–Ω–∞: {position['side']}\n"
        msg += f"PnL: {pnl_percent:.2f}%\n"
        msg += f"–¶—ñ–Ω–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è: ${current_price:.4f}"
        
        bot.send_message(CHAT_ID, msg)
        print(f"{datetime.now()} | {msg}")
        
    except Exception as e:
        error_msg = f"‚ùå –ü–û–ú–ò–õ–ö–ê –∑–∞–∫—Ä–∏—Ç—Ç—è {symbol}: {e}"
        bot.send_message(CHAT_ID, error_msg)
        print(f"{datetime.now()} | {error_msg}")

# -------------------------
# –û–°–ù–û–í–ù–ò–ô –¶–ò–ö–õ –ê–†–ë–Ü–¢–†–ê–ñ–£
# -------------------------
def start_futures_arbitrage():
    """–û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –∞—Ä–±—ñ—Ç—Ä–∞–∂—É –¥–ª—è —Ñ'—é—á–µ—Ä—Å—ñ–≤"""
    bot.send_message(CHAT_ID, "üöÄ –§'—é—á–µ—Ä—Å–Ω–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü—ñ–π –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    monitoring_thread = threading.Thread(target=monitor_positions, daemon=True)
    monitoring_thread.start()
    
    cycle = 0
    while True:
        cycle += 1
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–ª–∞–Ω—Å
        balance = get_futures_balance()
        print(f"{datetime.now()} | üîÑ –¶–∏–∫–ª {cycle} | –ë–∞–ª–∞–Ω—Å: ${balance:.2f}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω–∏ –¥–ª—è –∞—Ä–±—ñ—Ç—Ä–∞–∂—É
        tokens = get_top_futures_tokens(25)
        if not tokens:
            tokens = get_futures_tokens_from_coingecko(20)
        
        print(f"{datetime.now()} | üì¶ –ó–Ω–∞–π–¥–µ–Ω–æ {len(tokens)} —Ñ'—é—á–µ—Ä—Å–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂
        for symbol, price in tokens:
            smart_futures_arbitrage(symbol, price)
            time.sleep(0.2)
        
        time.sleep(CHECK_INTERVAL)

# -------------------------
# TELEGRAM –ö–û–ú–ê–ù–î–ò –î–õ–Ø –§'–Æ–ß–ï–†–°–Ü–í
# -------------------------
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "ü§ñ –§'—é—á–µ—Ä—Å–Ω–∏–π –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏–π –±–æ—Ç –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!\n\n"
                         "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
                         "/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏\n"
                         "/balance - –ë–∞–ª–∞–Ω—Å\n"
                         "/positions - –ü–æ—Ç–æ—á–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó\n"
                         "/leverage - –ó–º—ñ–Ω–∏—Ç–∏ –ø–ª–µ—á–µ")

@bot.message_handler(commands=['positions'])
def show_positions(message):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó"""
    if not active_positions:
        bot.reply_to(message, "üì≠ –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π")
        return
    
    msg = "üìä –ê–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó:\n\n"
    for symbol, position in active_positions.items():
        msg += f"‚Ä¢ {symbol} {position['side'].upper()}\n"
        msg += f"  –í—Ö—ñ–¥: ${position['entry_price']:.4f}\n"
        msg += f"  –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {position['amount']:.4f}\n"
        msg += f"  –ß–∞—Å: {position['timestamp'].strftime('%H:%M:%S')}\n\n"
    
    bot.reply_to(message, msg)

@bot.message_handler(commands=['balance'])
def show_balance(message):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –±–∞–ª–∞–Ω—Å"""
    balance = get_futures_balance()
    positions = get_futures_positions()
    
    msg = f"üí∞ –ë–∞–ª–∞–Ω—Å: ${balance:.2f}\n"
    msg += f"üìä –ü–æ–∑–∏—Ü—ñ–π: {len(positions)}\n"
    msg += f"‚ö´ –ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫: {len(token_blacklist)} —Ç–æ–∫–µ–Ω—ñ–≤"
    
    bot.reply_to(message, msg)

# -------------------------
# –ó–ê–ü–£–°–ö
# -------------------------
if __name__ == "__main__":
    print(f"{datetime.now()} | üöÄ –ó–∞–ø—É—Å–∫ —Ñ'—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–æ–≥–æ –±–æ—Ç–∞...")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –∫–ª—é—á—ñ–≤
    required_keys = [API_KEY_TELEGRAM, CHAT_ID, GATE_API_KEY, GATE_API_SECRET]
    if not all(required_keys):
        print(f"{datetime.now()} | ‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ API –∫–ª—é—á—ñ!")
        exit(1)
    
    # –ó–∞–ø—É—Å–∫ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    arbitrage_thread = threading.Thread(target=start_futures_arbitrage, daemon=True)
    arbitrage_thread.start()
    
    # –ó–∞–ø—É—Å–∫ Flask –¥–ª—è webhook
    app.run(host="0.0.0.0", port=5000)