import ccxt
import requests
import time
import os
from datetime import datetime
from flask import Flask, request
import telebot
import threading
import json
import math
from typing import List, Tuple, Dict

# -------------------------
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ environment variables
# -------------------------
API_KEY_TELEGRAM = os.getenv("API_KEY_TELEGRAM")
CHAT_ID = os.getenv("CHAT_ID")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = WEBHOOK_HOST + WEBHOOK_PATH

GATE_API_KEY = os.getenv("GATE_API_KEY")
GATE_API_SECRET = os.getenv("GATE_API_SECRET")

TRADE_AMOUNT_USD = float(os.getenv("TRADE_AMOUNT_USD", 10))
SPREAD_THRESHOLD = float(os.getenv("SPREAD_THRESHOLD", 1.0))
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", 60))
LEVERAGE = int(os.getenv("LEVERAGE", 20))
MAX_POSITIONS = int(os.getenv("MAX_POSITIONS", 5))
MAX_SPREAD = float(os.getenv("MAX_SPREAD", 10.0))

bot = telebot.TeleBot(API_KEY_TELEGRAM)
app = Flask(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±—ñ—Ä–∂—ñ
try:
    exchange = ccxt.gateio({
        "apiKey": GATE_API_KEY,
        "secret": GATE_API_SECRET,
        "options": {"defaultType": "swap"}
    })
    exchange.load_markets()
    print(f"{datetime.now()} | ‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Gate.io Futures")
except Exception as e:
    print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}")
    exchange = None

active_positions = {}
trade_history = []
profit_loss = 0.0
token_blacklist = set()

# -------------------------
# WEBHOOK –¢–ê FLASK –§–£–ù–ö–¶–Ü–á
# -------------------------
@app.route(WEBHOOK_PATH, methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return 'OK', 200
    return 'Bad Request', 400

@app.route('/health', methods=['GET'])
def health_check():
    return {
        'status': 'healthy', 
        'timestamp': datetime.now().isoformat(),
        'positions': len(active_positions),
        'balance': get_balance()
    }

@app.route('/stats', methods=['GET'])
def stats():
    return {
        'total_trades': len(trade_history),
        'active_positions': len(active_positions),
        'profit_loss': profit_loss,
        'blacklisted_tokens': len(token_blacklist)
    }

def setup_webhook():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞ –¥–ª—è Telegram"""
    try:
        bot.remove_webhook()
        time.sleep(1)
        bot.set_webhook(url=WEBHOOK_URL)
        print(f"{datetime.now()} | ‚úÖ –í–µ–±—Ö—É–∫ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ: {WEBHOOK_URL}")
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞: {e}")

# -------------------------
# –§–£–ù–ö–¶–Ü–á –î–õ–Ø –†–û–ë–û–¢–ò –ó –ë–Ü–†–ñ–ï–Æ
# -------------------------
def get_balance() -> float:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É"""
    try:
        balance = exchange.fetch_balance()
        return balance['USDT']['total']
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É: {e}")
        return 0

def get_positions():
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π –∑ –±—ñ—Ä–∂—ñ"""
    try:
        positions = exchange.fetch_positions()
        return [p for p in positions if p['contracts'] > 0]
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π: {e}")
        return []

def get_futures_prices(symbols: List[str] = None) -> Dict[str, float]:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω —Ñ'—é—á–µ—Ä—Å—ñ–≤"""
    prices = {}
    if not exchange:
        return prices
        
    try:
        if not symbols:
            symbols = ['BTC', 'ETH', 'SOL', 'XRP', 'ADA', 'AVAX', 'DOT', 'LINK', 'MATIC', 'DOGE', 
                      'BNB', 'ATOM', 'LTC', 'OP', 'ARB', 'FIL', 'APT', 'NEAR', 'ALGO', 'XLM']
        
        for symbol in symbols:
            try:
                ticker = exchange.fetch_ticker(f"{symbol}/USDT:USDT")
                if ticker and ticker['last'] and ticker['last'] > 0:
                    prices[symbol] = ticker['last']
            except Exception as e:
                print(f"{datetime.now()} | ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Ü—ñ–Ω–∏ {symbol}: {e}")
                continue
                
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω: {e}")
    
    return prices

def get_spot_prices(symbols: List[str] = None) -> Dict[str, float]:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–æ—Ç–æ–≤–∏—Ö —Ü—ñ–Ω —á–µ—Ä–µ–∑ CoinGecko"""
    prices = {}
    
    try:
        if not symbols:
            symbols = ['BTC', 'ETH', 'SOL', 'XRP', 'ADA', 'AVAX', 'DOT', 'LINK', 'MATIC', 'DOGE']
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Å–∏–º–≤–æ–ª–∏ –≤ CoinGecko format
        coin_map = {
            'BTC': 'bitcoin', 'ETH': 'ethereum', 'SOL': 'solana', 
            'XRP': 'ripple', 'ADA': 'cardano', 'AVAX': 'avalanche-2',
            'DOT': 'polkadot', 'LINK': 'chainlink', 'MATIC': 'polygon',
            'DOGE': 'dogecoin', 'BNB': 'binancecoin', 'ATOM': 'cosmos',
            'LTC': 'litecoin', 'OP': 'optimism', 'ARB': 'arbitrum'
        }
        
        coin_ids = []
        for symbol in symbols:
            if symbol in coin_map:
                coin_ids.append(coin_map[symbol])
        
        if coin_ids:
            url = "https://api.coingecko.com/api/v3/simple/price"
            params = {
                "ids": ",".join(coin_ids),
                "vs_currencies": "usd"
            }
            
            response = requests.get(url, params=params, timeout=15)
            if response.status_code == 200:
                data = response.json()
                for coin_id, price_data in data.items():
                    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å–∏–º–≤–æ–ª –ø–æ coin_id
                    for sym, cid in coin_map.items():
                        if cid == coin_id:
                            prices[sym] = price_data['usd']
                            break
                
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–æ—Ç–æ–≤–∏—Ö —Ü—ñ–Ω: {e}")
    
    return prices

# -------------------------
# –ê–†–ë–Ü–¢–†–ê–ñ–ù–ê –õ–û–ì–Ü–ö–ê
# -------------------------
def calculate_spread(futures_price: float, spot_price: float) -> float:
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–ø—Ä–µ–¥—É"""
    if not futures_price or not spot_price or spot_price == 0:
        return 0
    return ((futures_price - spot_price) / spot_price) * 100

def calculate_futures_amount(symbol: str, price: float) -> float:
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤"""
    try:
        market = exchange.market(f"{symbol}/USDT:USDT")
        contract_size = float(market['contractSize'])
        
        if price <= 0 or contract_size <= 0:
            return 0
            
        amount = (TRADE_AMOUNT_USD * LEVERAGE) / (price * contract_size)
        precision = int(market['precision']['amount'])
        
        min_amount = float(market['limits']['amount']['min'])
        if amount < min_amount:
            print(f"{datetime.now()} | ‚ö†Ô∏è –ö—ñ–ª—å–∫—ñ—Å—Ç—å {amount} –º–µ–Ω—à–∞ –∑–∞ –º—ñ–Ω—ñ–º—É–º {min_amount}")
            return 0
            
        return round(amount, precision)
        
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ {symbol}: {e}")
        return 0

def execute_arbitrage_trade(symbol: str, futures_price: float, spot_price: float, spread: float):
    """–í–∏–∫–æ–Ω–∞–Ω–Ω—è –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ"""
    try:
        if len(active_positions) >= MAX_POSITIONS:
            return
            
        amount = calculate_futures_amount(symbol, futures_price)
        if amount <= 0:
            return
        
        futures_symbol = f"{symbol}/USDT:USDT"
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–ª–µ—á–µ
        exchange.set_leverage(LEVERAGE, futures_symbol)
        
        if spread > 0:  # –§'—é—á–µ—Ä—Å–∏ –¥–æ—Ä–æ–∂—á—ñ - –ø—Ä–æ–¥–∞—î–º–æ
            order = exchange.create_market_sell_order(futures_symbol, amount)
            side = "SHORT"
            reason = "–ü—Ä–µ–º—ñ—è —Ñ'—é—á–µ—Ä—Å—ñ–≤"
        else:  # –§'—é—á–µ—Ä—Å–∏ –¥–µ—à–µ–≤—à—ñ - –∫—É–ø—É—î–º–æ
            order = exchange.create_market_buy_order(futures_symbol, amount)
            side = "LONG"
            reason = "–î–∏—Å–∫–æ–Ω—Ç —Ñ'—é—á–µ—Ä—Å—ñ–≤"
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ trade
        trade_info = {
            'symbol': symbol,
            'side': side,
            'futures_price': futures_price,
            'spot_price': spot_price,
            'spread': spread,
            'amount': amount,
            'timestamp': datetime.now(),
            'order_id': order['id'],
            'reason': reason
        }
        trade_history.append(trade_info)
        active_positions[symbol] = trade_info
        
        msg = f"üéØ {side} {symbol}\n"
        msg += f"üìà –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
        msg += f"üí∞ –§'—é—á–µ—Ä—Å: ${futures_price:.6f}\n"
        msg += f"üí∞ –°–ø–æ—Ç: ${spot_price:.6f}\n"
        msg += f"üìä –°–ø—Ä–µ–¥: {spread:+.2f}%\n"
        msg += f"üì¶ –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {amount:.6f}\n"
        msg += f"‚öñÔ∏è –ü–ª–µ—á–µ: {LEVERAGE}x\n"
        msg += f"üÜî Order: {order['id']}"
        
        bot.send_message(CHAT_ID, msg)
        print(f"{datetime.now()} | {msg}")
        
    except Exception as e:
        error_msg = f"‚ùå –ü–û–ú–ò–õ–ö–ê —Ç–æ—Ä–≥—ñ–≤–ª—ñ {symbol}: {e}"
        bot.send_message(CHAT_ID, error_msg)
        print(f"{datetime.now()} | {error_msg}")
        token_blacklist.add(symbol)

def find_arbitrage_opportunities():
    """–ü–æ—à—É–∫ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π"""
    opportunities = []
    
    try:
        symbols = ['BTC', 'ETH', 'SOL', 'XRP', 'ADA', 'AVAX', 'DOT', 'LINK', 'MATIC', 'DOGE']
        
        futures_prices = get_futures_prices(symbols)
        spot_prices = get_spot_prices(symbols)
        
        for symbol in symbols:
            if symbol in active_positions or symbol in token_blacklist:
                continue
                
            futures_price = futures_prices.get(symbol)
            spot_price = spot_prices.get(symbol)
            
            if not futures_price or not spot_price:
                continue
                
            spread = calculate_spread(futures_price, spot_price)
            
            # –†–µ–∞–ª—å–Ω—ñ —Å–ø—Ä–µ–¥–∏ (1-10%)
            if abs(spread) >= SPREAD_THRESHOLD and abs(spread) <= MAX_SPREAD:
                opportunities.append((symbol, futures_price, spot_price, spread))
    
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∞—Ä–±—ñ—Ç—Ä–∞–∂—É: {e}")
    
    return opportunities

# -------------------------
# –ú–û–ù–Ü–¢–û–†–ò–ù–ì –¢–ê –£–ü–†–ê–í–õ–Ü–ù–ù–Ø
# -------------------------
def monitor_positions():
    """–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü—ñ–π"""
    while True:
        try:
            for symbol in list(active_positions.keys()):
                try:
                    position = active_positions[symbol]
                    ticker = exchange.fetch_ticker(f"{symbol}/USDT:USDT")
                    current_price = ticker['last']
                    entry_price = position['futures_price']
                    
                    if position['side'] == 'LONG':
                        pnl_percent = ((current_price - entry_price) / entry_price) * 100 * LEVERAGE
                    else:
                        pnl_percent = ((entry_price - current_price) / entry_price) * 100 * LEVERAGE
                    
                    # –ó–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–∏ ¬±3%
                    if abs(pnl_percent) >= 3.0:
                        close_position(symbol, current_price, pnl_percent)
                        
                except Exception as e:
                    print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É {symbol}: {e}")
            
            time.sleep(30)
            
        except Exception as e:
            print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
            time.sleep(60)

def close_position(symbol: str, current_price: float, pnl_percent: float):
    """–ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó"""
    try:
        position = active_positions[symbol]
        futures_symbol = f"{symbol}/USDT:USDT"
        
        if position['side'] == 'LONG':
            order = exchange.create_market_sell_order(futures_symbol, position['amount'])
        else:
            order = exchange.create_market_buy_order(futures_symbol, position['amount'])
        
        global profit_loss
        profit_loss += (pnl_percent / 100) * TRADE_AMOUNT_USD
        
        del active_positions[symbol]
        
        msg = f"üîí –ó–ê–ö–†–ò–¢–û {symbol} {position['side']}\n"
        msg += f"üìà PnL: {pnl_percent:+.2f}%\n"
        msg += f"üí∞ –¶—ñ–Ω–∞: ${current_price:.6f}\n"
        msg += f"üíµ –ü—Ä–∏–±—É—Ç–æ–∫: ${(pnl_percent/100)*TRADE_AMOUNT_USD:.2f}\n"
        msg += f"üè¶ –ó–∞–≥–∞–ª—å–Ω–∏–π PnL: ${profit_loss:.2f}"
        
        bot.send_message(CHAT_ID, msg)
        print(f"{datetime.now()} | {msg}")
        
    except Exception as e:
        error_msg = f"‚ùå –ü–û–ú–ò–õ–ö–ê –∑–∞–∫—Ä–∏—Ç—Ç—è {symbol}: {e}"
        bot.send_message(CHAT_ID, error_msg)
        print(f"{datetime.now()} | {error_msg}")

# -------------------------
# –û–°–ù–û–í–ù–ò–ô –¶–ò–ö–õ
# -------------------------
def start_arbitrage_bot():
    """–ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª –±–æ—Ç–∞"""
    bot.send_message(CHAT_ID, "üöÄ –ê—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –∑ —É—Å—ñ–º–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏!")
    
    monitor_thread = threading.Thread(target=monitor_positions, daemon=True)
    monitor_thread.start()
    
    cycle = 0
    while True:
        cycle += 1
        
        try:
            balance = get_balance()
            print(f"{datetime.now()} | üîÑ –¶–∏–∫–ª {cycle} | –ë–∞–ª–∞–Ω—Å: ${balance:.2f}")
            
            opportunities = find_arbitrage_opportunities()
            
            if opportunities:
                print(f"{datetime.now()} | üìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(opportunities)} –∞—Ä–±—ñ—Ç—Ä–∞–∂—ñ–≤")
                
                for symbol, futures_price, spot_price, spread in opportunities:
                    if len(active_positions) < MAX_POSITIONS:
                        execute_arbitrage_trade(symbol, futures_price, spot_price, spread)
                        time.sleep(2)
            
            time.sleep(CHECK_INTERVAL)
            
        except Exception as e:
            print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ: {e}")
            time.sleep(60)

# -------------------------
# TELEGRAM –ö–û–ú–ê–ù–î–ò (–ü–û–í–ù–ò–ô –ù–ê–ë–Ü–†)
# -------------------------
@bot.message_handler(commands=['start'])
def send_welcome(message):
    welcome_msg = """
ü§ñ *–ü–æ–≤–Ω–æ—Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –ê—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏–π –ë–æ—Ç*

*–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:*
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏
/balance - –ë–∞–ª–∞–Ω—Å —Ç–∞ –ø–æ–∑–∏—Ü—ñ—ó
/positions - –î–µ—Ç–∞–ª—ñ –ø–æ–∑–∏—Ü—ñ–π
/arbitrage - –ü–æ—à—É–∫ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É
/profit - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–±—É—Ç–∫—É
/trades - –Ü—Å—Ç–æ—Ä—ñ—è —É–≥–æ–¥
/blacklist - –ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫
/health - –°—Ç–∞–Ω –∑–¥–æ—Ä–æ–≤'—è
/help - –î–æ–ø–æ–º–æ–≥–∞

*–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:*
‚Ä¢ –°–ø—Ä–µ–¥: {}%
‚Ä¢ –ü–ª–µ—á–µ: {}x
‚Ä¢ –°—É–º–∞: ${}
‚Ä¢ –ú–∞–∫—Å. –ø–æ–∑–∏—Ü—ñ–π: {}
    """.format(SPREAD_THRESHOLD, LEVERAGE, TRADE_AMOUNT_USD, MAX_POSITIONS)
    
    bot.reply_to(message, welcome_msg, parse_mode='Markdown')

@bot.message_handler(commands=['status'])
def show_status(message):
    balance = get_balance()
    exchange_positions = get_positions()
    
    msg = f"üìä *–°—Ç–∞—Ç—É—Å –°–∏—Å—Ç–µ–º–∏*\n\n"
    msg += f"üí∞ *–ë–∞–ª–∞–Ω—Å:* ${balance:.2f}\n"
    msg += f"üìà *–ê–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó:* {len(active_positions)}\n"
    msg += f"üìâ *–ü–æ–∑–∏—Ü—ñ—ó –Ω–∞ –±—ñ—Ä–∂—ñ:* {len(exchange_positions)}\n"
    msg += f"‚ö´ *–ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫:* {len(token_blacklist)}\n"
    msg += f"üíµ *–ó–∞–≥–∞–ª—å–Ω–∏–π PnL:* ${profit_loss:.2f}\n"
    msg += f"üîÑ *–í—Å—å–æ–≥–æ —É–≥–æ–¥:* {len(trade_history)}"
    
    bot.reply_to(message, msg, parse_mode='Markdown')

@bot.message_handler(commands=['balance'])
def show_balance(message):
    balance = get_balance()
    msg = f"üí≥ *–ë–∞–ª–∞–Ω—Å:* ${balance:.2f}\n"
    msg += f"üìä *–ê–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó:* {len(active_positions)}/{MAX_POSITIONS}"
    bot.reply_to(message, msg, parse_mode='Markdown')

@bot.message_handler(commands=['positions'])
def show_positions(message):
    if not active_positions:
        bot.reply_to(message, "üì≠ –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π")
        return
    
    msg = "üìã *–ê–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó:*\n\n"
    for symbol, position in active_positions.items():
        msg += f"‚Ä¢ {symbol} {position['side']}\n"
        msg += f"  –¶—ñ–Ω–∞: ${position['futures_price']:.6f}\n"
        msg += f"  –°–ø—Ä–µ–¥: {position['spread']:.2f}%\n"
        msg += f"  –ß–∞—Å: {position['timestamp'].strftime('%H:%M:%S')}\n\n"
    
    bot.reply_to(message, msg, parse_mode='Markdown')

@bot.message_handler(commands=['arbitrage'])
def find_arbitrage_cmd(message):
    opportunities = find_arbitrage_opportunities()
    
    if opportunities:
        msg = "üéØ *–ó–Ω–∞–π–¥–µ–Ω—ñ –∞—Ä–±—ñ—Ç—Ä–∞–∂—ñ:*\n\n"
        for symbol, futures, spot, spread in opportunities:
            direction = "üìà" if spread > 0 else "üìâ"
            msg += f"{direction} *{symbol}:* {spread:+.2f}%\n"
            msg += f"   Futures: ${futures:.6f}\n"
            msg += f"   Spot: ${spot:.6f}\n\n"
    else:
        msg = "üîç *–ê—Ä–±—ñ—Ç—Ä–∞–∂—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ*"
    
    bot.reply_to(message, msg, parse_mode='Markdown')

@bot.message_handler(commands=['profit'])
def show_profit(message):
    msg = f"üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–±—É—Ç–∫—É*\n\n"
    msg += f"üíµ *–ó–∞–≥–∞–ª—å–Ω–∏–π PnL:* ${profit_loss:.2f}\n"
    msg += f"üîÑ *–í—Å—å–æ–≥–æ —É–≥–æ–¥:* {len(trade_history)}\n"
    msg += f"‚úÖ *–ê–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π:* {len(active_positions)}\n"
    msg += f"‚ùå *–ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫:* {len(token_blacklist)}"
    
    if trade_history:
        profitable = sum(1 for t in trade_history if 'spread' in t and t['spread'] > 0)
        msg += f"\nüìä *–£—Å–ø—ñ—à–Ω—ñ —É–≥–æ–¥–∏:* {profitable}/{len(trade_history)}"
    
    bot.reply_to(message, msg, parse_mode='Markdown')

@bot.message_handler(commands=['trades'])
def show_trades(message):
    if not trade_history:
        bot.reply_to(message, "üì≠ –ù–µ–º–∞—î —ñ—Å—Ç–æ—Ä—ñ—ó —É–≥–æ–¥")
        return
    
    msg = "üìú *–û—Å—Ç–∞–Ω–Ω—ñ 5 —É–≥–æ–¥:*\n\n"
    for trade in trade_history[-5:]:
        msg += f"‚Ä¢ {trade['symbol']} {trade['side']}\n"
        msg += f"  –°–ø—Ä–µ–¥: {trade.get('spread', 0):.2f}%\n"
        msg += f"  –ß–∞—Å: {trade['timestamp'].strftime('%H:%M')}\n\n"
    
    bot.reply_to(message, msg, parse_mode='Markdown')

@bot.message_handler(commands=['blacklist'])
def show_blacklist(message):
    if token_blacklist:
        msg = "‚ö´ *–ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫:*\n\n"
        for token in list(token_blacklist)[:10]:
            msg += f"‚Ä¢ {token}\n"
    else:
        msg = "‚úÖ *–ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π*"
    
    bot.reply_to(message, msg, parse_mode='Markdown')

@bot.message_handler(commands=['health'])
def show_health(message):
    health = health_check()
    bot.reply_to(message, f"‚ù§Ô∏è *–°—Ç–∞–Ω –∑–¥–æ—Ä–æ–≤'—è:* {health['status']}\nüïê *–ß–∞—Å:* {health['timestamp']}")

@bot.message_handler(commands=['help'])
def show_help(message):
    help_msg = """
üÜò *–î–æ–≤—ñ–¥–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º*

*/start* - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
*/status* - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏
*/balance* - –ë–∞–ª–∞–Ω—Å
*/positions* - –ê–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó
*/arbitrage* - –ü–æ—à—É–∫ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É
*/profit* - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–±—É—Ç–∫—É
*/trades* - –Ü—Å—Ç–æ—Ä—ñ—è —É–≥–æ–¥
*/blacklist* - –ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫
*/health* - –°—Ç–∞–Ω –∑–¥–æ—Ä–æ–≤'—è
*/help* - –¶—è –¥–æ–≤—ñ–¥–∫–∞
    """
    
    bot.reply_to(message, help_msg, parse_mode='Markdown')

# -------------------------
# –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–ò
# -------------------------
if __name__ == "__main__":
    print(f"{datetime.now()} | üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ—Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–æ–≥–æ –±–æ—Ç–∞...")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–ª—é—á—ñ–≤
    required_keys = [API_KEY_TELEGRAM, CHAT_ID, GATE_API_KEY, GATE_API_SECRET]
    if not all(required_keys):
        print(f"{datetime.now()} | ‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –∫–ª—é—á—ñ!")
        exit(1)
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞
    setup_webhook()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot_thread = threading.Thread(target=start_arbitrage_bot, daemon=True)
    bot_thread.start()
    
    print(f"{datetime.now()} | ‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –í–µ–±—Ö—É–∫: {WEBHOOK_URL}")
    
    # –ó–∞–ø—É—Å–∫ Flask
    app.run(host="0.0.0.0", port=5000, debug=False, use_reloader=False)