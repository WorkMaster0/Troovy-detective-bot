import ccxt
import requests
import time
import os
from datetime import datetime
from flask import Flask, request
import telebot
import threading
import json
import math
from typing import List, Tuple, Dict

# -------------------------
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ environment variables
# -------------------------
API_KEY_TELEGRAM = os.getenv("API_KEY_TELEGRAM")
CHAT_ID = os.getenv("CHAT_ID")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = WEBHOOK_HOST + WEBHOOK_PATH

GATE_API_KEY = os.getenv("GATE_API_KEY")
GATE_API_SECRET = os.getenv("GATE_API_SECRET")

BINANCE_API_KEY = os.getenv("BINANCE_API_KEY", "")
BINANCE_API_SECRET = os.getenv("BINANCE_API_SECRET", "")

TRADE_AMOUNT_USD = float(os.getenv("TRADE_AMOUNT_USD", 50))
SPREAD_THRESHOLD = float(os.getenv("SPREAD_THRESHOLD", 0.8))
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", 30))
LEVERAGE = int(os.getenv("LEVERAGE", 20))
MAX_POSITIONS = int(os.getenv("MAX_POSITIONS", 1))

bot = telebot.TeleBot(API_KEY_TELEGRAM)
app = Flask(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±—ñ—Ä–∂
exchanges = {}
trade_history = []

try:
    exchanges['gate'] = ccxt.gateio({
        "apiKey": GATE_API_KEY,
        "secret": GATE_API_SECRET,
        "options": {"defaultType": "swap"}
    })
    exchanges['gate'].load_markets()
    print(f"{datetime.now()} | ‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Gate.io Futures")
except Exception as e:
    print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Gate.io Futures: {e}")

try:
    exchanges['binance'] = ccxt.binance({
        "options": {"defaultType": "future"}
    })
    exchanges['binance'].load_markets()
    print(f"{datetime.now()} | ‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Binance Futures")
except Exception as e:
    print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Binance Futures: {e}")

active_positions = {}
token_blacklist = set()
profit_loss = 0.0

# -------------------------
# –§'–Æ–ß–ï–†–°–ù–Ü –§–£–ù–ö–¶–Ü–á
# -------------------------
def set_leverage(symbol: str, leverage: int = LEVERAGE):
    """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø–ª–µ—á–∞"""
    try:
        exchanges['gate'].set_leverage(leverage, symbol)
        print(f"{datetime.now()} | ‚öôÔ∏è –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–ª–µ—á–µ {leverage}x –¥–ª—è {symbol}")
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–ª–µ—á–∞ {symbol}: {e}")

def get_futures_balance() -> float:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É —Ñ'—é—á–µ—Ä—Å–Ω–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É"""
    try:
        balance = exchanges['gate'].fetch_balance()
        return balance['USDT']['total']
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É: {e}")
        return 0

def get_futures_positions():
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π"""
    try:
        positions = exchanges['gate'].fetch_positions()
        return [p for p in positions if p['contracts'] > 0]
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π: {e}")
        return []

# -------------------------
# –ü–û–ö–†–ê–©–ï–ù–ï –û–¢–†–ò–ú–ê–ù–ù–Ø –¶–Ü–ù
# -------------------------
def get_futures_prices(exchange_name: str, symbols: List[str] = None) -> Dict[str, float]:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω —Ñ'—é—á–µ—Ä—Å—ñ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤"""
    prices = {}
    try:
        exchange = exchanges.get(exchange_name)
        if not exchange:
            return prices
            
        if not symbols:
            # –Ø–∫—â–æ —Å–∏–º–≤–æ–ª–∏ –Ω–µ –≤–∫–∞–∑–∞–Ω—ñ, –±–µ—Ä–µ–º–æ —Ç–æ–ø 20
            markets = exchange.load_markets()
            symbols = []
            for symbol, market in markets.items():
                if market.get('swap', False) and market.get('active', False) and symbol.endswith('/USDT:USDT'):
                    clean_symbol = symbol.replace(':USDT', '').replace('/USDT', '')
                    symbols.append(clean_symbol)
                    if len(symbols) >= 20:
                        break
        
        for symbol in symbols:
            try:
                ticker = exchange.fetch_ticker(symbol + '/USDT:USDT')
                if ticker['last'] and ticker['last'] > 0:
                    prices[symbol] = ticker['last']
            except:
                continue
                
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω –∑ {exchange_name}: {e}")
    
    return prices

def get_volatile_tokens() -> List[str]:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤"""
    try:
        url = "https://fapi.binance.com/fapi/v1/ticker/24hr"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            tickers = response.json()
            volatile_tokens = []
            
            for ticker in tickers:
                symbol = ticker['symbol'].replace('USDT', '')
                price_change = float(ticker['priceChangePercent'])
                volume = float(ticker['volume'])
                
                if abs(price_change) > 3.0 and volume > 2000000:
                    volatile_tokens.append(symbol)
                    if len(volatile_tokens) >= 15:
                        break
            
            return volatile_tokens
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤: {e}")
    
    return ['BTC', 'ETH', 'SOL', 'XRP', 'ADA', 'DOT', 'LINK', 'AVAX', 'MATIC', 'DOGE']

# -------------------------
# –¢–û–†–ì–û–í–ê –õ–û–ì–Ü–ö–ê
# -------------------------
def calculate_futures_amount(symbol: str, price: float) -> float:
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤"""
    try:
        market = exchanges['gate'].market(symbol + '/USDT:USDT')
        contract_size = float(market['contractSize'])
        
        if price <= 0 or contract_size <= 0:
            return 0
            
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤
        amount = (TRADE_AMOUNT_USD * LEVERAGE) / (price * contract_size)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ precision —Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ int
        precision = int(market['precision']['amount'])
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å
        min_amount = float(market['limits']['amount']['min'])
        if amount < min_amount:
            print(f"{datetime.now()} | ‚ö†Ô∏è –ö—ñ–ª—å–∫—ñ—Å—Ç—å {amount} –º–µ–Ω—à–∞ –∑–∞ –º—ñ–Ω—ñ–º—É–º {min_amount} –¥–ª—è {symbol}")
            return 0
            
        return round(amount, precision)
        
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ {symbol}: {e}")
        return 0

def execute_futures_trade(symbol: str, gate_price: float, binance_price: float, spread: float):
    """–í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó"""
    try:
        if len(active_positions) >= MAX_POSITIONS:
            print(f"{datetime.now()} | ‚ö†Ô∏è –î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º—É–º –ø–æ–∑–∏—Ü—ñ–π ({MAX_POSITIONS})")
            return
            
        futures_symbol = symbol + '/USDT:USDT'
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–ª–µ—á–µ
        set_leverage(futures_symbol, LEVERAGE)
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
        amount = calculate_futures_amount(symbol, gate_price)
        if amount <= 0:
            print(f"{datetime.now()} | ‚ö†Ô∏è –ù—É–ª—å–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è {symbol}")
            return
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
        market = exchanges['gate'].market(futures_symbol)
        min_amount = float(market['limits']['amount']['min'])
        if amount < min_amount:
            print(f"{datetime.now()} | ‚ö†Ô∏è –ö—ñ–ª—å–∫—ñ—Å—Ç—å {amount} –º–µ–Ω—à–∞ –∑–∞ –º—ñ–Ω—ñ–º—É–º {min_amount} –¥–ª—è {symbol}")
            return
        
        if spread > 0:  # Binance —Ü—ñ–Ω–∞ –≤–∏—â–∞ - –∫—É–ø—É—î–º–æ –Ω–∞ Gate
            order = exchanges['gate'].create_market_buy_order(futures_symbol, amount)
            side = "LONG"
        else:  # Gate —Ü—ñ–Ω–∞ –≤–∏—â–∞ - –ø—Ä–æ–¥–∞—î–º–æ –Ω–∞ Gate
            order = exchanges['gate'].create_market_sell_order(futures_symbol, amount)
            side = "SHORT"
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ trade
        trade_info = {
            'symbol': symbol,
            'side': side,
            'price': gate_price,
            'amount': amount,
            'spread': spread,
            'timestamp': datetime.now(),
            'order_id': order['id']
        }
        trade_history.append(trade_info)
        
        msg = f"üéØ {side} {symbol}\n"
        msg += f"üí∞ –¶—ñ–Ω–∞: ${gate_price:.4f}\n"
        msg += f"üìä Spread: {abs(spread):.2f}%\n"
        msg += f"üì¶ –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {amount:.6f}\n"
        msg += f"‚öñÔ∏è –ü–ª–µ—á–µ: {LEVERAGE}x\n"
        msg += f"üÜî Order: {order['id']}"
        
        bot.send_message(CHAT_ID, msg)
        print(f"{datetime.now()} | {msg}")
        
        # –î–æ–¥–∞—î–º–æ –≤ –∞–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó
        active_positions[symbol] = trade_info
        
    except Exception as e:
        error_msg = f"‚ùå –ü–û–ú–ò–õ–ö–ê —Ç–æ—Ä–≥—ñ–≤–ª—ñ {symbol}: {e}"
        bot.send_message(CHAT_ID, error_msg)
        print(f"{datetime.now()} | {error_msg}")

# -------------------------
# –ê–†–ë–Ü–¢–†–ê–ñ –¢–ê –ú–û–ù–Ü–¢–û–†–ò–ù–ì
# -------------------------
def find_arbitrage_opportunities():
    """–ü–æ—à—É–∫ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π"""
    opportunities = []
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ —Ç–æ–∫–µ–Ω–∏
        volatile_tokens = get_volatile_tokens()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ü—ñ–Ω–∏ –¥–ª—è —Ü–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤
        gate_prices = get_futures_prices('gate', volatile_tokens)
        binance_prices = get_futures_prices('binance', volatile_tokens)
        
        for symbol in volatile_tokens:
            if symbol in active_positions or symbol in token_blacklist:
                continue
                
            gate_price = gate_prices.get(symbol)
            binance_price = binance_prices.get(symbol)
            
            if not gate_price or not binance_price or gate_price == 0:
                continue
                
            spread = ((binance_price - gate_price) / gate_price) * 100
            
            if abs(spread) >= SPREAD_THRESHOLD:
                opportunities.append((symbol, gate_price, binance_price, spread))
    
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∞—Ä–±—ñ—Ç—Ä–∞–∂—É: {e}")
    
    return opportunities

def monitor_positions():
    """–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ç–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ–π"""
    while True:
        try:
            for symbol in list(active_positions.keys()):
                try:
                    position = active_positions[symbol]
                    ticker = exchanges['gate'].fetch_ticker(symbol + '/USDT:USDT')
                    current_price = ticker['last']
                    entry_price = position['price']
                    
                    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ PnL
                    if position['side'] == 'LONG':
                        pnl_percent = ((current_price - entry_price) / entry_price) * 100 * LEVERAGE
                    else:
                        pnl_percent = ((entry_price - current_price) / entry_price) * 100 * LEVERAGE
                    
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è
                    if abs(pnl_percent) >= 5.0:  # 5% –ø—Ä–∏–±—É—Ç–æ–∫/–∑–±–∏—Ç–æ–∫
                        close_position(symbol, current_price, pnl_percent)
                        
                except Exception as e:
                    print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É {symbol}: {e}")
            
            time.sleep(20)
            
        except Exception as e:
            print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø–æ–∑–∏—Ü—ñ–π: {e}")
            time.sleep(30)

def close_position(symbol: str, current_price: float, pnl_percent: float):
    """–ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó"""
    try:
        position = active_positions[symbol]
        futures_symbol = symbol + '/USDT:USDT'
        
        if position['side'] == 'LONG':
            order = exchanges['gate'].create_market_sell_order(futures_symbol, position['amount'])
        else:
            order = exchanges['gate'].create_market_buy_order(futures_symbol, position['amount'])
        
        # –û–Ω–æ–≤–ª—é—î–º–æ PnL
        global profit_loss
        profit_loss += (pnl_percent / 100) * TRADE_AMOUNT_USD
        
        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–∑–∏—Ü—ñ—é
        del active_positions[symbol]
        
        msg = f"üîí –ó–ê–ö–†–ò–¢–û {symbol}\n"
        msg += f"üìà PnL: {pnl_percent:.2f}%\n"
        msg += f"üí∞ –¶—ñ–Ω–∞: ${current_price:.4f}\n"
        msg += f"üíµ –ü—Ä–∏–±—É—Ç–æ–∫: ${(pnl_percent/100)*TRADE_AMOUNT_USD:.2f}\n"
        msg += f"üè¶ –ó–∞–≥–∞–ª—å–Ω–∏–π PnL: ${profit_loss:.2f}"
        
        bot.send_message(CHAT_ID, msg)
        print(f"{datetime.now()} | {msg}")
        
    except Exception as e:
        error_msg = f"‚ùå –ü–û–ú–ò–õ–ö–ê –∑–∞–∫—Ä–∏—Ç—Ç—è {symbol}: {e}"
        bot.send_message(CHAT_ID, error_msg)
        print(f"{datetime.now()} | {error_msg}")

# -------------------------
# –û–°–ù–û–í–ù–ò–ô –¶–ò–ö–õ
# -------------------------
def start_futures_arbitrage():
    """–û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –∞—Ä–±—ñ—Ç—Ä–∞–∂—É"""
    bot.send_message(CHAT_ID, "üöÄ –§'—é—á–µ—Ä—Å–Ω–∏–π –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
    monitoring_thread = threading.Thread(target=monitor_positions, daemon=True)
    monitoring_thread.start()
    
    cycle = 0
    while True:
        cycle += 1
        
        try:
            balance = get_futures_balance()
            positions_count = len(active_positions)
            
            print(f"{datetime.now()} | üîÑ –¶–∏–∫–ª {cycle} | –ë–∞–ª–∞–Ω—Å: ${balance:.2f} | –ü–æ–∑–∏—Ü—ñ—ó: {positions_count}")
            
            # –®—É–∫–∞—î–º–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂
            opportunities = find_arbitrage_opportunities()
            
            if opportunities:
                print(f"{datetime.now()} | üìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(opportunities)} –∞—Ä–±—ñ—Ç—Ä–∞–∂—ñ–≤")
                
                # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —Å–ø—Ä–µ–¥–æ–º
                opportunities.sort(key=lambda x: abs(x[3]), reverse=True)
                
                for symbol, gate_price, binance_price, spread in opportunities[:3]:
                    if positions_count < MAX_POSITIONS:
                        execute_futures_trade(symbol, gate_price, binance_price, spread)
                        time.sleep(1)
                    else:
                        print(f"{datetime.now()} | ‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º –ø–æ–∑–∏—Ü—ñ–π –¥–æ—Å—è–≥–Ω—É—Ç–æ")
                        break
            
            time.sleep(CHECK_INTERVAL)
            
        except Exception as e:
            print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É —Ü–∏–∫–ª—ñ: {e}")
            time.sleep(60)

# -------------------------
# TELEGRAM –ö–û–ú–ê–ù–î–ò
# -------------------------
@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç—É"""
    welcome_msg = """
ü§ñ *–§\'—é—á–µ—Ä—Å–Ω–∏–π –ê—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏–π –ë–æ—Ç*

*–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:*
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏
/balance - –ë–∞–ª–∞–Ω—Å —Ç–∞ –ø–æ–∑–∏—Ü—ñ—ó
/arbitrage - –ú–∏—Ç—Ç—î–≤–∏–π –ø–æ—à—É–∫ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É
/tokens - –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω—ñ–≤
/profit - –ü—Ä–∏–±—É—Ç–æ–∫ —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/blacklist - –ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫
/help - –î–æ–ø–æ–º–æ–≥–∞

*–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:*
‚Ä¢ –°–ø—Ä–µ–¥: {}%
‚Ä¢ –ü–ª–µ—á–µ: {}x
‚Ä¢ –°—É–º–∞: ${}
‚Ä¢ –ú–∞–∫—Å. –ø–æ–∑–∏—Ü—ñ–π: {}
    """.format(SPREAD_THRESHOLD, LEVERAGE, TRADE_AMOUNT_USD, MAX_POSITIONS)
    
    bot.reply_to(message, welcome_msg, parse_mode='Markdown')

@bot.message_handler(commands=['status'])
def show_status(message):
    """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏"""
    balance = get_futures_balance()
    positions = get_futures_positions()
    
    msg = f"üìä *–°—Ç–∞—Ç—É—Å –°–∏—Å—Ç–µ–º—ã*\n\n"
    msg += f"üí∞ *–ë–∞–ª–∞–Ω—Å:* ${balance:.2f}\n"
    msg += f"üìà *–ê–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó:* {len(active_positions)}\n"
    msg += f"üìâ *–ü–æ–∑–∏—Ü—ñ—ó –Ω–∞ –±—ñ—Ä–∂—ñ:* {len(positions)}\n"
    msg += f"‚ö´ *–ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫:* {len(token_blacklist)}\n"
    msg += f"üíµ *–ó–∞–≥–∞–ª—å–Ω–∏–π PnL:* ${profit_loss:.2f}\n"
    msg += f"üîÑ *–¶–∏–∫–ª:* {len(trade_history)} trades"
    
    bot.reply_to(message, msg, parse_mode='Markdown')

@bot.message_handler(commands=['balance'])
def show_balance(message):
    """–ë–∞–ª–∞–Ω—Å —Ç–∞ –ø–æ–∑–∏—Ü—ñ—ó"""
    balance = get_futures_balance()
    
    msg = f"üí≥ *–ë–∞–ª–∞–Ω—Å:* ${balance:.2f}\n\n"
    msg += f"üìä *–ê–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó:* {len(active_positions)}\n"
    
    if active_positions:
        msg += "\n*–î–µ—Ç–∞–ª—ñ –ø–æ–∑–∏—Ü—ñ–π:*\n"
        for symbol, pos in active_positions.items():
            msg += f"‚Ä¢ {symbol} {pos['side']} - ${pos['price']:.4f}\n"
    
    bot.reply_to(message, msg, parse_mode='Markdown')

@bot.message_handler(commands=['arbitrage'])
def find_arbitrage_cmd(message):
    """–ú–∏—Ç—Ç—î–≤–∏–π –ø–æ—à—É–∫ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É"""
    opportunities = find_arbitrage_opportunities()
    
    if opportunities:
        msg = "üéØ *–ó–Ω–∞–π–¥–µ–Ω—ñ –∞—Ä–±—ñ—Ç—Ä–∞–∂—ñ:*\n\n"
        for symbol, gate_price, binance_price, spread in opportunities[:5]:
            direction = "üìà" if spread > 0 else "üìâ"
            msg += f"{direction} *{symbol}:* {spread:+.2f}%\n"
            msg += f"   Gate: ${gate_price:.4f} | Binance: ${binance_price:.4f}\n\n"
    else:
        msg = "üîç *–ê—Ä–±—ñ—Ç—Ä–∞–∂—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ*"
    
    bot.reply_to(message, msg, parse_mode='Markdown')

@bot.message_handler(commands=['profit'])
def show_profit(message):
    """–ü—Ä–∏–±—É—Ç–æ–∫ —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    msg = f"üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–±—É—Ç–∫—É*\n\n"
    msg += f"üíµ *–ó–∞–≥–∞–ª—å–Ω–∏–π PnL:* ${profit_loss:.2f}\n"
    msg += f"üîÑ *–í—Å—å–æ–≥–æ —É–≥–æ–¥:* {len(trade_history)}\n"
    msg += f"‚úÖ *–ê–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π:* {len(active_positions)}\n\n"
    
    if trade_history:
        msg += "*–û—Å—Ç–∞–Ω–Ω—ñ 5 —É–≥–æ–¥:*\n"
        for trade in trade_history[-5:]:
            msg += f"‚Ä¢ {trade['symbol']} {trade['side']} - {trade['spread']:.2f}%\n"
    
    bot.reply_to(message, msg, parse_mode='Markdown')

@bot.message_handler(commands=['blacklist'])
def show_blacklist(message):
    """–ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫"""
    if token_blacklist:
        msg = "‚ö´ *–ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫:*\n\n"
        for token in list(token_blacklist)[:10]:
            msg += f"‚Ä¢ {token}\n"
    else:
        msg = "‚úÖ *–ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π*"
    
    bot.reply_to(message, msg, parse_mode='Markdown')

@bot.message_handler(commands=['help'])
def show_help(message):
    """–î–æ–ø–æ–º–æ–≥–∞"""
    help_msg = """
üÜò *–î–æ–≤—ñ–¥–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º*

*/start* - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
*/status* - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏
*/balance* - –ë–∞–ª–∞–Ω—Å —Ç–∞ –ø–æ–∑–∏—Ü—ñ—ó
*/arbitrage* - –ú–∏—Ç—Ç—î–≤–∏–π –ø–æ—à—É–∫ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É
*/profit* - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–±—É—Ç–∫—É
*/tokens* - –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω—ñ–≤
*/blacklist* - –ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫
*/help* - –¶—è –¥–æ–≤—ñ–¥–∫–∞

*–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è:*
‚Ä¢ SPREAD_THRESHOLD - –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Å–ø—Ä–µ–¥
‚Ä¢ TRADE_AMOUNT_USD - –°—É–º–∞ —Ç–æ—Ä–≥—ñ–≤–ª—ñ
‚Ä¢ LEVERAGE - –ö—Ä–µ–¥–∏—Ç–Ω–µ –ø–ª–µ—á–µ
‚Ä¢ MAX_POSITIONS - –ú–∞–∫—Å. –ø–æ–∑–∏—Ü—ñ–π
    """
    
    bot.reply_to(message, help_msg, parse_mode='Markdown')

# -------------------------
# WEBHOOK –¢–ê –ó–ê–ü–£–°–ö
# -------------------------
@app.route(WEBHOOK_PATH, methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return 'OK', 200
    return 'Bad Request', 400

@app.route('/health', methods=['GET'])
def health_check():
    return {'status': 'healthy', 'timestamp': datetime.now().isoformat()}

def setup_webhook():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞"""
    try:
        bot.remove_webhook()
        time.sleep(1)
        bot.set_webhook(url=WEBHOOK_URL)
        print(f"{datetime.now()} | ‚úÖ –í–µ–±—Ö—É–∫ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ: {WEBHOOK_URL}")
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞: {e}")

if __name__ == "__main__":
    print(f"{datetime.now()} | üöÄ –ó–∞–ø—É—Å–∫ —Ñ'—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–æ–≥–æ –±–æ—Ç–∞...")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –∫–ª—é—á—ñ–≤
    required_keys = [API_KEY_TELEGRAM, CHAT_ID, GATE_API_KEY, GATE_API_SECRET]
    if not all(required_keys):
        print(f"{datetime.now()} | ‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ API –∫–ª—é—á—ñ!")
        exit(1)
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –≤–µ–±—Ö—É–∫
    setup_webhook()
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂
    arbitrage_thread = threading.Thread(target=start_futures_arbitrage, daemon=True)
    arbitrage_thread.start()
    
    print(f"{datetime.now()} | ‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –û—á—ñ–∫—É—é –∫–æ–º–∞–Ω–¥–∏...")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask
    app.run(host="0.0.0.0", port=5000, debug=False, use_reloader=False)