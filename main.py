import requests
import telebot
from flask import Flask, request
from datetime import datetime, timedelta
import threading
import time
import json
import pandas as pd
import numpy as np
import os
import logging
from scipy.signal import argrelextrema

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# -------------------------
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
# -------------------------
API_KEY_TELEGRAM = "8051222216:AAFORHEn1IjWllQyPp8W_1OY3gVxcBNVvZI"
CHAT_ID = "6053907025"
WEBHOOK_HOST = "https://troovy-detective-bot-1-4on4.onrender.com"
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = WEBHOOK_HOST + WEBHOOK_PATH

bot = telebot.TeleBot(API_KEY_TELEGRAM)
app = Flask(__name__)

last_signals = {}
signal_history = []

# -------------------------
# –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
# -------------------------
def get_klines(symbol, interval="1h", limit=200):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ Binance"""
    try:
        url = f"https://api.binance.com/api/v3/klines?symbol={symbol}&interval={interval}&limit={limit}"
        response = requests.get(url, timeout=10)
        data = response.json()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ —Å–ª–æ–≤–Ω–∏–∫ –∑ –æ–∫—Ä–µ–º–∏–º–∏ –º–∞—Å—Å–∏–≤–∞–º–∏
        result = {
            "t": [item[0] for item in data],  # timestamp
            "o": [float(item[1]) for item in data],  # open
            "h": [float(item[2]) for item in data],  # high
            "l": [float(item[3]) for item in data],  # low
            "c": [float(item[4]) for item in data],  # close
            "v": [float(item[5]) for item in data]   # volume
        }
        return result
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è {symbol}: {e}")
        return None

def find_support_resistance(prices, window=20, delta=0.005):
    """–ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è —Ä—ñ–≤–Ω—ñ–≤ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —Ç–∞ –æ–ø–æ—Ä—É"""
    if len(prices) < window * 2:
        return []
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ –º–∞–∫—Å–∏–º—É–º–∏ —Ç–∞ –º—ñ–Ω—ñ–º—É–º–∏
    local_max = argrelextrema(prices, np.greater, order=window)[0]
    local_min = argrelextrema(prices, np.less, order=window)[0]
    
    levels = []
    
    # –î–æ–¥–∞—î–º–æ –º–∞–∫—Å–∏–º—É–º–∏ (–æ–ø—ñ—Ä)
    for i in local_max:
        levels.append(prices[i])
    
    # –î–æ–¥–∞—î–º–æ –º—ñ–Ω—ñ–º—É–º–∏ (–ø—ñ–¥—Ç—Ä–∏–º–∫–∞)
    for i in local_min:
        levels.append(prices[i])
    
    # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ —Ç–∞ –±–ª–∏–∑—å–∫—ñ —Ä—ñ–≤–Ω—ñ
    levels = sorted(levels)
    filtered_levels = []
    
    for level in levels:
        if not filtered_levels:
            filtered_levels.append(level)
        else:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ä—ñ–≤–µ–Ω—å –Ω–µ –Ω–∞–¥—Ç–æ –±–ª–∏–∑—å–∫–∏–π –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ
            if abs(level - filtered_levels[-1]) / filtered_levels[-1] > delta:
                filtered_levels.append(level)
    
    return filtered_levels

def analyze_symbol(symbol):
    """–ê–Ω–∞–ª—ñ–∑ –º–æ–Ω–µ—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ S/R —Ç–∞ pre-top"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è 1h —Ç–∞ 4h —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ–≤
        df_1h = get_klines(symbol, interval="1h", limit=200)
        df_4h = get_klines(symbol, interval="4h", limit=100)
        
        if not df_1h or not df_4h or len(df_1h["c"]) < 50:
            return None
        
        closes_1h = np.array(df_1h["c"], dtype=float)
        closes_4h = np.array(df_4h["c"], dtype=float)
        volumes_1h = np.array(df_1h["v"], dtype=float)
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ä—ñ–≤–Ω—ñ S/R –¥–ª—è –æ–±–æ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ–≤
        sr_levels_1h = find_support_resistance(closes_1h, window=15, delta=0.005)
        sr_levels_4h = find_support_resistance(closes_4h, window=10, delta=0.005)
        
        # –û–±'—î–¥–Ω—É—î–º–æ —Ä—ñ–≤–Ω—ñ –∑ –æ–±–æ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ–≤
        all_sr_levels = sorted(set(sr_levels_1h + sr_levels_4h))
        
        last_price = closes_1h[-1]
        signals = []
        
        # –ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–±–æ—ó–≤ —Ä—ñ–≤–Ω—ñ–≤
        for lvl in all_sr_levels:
            diff = last_price - lvl
            diff_pct = (diff / lvl) * 100
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ–±–æ—é –≤–≤–µ—Ä—Ö (LONG)
            if last_price > lvl * 1.01 and abs(diff_pct) < 50:  # –§—ñ–ª—å—Ç—Ä –≤—ñ–¥ —Å–º—ñ—Ç—Ç—è
                signals.append({
                    "type": "LONG",
                    "level": lvl,
                    "diff": diff,
                    "diff_pct": diff_pct,
                    "timeframe": "1h/4h"
                })
                break
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ–±–æ—é –≤–Ω–∏–∑ (SHORT)
            elif last_price < lvl * 0.99 and abs(diff_pct) < 50:
                signals.append({
                    "type": "SHORT", 
                    "level": lvl,
                    "diff": diff,
                    "diff_pct": diff_pct,
                    "timeframe": "1h/4h"
                })
                break
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ pre-top / pump —Å–∏–≥–Ω–∞–ª—ñ–≤
        impulse_4h = (closes_4h[-1] - closes_4h[-4]) / closes_4h[-4] if len(closes_4h) >= 4 else 0
        impulse_1h = (closes_1h[-1] - closes_1h[-6]) / closes_1h[-6] if len(closes_1h) >= 6 else 0
        
        vol_spike = volumes_1h[-1] > 2.0 * np.mean(volumes_1h[-20:]) if len(volumes_1h) >= 20 else False
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π–±–ª–∏–∂—á–∏–π –æ–ø—ñ—Ä –∑–≤–µ—Ä—Ö—É
        nearest_resistance = min([lvl for lvl in all_sr_levels if lvl > last_price], default=None)
        
        if nearest_resistance and (impulse_4h > 0.08 or impulse_1h > 0.05) and vol_spike:
            diff_to_res = nearest_resistance - last_price
            diff_pct_to_res = (diff_to_res / last_price) * 100
            
            if diff_pct_to_res < 10:  # –ù–µ –Ω–∞–¥—Ç–æ –¥–∞–ª–µ–∫–æ –≤—ñ–¥ –æ–ø–æ—Ä—É
                signals.append({
                    "type": "PRE_TOP",
                    "level": nearest_resistance,
                    "diff": diff_to_res,
                    "diff_pct": diff_pct_to_res,
                    "impulse": max(impulse_4h, impulse_1h),
                    "timeframe": "1h/4h"
                })
        
        return signals if signals else None
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É {symbol}: {e}")
        return None

def send_signal_message(symbol, signal_data):
    """–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—É –≤ Telegram"""
    try:
        current_time = datetime.now()
        
        if symbol in last_signals:
            last_time = last_signals[symbol]
            if (current_time - last_time).total_seconds() < 3600:  # 1 –≥–æ–¥–∏–Ω–∞ –º—ñ–∂ —Å–∏–≥–Ω–∞–ª–∞–º–∏
                return False
        
        last_signals[symbol] = current_time
        
        if signal_data["type"] == "LONG":
            emoji = "üöÄ"
            title = "LONG breakout"
            desc = f"—Ü—ñ–Ω–∞ –ø—Ä–æ–±–∏–ª–∞ –æ–ø—ñ—Ä {signal_data['level']:.4f}"
        elif signal_data["type"] == "SHORT":
            emoji = "‚ö°" 
            title = "SHORT breakout"
            desc = f"—Ü—ñ–Ω–∞ –ø—Ä–æ–±–∏–ª–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫—É {signal_data['level']:.4f}"
        else:  # PRE_TOP
            emoji = "‚ö†Ô∏è"
            title = "Pre-top detected"
            desc = f"–º–æ–∂–ª–∏–≤–∏–π short –±—ñ–ª—è {signal_data['level']:.4f}"
        
        msg = (
            f"{emoji} <b>{symbol}</b>\n"
            f"{title}: {desc}\n"
            f"üìä –†–∏–Ω–∫–æ–≤–∞: {signal_data.get('current_price', 0):.4f} | "
            f"–í—ñ–¥—Ä–∏–≤: {signal_data['diff']:+.4f} ({signal_data['diff_pct']:+.2f}%)\n"
        )
        
        if signal_data["type"] == "PRE_TOP":
            msg += f"üìà –Ü–º–ø—É–ª—å—Å: {signal_data['impulse']*100:.1f}%\n"
        
        msg += f"‚è∞ {current_time.strftime('%H:%M:%S')}"
        
        bot.send_message(CHAT_ID, msg, parse_mode="HTML")
        logger.info(f"–ù–∞–¥—ñ—Å–ª–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol}: {signal_data['type']}")
        return True
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª—É {symbol}: {e}")
        return False

# -------------------------
# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–∏–Ω–∫—É
# -------------------------
def check_market():
    """–ü–æ—Å—Ç—ñ–π–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–∏–Ω–∫—É –Ω–∞ —Å–∏–≥–Ω–∞–ª–∏"""
    logger.info("–ó–∞–ø—É—Å–∫ Smart Auto –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–∏–Ω–∫—É...")
    
    while True:
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–ø –º–æ–Ω–µ—Ç –∑–∞ –æ–±—Å—è–≥–æ–º
            url = "https://api.binance.com/api/v3/ticker/24hr"
            data = requests.get(url, timeout=10).json()
            
            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ USDT –ø–∞—Ä–∏ –∑ —Ö–æ—Ä–æ—à–∏–º –æ–±—Å—è–≥–æ–º
            usdt_pairs = [
                d for d in data 
                if d["symbol"].endswith("USDT") and float(d["quoteVolume"]) > 5_000_000
            ]
            
            # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –∑–º—ñ–Ω–æ—é —Ü—ñ–Ω–∏ (–Ω–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à—ñ)
            sorted_symbols = sorted(
                usdt_pairs,
                key=lambda x: abs(float(x["priceChangePercent"])),
                reverse=True
            )
            
            top_symbols = [s["symbol"] for s in sorted_symbols[:30]]  # –¢–æ–ø 30 –º–æ–Ω–µ—Ç
            logger.info(f"–ê–Ω–∞–ª—ñ–∑—É—î–º–æ {len(top_symbols)} –º–æ–Ω–µ—Ç: {top_symbols[:5]}...")
            
            signals_found = 0
            
            # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∫–æ–∂–Ω—É –º–æ–Ω–µ—Ç—É
            for symbol in top_symbols:
                try:
                    signal_data = analyze_symbol(symbol)
                    
                    if signal_data:
                        # –ë–µ—Ä–µ–º–æ –Ω–∞–π—Å–∏–ª—å–Ω—ñ—à–∏–π —Å–∏–≥–Ω–∞–ª –¥–ª—è —Ü—ñ—î—ó –º–æ–Ω–µ—Ç–∏
                        best_signal = max(signal_data, key=lambda x: abs(x["diff_pct"]))
                        
                        # –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É
                        df = get_klines(symbol, interval="1h", limit=2)
                        if df and len(df["c"]) > 0:
                            best_signal["current_price"] = df["c"][-1]
                        
                        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Å–∏–≥–Ω–∞–ª
                        if send_signal_message(symbol, best_signal):
                            signals_found += 1
                            
                    time.sleep(0.5)  # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
                    
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ {symbol}: {e}")
                    continue
            
            logger.info(f"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–Ω–∞–π–¥–µ–Ω–æ {signals_found} —Å–∏–≥–Ω–∞–ª—ñ–≤. –û—á—ñ–∫—É–≤–∞–Ω–Ω—è 5 —Ö–≤–∏–ª–∏–Ω...")
            time.sleep(300)  # –ß–µ–∫–∞—î–º–æ 5 —Ö–≤–∏–ª–∏–Ω –º—ñ–∂ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º–∏
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–∏–Ω–∫—É: {e}")
            time.sleep(60)  # –ß–µ–∫–∞—î–º–æ —Ö–≤–∏–ª–∏–Ω—É –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ

# -------------------------
# –í–µ–±—Ö—É–∫ —Ç–∞ Flask
# -------------------------
@app.route(WEBHOOK_PATH, methods=["POST"])
def webhook():
    try:
        json_str = request.get_data().decode("utf-8")
        update = telebot.types.Update.de_json(json_str)
        bot.process_new_updates([update])
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ webhook: {e}")
    return "OK", 200

@app.route('/')
def home():
    return "Smart Auto Bot is running!", 200

@app.route('/status')
def status():
    return {
        "status": "active",
        "last_signals_count": len(last_signals),
        "timestamp": datetime.now().isoformat()
    }, 200

def setup_webhook():
    try:
        url = f"https://api.telegram.org/bot{API_KEY_TELEGRAM}/setWebhook"
        response = requests.post(url, data={"url": WEBHOOK_URL}, timeout=10)
        logger.info(f"Webhook setup: {response.json()}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è webhook: {e}")

# -------------------------
# –ö–æ–º–∞–Ω–¥–∏ –¥–ª—è Telegram
# -------------------------
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    help_text = (
        "ü§ñ Smart Auto Breakout Bot\n\n"
        "–¶–µ–π –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —à—É–∫–∞—î:\n"
        "üöÄ Breakout —Å–∏–≥–Ω–∞–ª–∏ (–ø—Ä–æ–±–æ—ó —Ä—ñ–≤–Ω—ñ–≤)\n"
        "‚ö†Ô∏è Pre-top —Å–∏–≥–Ω–∞–ª–∏ (–ø–µ—Ä–µ–¥ –≤–µ—Ä—à–∏–Ω–æ—é)\n\n"
        "–°–∏–≥–Ω–∞–ª–∏ –Ω–∞–¥—Å–∏–ª–∞—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω\n"
        "–ê–Ω–∞–ª—ñ–∑ —Ç–æ–ø-30 –Ω–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à–∏—Ö –º–æ–Ω–µ—Ç"
    )
    bot.send_message(message.chat.id, help_text)

@bot.message_handler(commands=['scan_now'])
def scan_now_handler(message):
    """–†—É—á–Ω–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è"""
    try:
        bot.send_message(message.chat.id, "üîç –ó–∞–ø—É—Å–∫–∞—é —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è...")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–ø –º–æ–Ω–µ—Ç
        url = "https://api.binance.com/api/v3/ticker/24hr"
        data = requests.get(url, timeout=10).json()
        
        usdt_pairs = [
            d for d in data 
            if d["symbol"].endswith("USDT") and float(d["quoteVolume"]) > 5_000_000
        ]
        
        sorted_symbols = sorted(
            usdt_pairs,
            key=lambda x: abs(float(x["priceChangePercent"])),
            reverse=True
        )
        
        top_symbols = [s["symbol"] for s in sorted_symbols[:15]]  # –¢—ñ–ª—å–∫–∏ 15 –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
        
        signals_found = 0
        results = []
        
        for symbol in top_symbols:
            signal_data = analyze_symbol(symbol)
            if signal_data:
                best_signal = max(signal_data, key=lambda x: abs(x["diff_pct"]))
                df = get_klines(symbol, interval="1h", limit=2)
                if df and len(df["c"]) > 0:
                    best_signal["current_price"] = df["c"][-1]
                
                if best_signal["type"] == "LONG":
                    emoji = "üöÄ"
                    desc = f"–ø—Ä–æ–±–∏–≤ –æ–ø—ñ—Ä {best_signal['level']:.4f}"
                elif best_signal["type"] == "SHORT":
                    emoji = "‚ö°"
                    desc = f"–ø—Ä–æ–±–∏–≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É {best_signal['level']:.4f}"
                else:
                    emoji = "‚ö†Ô∏è"
                    desc = f"pre-top –±—ñ–ª—è {best_signal['level']:.4f}"
                
                results.append(
                    f"{emoji} {symbol}: {desc} "
                    f"({best_signal['diff_pct']:+.1f}%)"
                )
                signals_found += 1
        
        if results:
            response = "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è:\n\n" + "\n".join(results)
            bot.send_message(message.chat.id, response)
        else:
            bot.send_message(message.chat.id, "‚ÑπÔ∏è –ñ–æ–¥–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è: {e}")

# -------------------------
# –ó–∞–ø—É—Å–∫
# -------------------------
if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ Smart Auto Bot...")
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ webhook
    setup_webhook()
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Ä–∏–Ω–∫—É –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    market_thread = threading.Thread(target=check_market, daemon=True)
    market_thread.start()
    logger.info("–ü–æ—Ç—ñ–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–∏–Ω–∫—É –∑–∞–ø—É—â–µ–Ω–æ")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask
    try:
        app.run(host="0.0.0.0", port=5000, debug=False, use_reloader=False)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É Flask: {e}")