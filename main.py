import ccxt
import requests
import time
import os
from datetime import datetime
from flask import Flask, request
import telebot
import threading
import json
import math
from typing import List, Tuple, Dict

# -------------------------
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ environment variables
# -------------------------
API_KEY_TELEGRAM = os.getenv("API_KEY_TELEGRAM")
CHAT_ID = os.getenv("CHAT_ID")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = WEBHOOK_HOST + WEBHOOK_PATH

GATE_API_KEY = os.getenv("GATE_API_KEY")
GATE_API_SECRET = os.getenv("GATE_API_SECRET")

BINANCE_API_KEY = os.getenv("BINANCE_API_KEY", "")
BINANCE_API_SECRET = os.getenv("BINANCE_API_SECRET", "")

TRADE_AMOUNT_USD = float(os.getenv("TRADE_AMOUNT_USD", 50))
SPREAD_THRESHOLD = float(os.getenv("SPREAD_THRESHOLD", 0.8))  # –ó–º–µ–Ω—à–∏–ª–∏ –¥–ª—è —á–∞—Å—Ç—ñ—à–∏—Ö –∑–Ω–∞—Ö—ñ–¥–æ–∫
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", 30))  # –ß–∞—Å—Ç—ñ—à—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
LEVERAGE = int(os.getenv("LEVERAGE", 3))

bot = telebot.TeleBot(API_KEY_TELEGRAM)
app = Flask(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±—ñ—Ä–∂
exchanges = {}

try:
    # Gate.io Futures
    exchanges['gate'] = ccxt.gateio({
        "apiKey": GATE_API_KEY,
        "secret": GATE_API_SECRET,
        "options": {"defaultType": "swap"}
    })
    exchanges['gate'].load_markets()
    print(f"{datetime.now()} | ‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Gate.io Futures")
except Exception as e:
    print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Gate.io Futures: {e}")

try:
    # Binance Futures (—è–∫ –¥–∂–µ—Ä–µ–ª–æ —Ü—ñ–Ω)
    exchanges['binance'] = ccxt.binance({
        "options": {"defaultType": "future"}
    })
    exchanges['binance'].load_markets()
    print(f"{datetime.now()} | ‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Binance Futures")
except Exception as e:
    print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Binance Futures: {e}")

active_positions = {}
token_blacklist = set()
last_arbitrage_found = 0

# -------------------------
# –ü–û–ö–†–ê–©–ï–ù–ï –û–¢–†–ò–ú–ê–ù–ù–Ø –¶–Ü–ù
# -------------------------
def get_futures_prices(exchange_name: str, limit: int = 20) -> Dict[str, float]:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω —Ñ'—é—á–µ—Ä—Å—ñ–≤ –∑ –±—ñ—Ä–∂—ñ"""
    prices = {}
    try:
        exchange = exchanges.get(exchange_name)
        if not exchange:
            return prices
            
        markets = exchange.load_markets()
        count = 0
        
        for symbol, market in markets.items():
            if (market.get('swap', False) and market.get('active', False) and 
                symbol.endswith('/USDT:USDT') and count < limit):
                try:
                    ticker = exchange.fetch_ticker(symbol)
                    if ticker['last'] and ticker['last'] > 0:
                        clean_symbol = symbol.replace(':USDT', '').replace('/USDT', '')
                        prices[clean_symbol] = ticker['last']
                        count += 1
                except:
                    continue
                    
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω –∑ {exchange_name}: {e}")
    
    return prices

def get_top_volatile_tokens() -> List[str]:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø –≤–æ–ª–∞—Ç–∏–ª—å–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤"""
    try:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Binance –¥–ª—è –ø–æ—à—É–∫—É –≤–æ–ª–∞—Ç–∏–ª—å–Ω–∏—Ö –ø–∞—Ä
        url = "https://fapi.binance.com/fapi/v1/ticker/24hr"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            tickers = response.json()
            # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –æ–±'—î–º–æ–º —Ç–∞ –∑–º—ñ–Ω–æ—é —Ü—ñ–Ω–∏
            volatile_tokens = []
            for ticker in tickers:
                symbol = ticker['symbol'].replace('USDT', '')
                price_change = float(ticker['priceChangePercent'])
                volume = float(ticker['volume'])
                
                if abs(price_change) > 2.0 and volume > 1000000:  # –§—ñ–ª—å—Ç—Ä –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ
                    volatile_tokens.append(symbol)
                    if len(volatile_tokens) >= 15:
                        break
            
            return volatile_tokens
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤: {e}")
    
    return ['BTC', 'ETH', 'SOL', 'XRP', 'ADA', 'DOT', 'LINK', 'AVAX', 'MATIC', 'DOGE']

# -------------------------
# –§'–Æ–ß–ï–†–°–ù–ê –¢–û–†–ì–û–í–ê –õ–û–ì–Ü–ö–ê
# -------------------------
def calculate_futures_amount(symbol: str, price: float) -> float:
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤"""
    try:
        market = exchanges['gate'].market(symbol + '/USDT:USDT')
        contract_size = float(market['contractSize'])
        amount = (TRADE_AMOUNT_USD * LEVERAGE) / (price * contract_size)
        return round(amount, market['precision']['amount'])
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ {symbol}: {e}")
        return 0

def execute_futures_trade(symbol: str, gate_price: float, binance_price: float, spread: float):
    """–í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó"""
    try:
        futures_symbol = symbol + '/USDT:USDT'
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–ª–µ—á–µ
        exchanges['gate'].set_leverage(LEVERAGE, futures_symbol)
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
        amount = calculate_futures_amount(symbol, gate_price)
        if amount <= 0:
            return
        
        if spread > 0:  # Binance —Ü—ñ–Ω–∞ –≤–∏—â–∞ - –∫—É–ø—É—î–º–æ –Ω–∞ Gate
            order = exchanges['gate'].create_market_buy_order(futures_symbol, amount)
            side = "LONG"
        else:  # Gate —Ü—ñ–Ω–∞ –≤–∏—â–∞ - –ø—Ä–æ–¥–∞—î–º–æ –Ω–∞ Gate
            order = exchanges['gate'].create_market_sell_order(futures_symbol, amount)
            side = "SHORT"
        
        msg = f"üéØ {side} {symbol}\n"
        msg += f"–¶—ñ–Ω–∞ Gate: ${gate_price:.4f}\n"
        msg += f"–¶—ñ–Ω–∞ Binance: ${binance_price:.4f}\n"
        msg += f"Spread: {abs(spread):.2f}%\n"
        msg += f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å: {amount:.4f} –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤\n"
        msg += f"–ü–ª–µ—á–µ: {LEVERAGE}x"
        
        bot.send_message(CHAT_ID, msg)
        print(f"{datetime.now()} | {msg}")
        
        # –î–æ–¥–∞—î–º–æ –≤ –∞–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó
        active_positions[symbol] = {
            'side': side.lower(),
            'entry_price': gate_price,
            'amount': amount,
            'timestamp': datetime.now(),
            'spread': spread
        }
        
        global last_arbitrage_found
        last_arbitrage_found = time.time()
        
    except Exception as e:
        error_msg = f"‚ùå –ü–û–ú–ò–õ–ö–ê —Ç–æ—Ä–≥—ñ–≤–ª—ñ {symbol}: {e}"
        bot.send_message(CHAT_ID, error_msg)
        print(f"{datetime.now()} | {error_msg}")

# -------------------------
# –ü–û–®–£–ö –ê–†–ë–Ü–¢–†–ê–ñ–£ –ú–Ü–ñ –ë–Ü–†–ñ–ê–ú–ò
# -------------------------
def find_arbitrage_opportunities():
    """–ü–æ—à—É–∫ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –º—ñ–∂ –±—ñ—Ä–∂–∞–º–∏"""
    opportunities = []
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ü—ñ–Ω–∏ –∑ –æ–±–æ—Ö –±—ñ—Ä–∂
        gate_prices = get_futures_prices('gate', 30)
        binance_prices = get_futures_prices('binance', 30)
        
        # –®—É–∫–∞—î–º–æ —Å–ø—ñ–ª—å–Ω—ñ —Ç–æ–∫–µ–Ω–∏
        common_symbols = set(gate_prices.keys()) & set(binance_prices.keys())
        
        for symbol in common_symbols:
            if symbol in active_positions or symbol in token_blacklist:
                continue
                
            gate_price = gate_prices[symbol]
            binance_price = binance_prices[symbol]
            
            if gate_price == 0 or binance_price == 0:
                continue
                
            spread = ((binance_price - gate_price) / gate_price) * 100
            
            # –§—ñ–ª—å—Ç—Ä —Å–ø—Ä–µ–¥—É —Ç–∞ –æ–±'—î–º—É
            if abs(spread) >= SPREAD_THRESHOLD:
                opportunities.append((symbol, gate_price, binance_price, spread))
    
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∞—Ä–±—ñ—Ç—Ä–∞–∂—É: {e}")
    
    return opportunities

# -------------------------
# –û–°–ù–û–í–ù–ò–ô –¶–ò–ö–õ –ê–†–ë–Ü–¢–†–ê–ñ–£
# -------------------------
def start_futures_arbitrage():
    """–û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –∞—Ä–±—ñ—Ç—Ä–∞–∂—É"""
    bot.send_message(CHAT_ID, "üöÄ –§'—é—á–µ—Ä—Å–Ω–∏–π –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    
    cycle = 0
    while True:
        cycle += 1
        
        try:
            balance = exchanges['gate'].fetch_balance()['USDT']['total']
            print(f"{datetime.now()} | üîÑ –¶–∏–∫–ª {cycle} | –ë–∞–ª–∞–Ω—Å: ${balance:.2f}")
            
            # –®—É–∫–∞—î–º–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ
            opportunities = find_arbitrage_opportunities()
            
            if opportunities:
                print(f"{datetime.now()} | üìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(opportunities)} –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π")
                
                # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –Ω–∞–π–±—ñ–ª—å—à–∏–º —Å–ø—Ä–µ–¥–æ–º
                opportunities.sort(key=lambda x: abs(x[3]), reverse=True)
                
                # –û–±—Ä–æ–±–ª—è—î–º–æ —Ç–æ–ø 3 –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ
                for symbol, gate_price, binance_price, spread in opportunities[:3]:
                    print(f"{datetime.now()} | üí° {symbol}: Spread {spread:.2f}%")
                    execute_futures_trade(symbol, gate_price, binance_price, spread)
                    time.sleep(1)  # –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ rate limit
            else:
                print(f"{datetime.now()} | üîç –ê—Ä–±—ñ—Ç—Ä–∞–∂–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ")
                
                # –ö–æ–∂–Ω—ñ 10 —Ü–∏–∫–ª—ñ–≤ —à—É–∫–∞—î–º–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ —Ç–æ–∫–µ–Ω–∏
                if cycle % 10 == 0:
                    volatile_tokens = get_top_volatile_tokens()
                    print(f"{datetime.now()} | üå™Ô∏è –í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ —Ç–æ–∫–µ–Ω–∏: {volatile_tokens}")
            
        except Exception as e:
            print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É —Ü–∏–∫–ª—ñ: {e}")
        
        time.sleep(CHECK_INTERVAL)

# -------------------------
# TELEGRAM –ö–û–ú–ê–ù–î–ò
# -------------------------
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "ü§ñ –§'—é—á–µ—Ä—Å–Ω–∏–π –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏–π –±–æ—Ç –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!")

@bot.message_handler(commands=['arbitrage'])
def find_arbitrage_now(message):
    """–ú–∏—Ç—Ç—î–≤–∏–π –ø–æ—à—É–∫ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É"""
    opportunities = find_arbitrage_opportunities()
    
    if opportunities:
        msg = "üéØ –ó–Ω–∞–π–¥–µ–Ω—ñ –∞—Ä–±—ñ—Ç—Ä–∞–∂—ñ:\n\n"
        for symbol, gate_price, binance_price, spread in opportunities[:5]:
            msg += f"‚Ä¢ {symbol}: {spread:.2f}%\n"
            msg += f"  Gate: ${gate_price:.4f} | Binance: ${binance_price:.4f}\n\n"
    else:
        msg = "üîç –ê—Ä–±—ñ—Ç—Ä–∞–∂—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ"
    
    bot.reply_to(message, msg)

@bot.message_handler(commands=['tokens'])
def show_tokens(message):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç–æ–∫–µ–Ω–∏"""
    try:
        gate_prices = get_futures_prices('gate', 10)
        binance_prices = get_futures_prices('binance', 10)
        
        msg = "üìä –î–æ—Å—Ç—É–ø–Ω—ñ —Ç–æ–∫–µ–Ω–∏:\n\n"
        for symbol in list(gate_prices.keys())[:10]:
            gate_price = gate_prices.get(symbol, 0)
            binance_price = binance_prices.get(symbol, 0)
            spread = ((binance_price - gate_price) / gate_price) * 100 if gate_price else 0
            
            msg += f"‚Ä¢ {symbol}: {spread:+.2f}%\n"
        
        bot.reply_to(message, msg)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# -------------------------
# –ó–ê–ü–£–°–ö
# -------------------------
if __name__ == "__main__":
    print(f"{datetime.now()} | üöÄ –ó–∞–ø—É—Å–∫ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–æ–≥–æ –±–æ—Ç–∞...")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    arbitrage_thread = threading.Thread(target=start_futures_arbitrage, daemon=True)
    arbitrage_thread.start()
    
    print(f"{datetime.now()} | ‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –û—á—ñ–∫—É—é –∫–æ–º–∞–Ω–¥–∏...")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ polling –¥–ª—è Telegram
    bot.remove_webhook()
    bot.polling(none_stop=True, timeout=60)