import requests
import telebot
from flask import Flask, request
from datetime import datetime, timedelta
import threading
import time
import json
import pandas as pd
import numpy as np
import os
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# -------------------------
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
# -------------------------
API_KEY_TELEGRAM = "8051222216:AAFORHEn1IjWllQyPp8W_1OY3gVxcBNVvZI"
CHAT_ID = "6053907025"
TIMEFRAMES = ["15m", "1h", "4h"]
N_CANDLES = 50  # –ó–º–µ–Ω—à–µ–Ω–æ –¥–ª—è —à–≤–∏–¥—à–æ—ó –æ–±—Ä–æ–±–∫–∏
FAST_EMA = 12
SLOW_EMA = 26
RSI_PERIOD = 14
MACD_FAST = 12
MACD_SLOW = 26
MACD_SIGNAL = 9

# –î–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
MIN_VOLUME = 2_000_000  # –ó–º–µ–Ω—à–µ–Ω–æ –¥–ª—è –±—ñ–ª—å—à–µ –º–æ–Ω–µ—Ç
MIN_PRICE_CHANGE = 1.5  # –ó–º–µ–Ω—à–µ–Ω–æ
MIN_CONFIDENCE_FOR_SIGNAL = 0.55  # –ó–º–µ–Ω—à–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç—É
MIN_CONFIDENCE_FOR_HISTORY = 0.5

WEBHOOK_HOST = "https://troovy-detective-bot-1-4on4.onrender.com"
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = WEBHOOK_HOST + WEBHOOK_PATH

BINANCE_API_URLS = [
    "https://api.binance.com",
    "https://api1.binance.com"
]

bot = telebot.TeleBot(API_KEY_TELEGRAM)
app = Flask(__name__)

last_signals = {}
last_status = {}
performance_stats = {}
signal_history = []

SIGNALS_HISTORY_FILE = "signals_history.json"
data_cache = {}
CACHE_DURATION = 30

# -------------------------
# –°–ø—Ä–æ—â–µ–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
# -------------------------
def load_signals_history():
    global signal_history
    try:
        if os.path.exists(SIGNALS_HISTORY_FILE):
            with open(SIGNALS_HISTORY_FILE, "r") as f:
                signal_history = json.load(f)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó: {e}")

def save_signals_history():
    try:
        with open(SIGNALS_HISTORY_FILE, "w") as f:
            json.dump(signal_history, f, indent=2)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó: {e}")

def get_top_symbols():
    try:
        url = "https://api.binance.com/api/v3/ticker/24hr"
        data = requests.get(url, timeout=10).json()
        usdt_pairs = [x for x in data if x["symbol"].endswith("USDT")]
        
        filtered_pairs = [
            x for x in usdt_pairs 
            if float(x["quoteVolume"]) >= MIN_VOLUME
        ]
        
        sorted_pairs = sorted(filtered_pairs, key=lambda x: float(x["quoteVolume"]), reverse=True)
        return [x["symbol"] for x in sorted_pairs[:10]]  # –¢—ñ–ª—å–∫–∏ 10 –º–æ–Ω–µ—Ç
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø –º–æ–Ω–µ—Ç: {e}")
        return ["BTCUSDT", "ETHUSDT", "BNBUSDT"]

def get_historical_data(symbol, interval, limit=50):
    cache_key = f"{symbol}_{interval}"
    current_time = time.time()
    
    if cache_key in data_cache:
        data, timestamp = data_cache[cache_key]
        if current_time - timestamp < CACHE_DURATION:
            return data
    
    try:
        url = f"https://api.binance.com/api/v3/klines?symbol={symbol}&interval={interval}&limit={limit}"
        response = requests.get(url, timeout=10)
        data = response.json()
        ohlc = []
        for d in data:
            ohlc.append({
                "time": datetime.fromtimestamp(d[0] / 1000),
                "open": float(d[1]),
                "high": float(d[2]),
                "low": float(d[3]),
                "close": float(d[4]),
                "volume": float(d[5])
            })
        
        data_cache[cache_key] = (ohlc, current_time)
        return ohlc
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è {symbol}: {e}")
        return []

def calculate_ema(prices, period):
    if len(prices) < period:
        return None
    return prices[-1]  # –°–ø—Ä–æ—â–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç—É

def calculate_rsi(prices, period):
    if len(prices) < period + 1:
        return 50  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
    return 50  # –°–ø—Ä–æ—â–µ–Ω–æ

def calculate_indicators(ohlc):
    closes = [c["close"] for c in ohlc]
    return {
        "fast_ema": calculate_ema(closes, FAST_EMA),
        "slow_ema": calculate_ema(closes, SLOW_EMA),
        "rsi": calculate_rsi(closes, RSI_PERIOD),
        "macd_histogram": 0,  # –°–ø—Ä–æ—â–µ–Ω–æ
        "volume_ratio": 1.0
    }

def analyze_phase(ohlc):
    if len(ohlc) < 10:
        return "HOLD", 0, 0.1, {}, False
    
    indicators = calculate_indicators(ohlc)
    current_price = ohlc[-1]["close"]
    prev_price = ohlc[-2]["close"] if len(ohlc) >= 2 else current_price
    
    # –ü—Ä–æ—Å—Ç–∏–π –∞–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—É
    price_change = ((current_price - prev_price) / prev_price) * 100
    
    if price_change > 1.0:
        return "BUY", abs(price_change), 0.6, indicators, True
    elif price_change < -1.0:
        return "SELL", abs(price_change), 0.6, indicators, True
    else:
        return "HOLD", 0, 0.1, indicators, False

def send_signal(symbol, signal, price, volatility, confidence, indicators, timeframe_confirmation):
    global last_signals
    
    if signal == "HOLD":
        return
        
    current_time = datetime.now()
    if symbol in last_signals:
        last_time = last_signals[symbol]["time"]
        if (current_time - last_time).total_seconds() < 3600:
            return
    
    # –ü—Ä–æ—Å—Ç—ñ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ TP/SL
    if signal == "BUY":
        tp = round(price * 1.02, 4)  # +2%
        sl = round(price * 0.98, 4)  # -2%
    else:
        tp = round(price * 0.98, 4)  # -2%
        sl = round(price * 1.02, 4)  # +2%
    
    signal_data = {
        "symbol": symbol,
        "signal": signal,
        "price": price,
        "tp": tp,
        "sl": sl,
        "confidence": confidence,
        "time": current_time
    }
    
    last_signals[symbol] = signal_data
    
    # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    emoji = "üöÄ" if signal == "BUY" else "üîª"
    msg = (
        f"{emoji} *{symbol}* | {signal}\n"
        f"üí∞ –¶—ñ–Ω–∞: `{price}`\n"
        f"üéØ TP: `{tp}`\n"
        f"üõë SL: `{sl}`\n"
        f"üìà –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {confidence*100:.1f}%\n"
        f"‚è∞ {current_time.strftime('%H:%M:%S')}"
    )
    
    try:
        bot.send_message(CHAT_ID, msg, parse_mode="Markdown")
        logger.info(f"–ù–∞–¥—ñ—Å–ª–∞–Ω–æ —Å–∏–≥–Ω–∞–ª: {symbol} {signal}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: {e}")

# -------------------------
# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
# -------------------------
def check_market():
    logger.info("–ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–∏–Ω–∫—É...")
    
    while True:
        try:
            symbols = get_top_symbols()
            logger.info(f"–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ {len(symbols)} –º–æ–Ω–µ—Ç: {symbols}")
            
            for symbol in symbols:
                try:
                    for tf in TIMEFRAMES:
                        ohlc = get_historical_data(symbol, tf, N_CANDLES)
                        if not ohlc:
                            continue
                            
                        signal, volatility, confidence, indicators, is_strong = analyze_phase(ohlc)
                        
                        if signal != "HOLD" and confidence >= MIN_CONFIDENCE_FOR_SIGNAL:
                            send_signal(symbol, signal, ohlc[-1]["close"], volatility, confidence, indicators, 1)
                            break  # –¢—ñ–ª—å–∫–∏ –æ–¥–∏–Ω —Å–∏–≥–Ω–∞–ª –Ω–∞ –º–æ–Ω–µ—Ç—É
                            
                    time.sleep(1)  # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –º–æ–Ω–µ—Ç–∞–º–∏
                    
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ {symbol}: {e}")
                    continue
            
            logger.info(f"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—á—ñ–∫—É–≤–∞–Ω–Ω—è 30 —Å–µ–∫—É–Ω–¥...")
            time.sleep(30)  # –ß–µ–∫–∞—î–º–æ 30 —Å–µ–∫—É–Ω–¥
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            time.sleep(60)  # –ß–µ–∫–∞—î–º–æ —Ö–≤–∏–ª–∏–Ω—É –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ

# -------------------------
# –í–µ–±—Ö—É–∫ —Ç–∞ Flask
# -------------------------
@app.route(WEBHOOK_PATH, methods=["POST"])
def webhook():
    try:
        json_str = request.get_data().decode("utf-8")
        update = telebot.types.Update.de_json(json_str)
        bot.process_new_updates([update])
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ webhook: {e}")
    return "OK", 200

@app.route('/')
def home():
    return "Bot is running!", 200

@app.route('/status')
def status():
    return {
        "last_signals": len(last_signals),
        "status": "active",
        "timestamp": datetime.now().isoformat()
    }, 200

def setup_webhook():
    try:
        url = f"https://api.telegram.org/bot{API_KEY_TELEGRAM}/setWebhook"
        response = requests.post(url, data={"url": WEBHOOK_URL}, timeout=10)
        logger.info(f"Webhook setup: {response.json()}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è webhook: {e}")

# -------------------------
# –ó–∞–ø—É—Å–∫
# -------------------------
if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ
    load_signals_history()
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ webhook
    setup_webhook()
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Ä–∏–Ω–∫—É –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    market_thread = threading.Thread(target=check_market, daemon=True)
    market_thread.start()
    logger.info("–ü–æ—Ç—ñ–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–∏–Ω–∫—É –∑–∞–ø—É—â–µ–Ω–æ")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask
    try:
        app.run(host="0.0.0.0", port=5000, debug=False, use_reloader=False)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É Flask: {e}")