import ccxt
import requests
import time
import os
from datetime import datetime
from flask import Flask, request
import telebot
import threading
import json
from web3 import Web3
import asyncio

# -------------------------
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ environment variables
# -------------------------
API_KEY_TELEGRAM = os.getenv("API_KEY_TELEGRAM")
CHAT_ID = os.getenv("CHAT_ID")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = WEBHOOK_HOST + WEBHOOK_PATH

GATE_API_KEY = os.getenv("GATE_API_KEY")
GATE_API_SECRET = os.getenv("GATE_API_SECRET")

MORALIS_API_KEY = os.getenv("MORALIS_API_KEY")
COINGECKO_API_KEY = os.getenv("COINGECKO_API_KEY", "")

TRADE_AMOUNT_USD = float(os.getenv("TRADE_AMOUNT_USD", 5))
SPREAD_THRESHOLD = float(os.getenv("SPREAD_THRESHOLD", 2.0))
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", 60))  # –ó–±—ñ–ª—å—à–∏–ª–∏ —ñ–Ω—Ç–µ—Ä–≤–∞–ª

bot = telebot.TeleBot(API_KEY_TELEGRAM)
app = Flask(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±—ñ—Ä–∂
gate = ccxt.gateio({
    "apiKey": GATE_API_KEY,
    "secret": GATE_API_SECRET,
    "options": {"defaultType": "swap"}
})

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Web3 –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤
WEB3_PROVIDERS = {
    "eth": Web3(Web3.HTTPProvider("https://mainnet.infura.io/v3/f0a02bb1ea5a4005b13ee19da737bbf8")),
    "bsc": Web3(Web3.HTTPProvider("https://bsc-dataseed.binance.org/")),
    "sol": None
}

active_positions = {}
token_blacklist = set()

# -------------------------
# –ü–û–ö–†–ê–©–ï–ù–ò–ô –û–¢–†–ò–ú–ê–ù–ù–Ø –¢–û–ö–ï–ù–Ü–í
# -------------------------
def get_top_tokens_from_coingecko(limit=50):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø —Ç–æ–∫–µ–Ω—ñ–≤ –∑ CoinGecko"""
    try:
        url = "https://api.coingecko.com/api/v3/coins/markets"
        params = {
            "vs_currency": "usd",
            "order": "volume_desc",
            "per_page": limit,
            "page": 1,
            "sparkline": False
        }
        
        if COINGECKO_API_KEY:
            headers = {"x-cg-demo-api-key": COINGECKO_API_KEY}
        else:
            headers = {}
            
        response = requests.get(url, params=params, headers=headers, timeout=15)
        if response.status_code == 200:
            tokens = []
            for coin in response.json():
                symbol = coin["symbol"].upper() + "/USDT"
                price = coin["current_price"]
                if price and price > 0:
                    tokens.append((symbol, price))
            return tokens
        return []
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå CoinGecko –ø–æ–º–∏–ª–∫–∞: {e}")
        return []

def get_tokens_from_moralis(chain, limit=30):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –∑ Moralis –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é"""
    url = f"https://deep-index.moralis.io/api/v2.2/erc20/metadata?chain={chain}&limit={limit}"
    headers = {"X-API-Key": MORALIS_API_KEY}
    
    try:
        response = requests.get(url, headers=headers, timeout=15)
        if response.status_code == 200:
            tokens = []
            for token in response.json():
                symbol = token.get("symbol", "").upper()
                address = token.get("address", "")
                
                if not symbol or not address or symbol in token_blacklist:
                    continue
                    
                # –û—Ç—Ä–∏–º—É—î–º–æ —Ü—ñ–Ω—É
                price_url = f"https://deep-index.moralis.io/api/v2.2/erc20/{address}/price?chain={chain}"
                price_response = requests.get(price_url, headers=headers, timeout=10)
                
                if price_response.status_code == 200:
                    price_data = price_response.json()
                    usd_price = float(price_data.get("usdPrice", 0))
                    if usd_price > 0.000001:  # –§—ñ–ª—å—Ç—Ä –¥—É–∂–µ –¥–µ—à–µ–≤–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤
                        tokens.append((f"{symbol}/USDT", usd_price))
            
            return tokens
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå Moralis {chain} –ø–æ–º–∏–ª–∫–∞: {e}")
    
    return []

# -------------------------
# –ü–û–ö–†–ê–©–ï–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–Ü –ü–ê–†–ò
# -------------------------
def is_pair_available(symbol):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø–∞—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ Gate.io"""
    try:
        # –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ –ø–∞—Ä
        formats = [
            symbol.replace("/", "_USDT"),
            symbol.replace("/", "/USDT:USDT"),
            symbol.replace("/", "").lower() + "_usdt"
        ]
        
        markets = gate.load_markets()
        for fmt in formats:
            if fmt in markets:
                market = markets[fmt]
                if market['active'] and market['spot']:
                    return True
        return False
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–∞—Ä–∏ {symbol}: {e}")
        return False

# -------------------------
# –ü–û–ö–†–ê–©–ï–ù–ò–ô –ê–†–ë–Ü–¢–†–ê–ñ
# -------------------------
def smart_arbitrage(symbol, dex_price):
    """–†–æ–∑—É–º–Ω–∏–π –∞—Ä–±—ñ—Ç—Ä–∞–∂ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ"""
    if symbol in active_positions or not is_pair_available(symbol):
        return
        
    try:
        gate_symbol = symbol.replace("/", "_USDT")
        ticker = gate.fetch_ticker(gate_symbol)
        gate_price = ticker['last']
        
        if gate_price == 0 or dex_price == 0:
            return
            
        spread = ((dex_price - gate_price) / gate_price) * 100
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ
        if abs(spread) < SPREAD_THRESHOLD:
            return
            
        print(f"{datetime.now()} | üìä {symbol} | Gate: {gate_price:.6f} | DEX: {dex_price:.6f} | Spread: {spread:.2f}%")
        
        # –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó
        if spread >= SPREAD_THRESHOLD:
            open_position(symbol, "buy", gate_price, dex_price)
        elif spread <= -SPREAD_THRESHOLD:
            open_position(symbol, "sell", gate_price, dex_price)
            
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É {symbol}: {e}")
        token_blacklist.add(symbol.split('/')[0])

# -------------------------
# –ü–û–ö–†–ê–©–ï–ù–ï –í–Ü–î–ö–†–ò–¢–¢–Ø –ü–û–ó–ò–¶–Ü–á
# -------------------------
def open_position(symbol, side, gate_price, dex_price):
    """–í—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –±–∞–ª–∞–Ω—Å—É"""
    try:
        balance = gate.fetch_balance()
        usdt_balance = balance['total'].get('USDT', 0)
        
        if usdt_balance < TRADE_AMOUNT_USD:
            print(f"{datetime.now()} | ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ USDT: {usdt_balance:.2f}")
            return
            
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ–±—Å—è–≥—É
        amount = TRADE_AMOUNT_USD / gate_price
        gate_symbol = symbol.replace("/", "_USDT")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞
        order = gate.create_order(
            symbol=gate_symbol,
            type="market",
            side=side,
            amount=amount
        )
        
        active_positions[symbol] = {
            'side': side,
            'amount': amount,
            'entry_price': gate_price,
            'dex_price': dex_price,
            'timestamp': datetime.now()
        }
        
        msg = f"‚úÖ –í–Ü–î–ö–†–ò–¢–û {side.upper()} {amount:.4f} {symbol}\nüíµ –¶—ñ–Ω–∞: {gate_price:.6f}\nüìä Spread: {((dex_price - gate_price)/gate_price*100):.2f}%"
        print(f"{datetime.now()} | {msg}")
        bot.send_message(CHAT_ID, msg)
        
        # –ü–ª–∞–Ω—É—î–º–æ –∑–∞–∫—Ä–∏—Ç—Ç—è
        threading.Timer(300, close_position, args=[symbol]).start()
        
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó {symbol}: {e}")

# -------------------------
# –ü–û–ö–†–ê–©–ï–ù–ï –ó–ê–ö–†–ò–¢–¢–Ø –ü–û–ó–ò–¶–Ü–á
# -------------------------
def close_position(symbol):
    """–ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –ø—Ä–∏–±—É—Ç–∫—É"""
    if symbol not in active_positions:
        return
        
    position = active_positions[symbol]
    
    try:
        gate_symbol = symbol.replace("/", "_USDT")
        ticker = gate.fetch_ticker(gate_symbol)
        current_price = ticker['last']
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ PnL
        if position['side'] == 'buy':
            pnl = (current_price - position['entry_price']) / position['entry_price'] * 100
        else:
            pnl = (position['entry_price'] - current_price) / position['entry_price'] * 100
            
        close_side = "sell" if position['side'] == "buy" else "buy"
        
        order = gate.create_order(
            symbol=gate_symbol,
            type="market",
            side=close_side,
            amount=position['amount'],
            params={"reduceOnly": True}
        )
        
        msg = f"üéØ –ó–ê–ö–†–ò–¢–û {symbol}\nüìà PnL: {pnl:.2f}%\nüíµ –¶—ñ–Ω–∞: {current_price:.6f}"
        print(f"{datetime.now()} | {msg}")
        bot.send_message(CHAT_ID, msg)
        
        del active_positions[symbol]
        
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó {symbol}: {e}")

# -------------------------
# –ù–û–í–Ü –§–£–ù–ö–¶–Ü–á –ú–û–ù–Ü–¢–û–†–ò–ù–ì–£
# -------------------------
def monitor_balances():
    """–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –±–∞–ª–∞–Ω—Å—ñ–≤"""
    while True:
        try:
            balance = gate.fetch_balance()
            total_usdt = balance['total'].get('USDT', 0)
            msg = f"üí∞ –ë–∞–ª–∞–Ω—Å: {total_usdt:.2f} USDT\nüìä –ê–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π: {len(active_positions)}"
            bot.send_message(CHAT_ID, msg)
            time.sleep(3600)  # –ö–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É
        except Exception as e:
            print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –±–∞–ª–∞–Ω—Å—É: {e}")
            time.sleep(300)

def health_check():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–∏—Å—Ç–µ–º–∏"""
    while True:
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—ñ—Ä–∂
            gate.fetch_time()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ API –∫–ª—é—á—ñ–≤
            balance = gate.fetch_balance()
            
            msg = "‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î –Ω–æ—Ä–º–∞–ª—å–Ω–æ\n"
            msg += f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance['total'].get('USDT', 0):.2f} USDT\n"
            msg += f"üìä –ê–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π: {len(active_positions)}"
            
            bot.send_message(CHAT_ID, msg)
            time.sleep(7200)  #–ö–æ–∂–Ω—ñ 2 –≥–æ–¥–∏–Ω–∏
            
        except Exception as e:
            error_msg = f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –∑ —Å–∏—Å—Ç–µ–º–æ—é: {e}"
            print(f"{datetime.now()} | {error_msg}")
            bot.send_message(CHAT_ID, error_msg)
            time.sleep(300)

# -------------------------
# –û–°–ù–û–í–ù–ò–ô –¶–ò–ö–õ –ê–†–ë–Ü–¢–†–ê–ñ–£
# -------------------------
def start_arbitrage():
    """–û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –∞—Ä–±—ñ—Ç—Ä–∞–∂—É"""
    bot.send_message(CHAT_ID, "üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –ü–æ—á–∏–Ω–∞—é –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥...")
    
    # –ó–∞–ø—É—Å–∫ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –º–æ–Ω—ñ—Ç–æ—Ä—ñ–≤
    threading.Thread(target=monitor_balances, daemon=True).start()
    threading.Thread(target=health_check, daemon=True).start()
    
    cycle = 0
    while True:
        cycle += 1
        print(f"{datetime.now()} | üîÑ –¶–∏–∫–ª {cycle}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω–∏ –∑ —Ä—ñ–∑–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
        tokens = []
        
        # –°–ø–æ—Å—ñ–± 1: CoinGecko (–Ω–∞–π–Ω–∞–¥—ñ–π–Ω—ñ—à–∏–π)
        tokens.extend(get_top_tokens_from_coingecko(30))
        
        # –°–ø–æ—Å—ñ–± 2: Moralis –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –º–µ—Ä–µ–∂
        chains = ["eth", "bsc", "polygon"]
        for chain in chains:
            chain_tokens = get_tokens_from_moralis(chain, 20)
            tokens.extend(chain_tokens)
            time.sleep(1)  # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
        
        # –í–∏–¥–∞–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏
        unique_tokens = list(set(tokens))
        
        print(f"{datetime.now()} | üì¶ –ó–Ω–∞–π–¥–µ–Ω–æ {len(unique_tokens)} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤")
        
        if not unique_tokens:
            bot.send_message(CHAT_ID, "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ API –∫–ª—é—á—ñ.")
            time.sleep(300)
            continue
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        for symbol, price in unique_tokens:
            smart_arbitrage(symbol, price)
            time.sleep(0.5)  # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º–∏
        
        time.sleep(CHECK_INTERVAL)

# -------------------------
# TELEGRAM –ö–û–ú–ê–ù–î–ò
# -------------------------
@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç—É"""
    bot.reply_to(message, "ü§ñ –ê—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏–π –±–æ—Ç –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!\n\n"
                         "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
                         "/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏\n"
                         "/balance - –ë–∞–ª–∞–Ω—Å\n"
                         "/positions - –ê–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó\n"
                         "/stop - –ó—É–ø–∏–Ω–∏—Ç–∏ –±–æ—Ç–∞")

@bot.message_handler(commands=['status'])
def send_status(message):
    """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏"""
    try:
        balance = gate.fetch_balance()
        msg = f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î\nüí∞ –ë–∞–ª–∞–Ω—Å: {balance['total'].get('USDT', 0):.2f} USDT\n"
        msg += f"üìä –ê–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π: {len(active_positions)}\n"
        msg += f"‚ö´ –ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫: {len(token_blacklist)} —Ç–æ–∫–µ–Ω—ñ–≤"
        bot.reply_to(message, msg)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

@bot.message_handler(commands=['balance'])
def send_balance(message):
    """–ë–∞–ª–∞–Ω—Å"""
    try:
        balance = gate.fetch_balance()
        usdt = balance['total'].get('USDT', 0)
        bot.reply_to(message, f"üí∞ –ë–∞–ª–∞–Ω—Å: {usdt:.2f} USDT")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

@bot.message_handler(commands=['positions'])
def send_positions(message):
    """–ê–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó"""
    if not active_positions:
        bot.reply_to(message, "üì≠ –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π")
        return
        
    msg = "üìä –ê–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó:\n\n"
    for symbol, pos in active_positions.items():
        msg += f"‚Ä¢ {symbol} {pos['side'].upper()} {pos['amount']:.4f}\n"
    bot.reply_to(message, msg)

# -------------------------
# WEBHOOK –¢–ê –ó–ê–ü–£–°–ö
# -------------------------
@app.route(WEBHOOK_PATH, methods=["POST"])
def webhook():
    json_str = request.get_data().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "!", 200

def setup_webhook():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è webhook"""
    try:
        url = f"https://api.telegram.org/bot{API_KEY_TELEGRAM}/setWebhook"
        response = requests.post(url, data={"url": WEBHOOK_URL})
        print("Webhook setup:", response.json())
    except Exception as e:
        print(f"Webhook setup failed: {e}")

if __name__ == "__main__":
    setup_webhook()
    threading.Thread(target=start_arbitrage, daemon=True).start()
    app.run(host="0.0.0.0", port=5000)