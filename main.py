# main.py
import os
import ccxt
import requests
import time
from datetime import datetime, timedelta
from flask import Flask, request
import telebot
import threading
import sys

# -------------------------
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ env (–±–µ–∑–ø–µ—á–Ω—ñ—à–µ)
# -------------------------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "")   # –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ —É Render env
CHAT_ID = os.getenv("CHAT_ID", "")                 # —Ç–≤—ñ–π chat id (—á–∏—Å–ª–æ)
GATE_API_KEY = os.getenv("GATE_API_KEY", "")
GATE_API_SECRET = os.getenv("GATE_API_SECRET", "")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST", "")       # –Ω–∞–ø—Ä. https://troovy-detective-bot-1-4on4.onrender.com
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = WEBHOOK_HOST + WEBHOOK_PATH if WEBHOOK_HOST else ""

TRADE_AMOUNT_USD = float(os.getenv("TRADE_AMOUNT_USD", "5"))
SPREAD_THRESHOLD = float(os.getenv("SPREAD_THRESHOLD", "2.0"))  # –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", "10"))         # —Å–µ–∫

# –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Ä –∑ –∫–æ–∂–Ω–æ—ó –º–µ—Ä–µ–∂—ñ, –º–æ–∂–Ω–∞ –∑–±—ñ–ª—å—à–∏—Ç–∏
LIMIT_PER_CHAIN = int(os.getenv("LIMIT_PER_CHAIN", "8"))

# -------------------------
# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
# -------------------------
if not TELEGRAM_TOKEN:
    print("ERROR: TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∏–π. –í—Å—Ç–∞–Ω–æ–≤–∏ –π–æ–≥–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è.")
    sys.exit(1)
if not CHAT_ID:
    print("ERROR: CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω–∏–π. –í—Å—Ç–∞–Ω–æ–≤–∏ –π–æ–≥–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è.")
    sys.exit(1)
if not WEBHOOK_HOST:
    print("ERROR: WEBHOOK_HOST –Ω–µ –∑–∞–¥–∞–Ω–∏–π. –í—Å—Ç–∞–Ω–æ–≤–∏ –π–æ–≥–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è.")
    sys.exit(1)
if not GATE_API_KEY or not GATE_API_SECRET:
    print("WARNING: GATE API –∫–ª—é—á—ñ –Ω–µ –∑–∞–¥–∞–Ω—ñ ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —Ç–æ—Ä–≥—ñ–≤–ª—è –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ –¥–æ —ó—Ö –¥–æ–¥–∞–≤–∞–Ω–Ω—è.")

# -------------------------
# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
# -------------------------
bot = telebot.TeleBot(TELEGRAM_TOKEN)
app = Flask(__name__)

gate = ccxt.gateio({
    "apiKey": GATE_API_KEY,
    "secret": GATE_API_SECRET,
    "options": {"defaultType": "swap"}  # futures (USDT-margined)
})

active_positions = {}  # —Å–∏–º–≤–æ–ª -> side
last_noop_notify = datetime.min  # —â–æ–± –Ω–µ —Å–ø–∞–º–∏—Ç–∏ "–Ω–µ–º–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π"
NOOP_NOTIFY_INTERVAL = timedelta(minutes=60)  # —Ä–∞–∑/–≥–æ–¥–∏–Ω—É –º–∞–∫—Å–∏–º—É–º "no opportunities" –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

# -------------------------
# –£—Ç–∏–ª—ñ—Ç–∏ –ª–æ–≥ + Telegram (–±–µ–∑ –ø–∞–¥—ñ–Ω–Ω—è –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ)
# -------------------------
def safe_send(text):
    try:
        bot.send_message(CHAT_ID, text)
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—å –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤ Telegram: {e}")

def log_and_notify(text, tg=True):
    line = f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | {text}"
    print(line)
    if tg:
        safe_send(line)

# -------------------------
# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ Telegram + –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook
# -------------------------
def verify_and_setup_webhook():
    try:
        me = bot.get_me()
        log_and_notify(f"‚úÖ Telegram token –≤–∞–ª—ñ–¥–Ω–∏–π ‚Äî @{me.username} (id {me.id})")
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ Telegram token: {e}")
        print("–ü–µ—Ä–µ–≤—ñ—Ä TELEGRAM_TOKEN (format: 123456:ABC...). –ó—É–ø–∏–Ω—è—é –∑–∞–ø—É—Å–∫ webhook.")
        return False

    # –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ webhook —á–µ—Ä–µ–∑ API (–¥–æ–¥–∞—Ç–∫–æ–≤–æ –ª–æ–≥—É—î–º–æ –ø–æ–≤–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
    try:
        resp = requests.post(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/setWebhook",
                              data={"url": WEBHOOK_URL}, timeout=10)
        try:
            j = resp.json()
        except Exception:
            log_and_notify(f"‚ùå setWebhook: –Ω–µ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å (HTTP {resp.status_code}): {resp.text}")
            return False

        if not j.get("ok", False):
            log_and_notify(f"‚ùå setWebhook failed: {j}")
            # —è–∫—â–æ –ø–æ–º–∏–ª–∫–∞ 401 ‚Äî —è–≤–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –ø—Ä–∏—á–∏–Ω—É
            if j.get("error_code") == 401:
                log_and_notify("‚ùó –ü–æ–º–∏–ª–∫–∞ 401 Unauthorized ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä Telegram token (BotFather).")
            return False

        log_and_notify("‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")
        return True

    except Exception as e:
        log_and_notify(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ setWebhook: {e}")
        return False

# -------------------------
# Dexscreener: –æ—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω–∏ –∑ ETH / BSC / SOL
# -------------------------
def get_top_tokens(limit_per_chain=LIMIT_PER_CHAIN):
    chains = ["ethereum", "bsc", "solana"]
    headers = {"User-Agent": "Mozilla/5.0"}
    tokens = []
    for chain in chains:
        try:
            url = f"https://api.dexscreener.com/latest/dex/pairs/{chain}"
            resp = requests.get(url, headers=headers, timeout=10)
            if resp.status_code != 200:
                log_and_notify(f"‚ö†Ô∏è Dexscreener ({chain}) HTTP {resp.status_code} ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é", tg=False)
                continue
            try:
                data = resp.json()
            except Exception:
                log_and_notify(f"‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Dexscreener ({chain}): {resp.text[:300]}", tg=False)
                continue

            pairs = data.get("pairs", [])[:limit_per_chain]
            for p in pairs:
                base = p.get("baseToken", {})
                price_usd = p.get("priceUsd")
                if base.get("symbol") and price_usd:
                    symbol = base["symbol"].upper() + "/USDT"
                    dex_price = float(price_usd)
                    tokens.append((symbol, dex_price, chain))
            log_and_notify(f"üîç {chain.upper()}: –¥–æ–¥–∞–Ω–æ {len(pairs)} –ø–∞—Ä", tg=False)
        except Exception as e:
            log_and_notify(f"‚ùå –ü–æ–º–∏–ª–∫–∞ Dexscreener ({chain}): {e}", tg=False)
    # —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ ‚Äî –±–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π –≤–∏–ø–∞–¥–æ–∫
    seen = set()
    unique = []
    for sym, price, chain in tokens:
        if sym not in seen:
            seen.add(sym)
            unique.append((sym, price, chain))
    return unique

# -------------------------
# Gate helpers
# -------------------------
def is_pair_available_on_gate(symbol):
    pair = symbol.replace("/", "/USDT:USDT")
    try:
        markets = gate.load_markets()
        return pair in markets
    except Exception as e:
        log_and_notify(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–∏–Ω–∫—ñ–≤ Gate: {e}")
        return False

def open_gate_position(symbol, side):
    pair = symbol.replace("/", "/USDT:USDT")
    if not is_pair_available_on_gate(symbol):
        log_and_notify(f"‚ö†Ô∏è –ü–∞—Ä–∞ {pair} –≤—ñ–¥—Å—É—Ç–Ω—è –Ω–∞ Gate Futures ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é")
        return None, None
    if symbol in active_positions:
        log_and_notify(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü—ñ—è –ø–æ {symbol} –≤–∂–µ –≤—ñ–¥–∫—Ä–∏—Ç–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é")
        return None, None
    try:
        # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É
        bal = gate.fetch_balance()
        usdt_available = bal.get('total', {}).get('USDT', 0)
        if usdt_available < TRADE_AMOUNT_USD:
            log_and_notify(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ USDT ({usdt_available}) ‚Äî –Ω–µ –º–æ–∂—É —Ç–æ—Ä–≥—É–≤–∞—Ç–∏")
            return None, None

        ticker = gate.fetch_ticker(pair)
        gate_price = ticker['last']
        amount = TRADE_AMOUNT_USD / gate_price
        # –æ–∫—Ä—É–≥–ª–∏ –∫–æ—Ä–µ–∫—Ç–Ω–æ –¥–ª—è —Ä–∏–Ω–∫—É (–º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó –∑–∞ precision)
        order = gate.create_order(symbol=pair, type="market", side=side.lower(), amount=amount)
        active_positions[symbol] = side
        log_and_notify(f"‚úÖ –í—ñ–¥–∫—Ä–∏—Ç–æ {side} {amount:.6f} {symbol} –∑–∞ Gate —Ü—ñ–Ω—É {gate_price:.6f}")
        return amount, gate_price
    except Exception as e:
        log_and_notify(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –æ—Ä–¥–µ—Ä—É –Ω–∞ Gate: {e}")
        return None, None

def close_gate_position_with_limit(symbol, side, amount, dex_price):
    pair = symbol.replace("/", "/USDT:USDT")
    if not is_pair_available_on_gate(symbol):
        log_and_notify(f"‚ö†Ô∏è Cannot close ‚Äî pair {pair} not on Gate")
        return
    try:
        close_side = "SELL" if side == "BUY" else "BUY"
        # —Å—Ç–≤–æ—Ä—é—î–º–æ reduce-only limit order –Ω–∞ DEX —Ü—ñ–Ω—É
        order = gate.create_order(symbol=pair, type="limit", side=close_side.lower(),
                                  amount=amount, price=dex_price,
                                  params={"reduceOnly": True})
        log_and_notify(f"üéØ –õ—ñ–º—ñ—Ç–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è {close_side} {amount:.6f} {symbol} –∑–∞ {dex_price:.6f}")
        # –≤–∏–¥–∞–ª—è—î–º–æ –∑—ñ —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π
        active_positions.pop(symbol, None)
    except Exception as e:
        log_and_notify(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–Ω—ñ –ª—ñ–º—ñ—Ç—É –Ω–∞ Gate: {e}")

# -------------------------
# –ê—Ä–±—ñ—Ç—Ä–∞–∂ –ª–æ–≥—ñ–∫–∞ –ø–æ –æ–¥–Ω—ñ–π –ø–∞—Ä—ñ
# -------------------------
def arbitrage_one(symbol, dex_price, chain):
    try:
        pair = symbol.replace("/", "/USDT:USDT")
        if not is_pair_available_on_gate(symbol):
            return False

        gate_ticker = gate.fetch_ticker(pair)
        gate_price = gate_ticker['last']
        spread = (dex_price - gate_price) / gate_price * 100
        # –ª–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å –∫–æ—Ä–æ—Ç–∫–∏–π
        print(f"{datetime.now()} | [{chain.upper()}] {symbol} | DEX {dex_price:.6f} | Gate {gate_price:.6f} | Spread {spread:.2f}%")

        # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ä–æ–≥—É
        if spread >= SPREAD_THRESHOLD:
            amt, _ = open_gate_position(symbol, "BUY")
            if amt:
                close_gate_position_with_limit(symbol, "BUY", amt, dex_price)
                return True
        elif spread <= -SPREAD_THRESHOLD:
            amt, _ = open_gate_position(symbol, "SELL")
            if amt:
                close_gate_position_with_limit(symbol, "SELL", amt, dex_price)
                return True
        return False
    except Exception as e:
        log_and_notify(f"‚ùå –ü–æ–º–∏–ª–∫–∞ arbitrage_one ({symbol}): {e}")
        return False

# -------------------------
# –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª
# -------------------------
def start_arbitrage():
    log_and_notify("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ ‚Äî –ø–æ—á–∏–Ω–∞—é –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥.")
    global last_noop_notify
    loop_count = 0
    while True:
        loop_count += 1
        opportunities = []
        tokens = get_top_tokens(limit_per_chain=LIMIT_PER_CHAIN)
        # –∫–æ—Ä–æ—Ç–∫–µ —Å—É–º–∞—Ä–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ—Ç—Ä–∏–º–∞–Ω—ñ —Ç–æ–∫–µ–Ω–∏ (—â–æ–± –±–∞—á–∏—Ç–∏, —â–æ –ø–æ—à—É–∫ —ñ–¥–µ)
        summary = {}
        for _, _, ch in tokens:
            summary[ch] = summary.get(ch, 0) + 1
        summary_text = ", ".join([f"{k.upper()}: {v}" for k, v in summary.items()]) if summary else "0"
        log_and_notify(f"üîÅ –¶–∏–∫–ª {loop_count}: –æ—Ç—Ä–∏–º–∞–Ω–æ —Ç–æ–∫–µ–Ω—ñ–≤ {len(tokens)} ({summary_text})", tg=False)

        for sym, dex_price, chain in tokens:
            ok = arbitrage_one(sym, dex_price, chain)
            if ok:
                opportunities.append(sym)
            # –∫–æ—Ä–æ—Ç–∫–∞ –ø–∞—É–∑–∞, —â–æ–± –Ω–µ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ API –±—ñ—Ä–∂—ñ
            time.sleep(0.4)

        # –ø—ñ—Å–ª—è –æ–±—Ö–æ–¥—É ‚Äî –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram –ª–∏—à–µ —è–∫—â–æ –±—É–ª–∏ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –∞–±–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–∞ "no-op"
        if opportunities:
            log_and_notify(f"üí• –ó–Ω–∞–π–¥–µ–Ω–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ: {', '.join(opportunities)}")
        else:
            # –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∫–æ—Ä–æ—Ç–∫–µ "no-op" –Ω–µ —á–∞—Å—Ç—ñ—à–µ –Ω—ñ–∂ —Ä–∞–∑ –Ω–∞ –≥–æ–¥–∏–Ω—É
            if datetime.now() - last_noop_notify > NOOP_NOTIFY_INTERVAL:
                safe_send(f"{datetime.now().strftime('%H:%M:%S')} | –ù–µ–º–∞—î –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π —É —Ü—å–æ–º—É —Ü–∏–∫–ª—ñ ({len(tokens)} —Ç–æ–∫–µ–Ω—ñ–≤ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ).")
                last_noop_notify = datetime.now()

        time.sleep(CHECK_INTERVAL)

# -------------------------
# Webhook route + health root
# -------------------------
@app.route(WEBHOOK_PATH, methods=["POST"])
def webhook():
    json_str = request.get_data().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "OK", 200

@app.route("/", methods=["GET"])
def health():
    return "OK", 200

# -------------------------
# –ó–∞–ø—É—Å–∫
# -------------------------
if __name__ == "__main__":
    ok = verify_and_setup_webhook()
    if not ok:
        print("Webhook –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä TELEGRAM_TOKEN. Bot –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ, –∞–ª–µ –±–µ–∑ webhook (–≤–ª–∞—Å–Ω–µ, –±–µ–∑ –∫–æ–º–∞–Ω–¥).")
    # —Å—Ç–∞—Ä—Ç –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–æ–≥–æ –ø–æ—Ç–æ–∫—É
    threading.Thread(target=start_arbitrage, daemon=True).start()
    # Flask
    app.run(host="0.0.0.0", port=5000)