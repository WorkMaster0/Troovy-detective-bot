import ccxt
import requests
import time
from datetime import datetime
from flask import Flask, request
import telebot
import threading

# -------------------------
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
# -------------------------
API_KEY_TELEGRAM = "8051222216:AAFORHEn1IjWllQyPp8W_1OY3gVxcBNVZI"
CHAT_ID = "6053907025"
WEBHOOK_HOST = "https://troovy-detective-bot-1.onrender.com"
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = WEBHOOK_HOST + WEBHOOK_PATH

GATE_API_KEY = "cf99af3f8c0c1a711408f1a1970be8be"
GATE_API_SECRET = "4bd0a51eac2133386e60f4c5e1a78ea9c364e542399bc1865e679f509e93f72e"

TRADE_AMOUNT_USD = 5         # –º–∞–ª–∏–π –æ–±—Å—è–≥
SPREAD_THRESHOLD = 2.0       # –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Å–ø—Ä–µ–¥ %
CHECK_INTERVAL = 10          # —ñ–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏

bot = telebot.TeleBot(API_KEY_TELEGRAM)
app = Flask(__name__)

gate = ccxt.gateio({
    "apiKey": GATE_API_KEY,
    "secret": GATE_API_SECRET,
    "options": {"defaultType": "swap"}  # futures (USDT-margined)
})

active_positions = {}  # –∫–ª—é—á = —Å–∏–º–≤–æ–ª, –∑–Ω–∞—á–µ–Ω–Ω—è = "BUY"/"SELL"

# -------------------------
# –•–µ–ª–ø–µ—Ä: –ª–æ–≥ —ñ —Ç–µ–ª–µ–≥—Ä–∞–º
# -------------------------
def log_and_notify(message):
    print(f"{datetime.now()} | {message}")
    try:
        bot.send_message(CHAT_ID, f"{datetime.now().strftime('%H:%M:%S')} | {message}")
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

# -------------------------
# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø–∞—Ä–∞ —ñ—Å–Ω—É—î –Ω–∞ Gate Futures
# -------------------------
def is_pair_available(symbol):
    pair = symbol.replace("/", "/USDT:USDT")
    try:
        markets = gate.load_markets()
        return pair in markets
    except Exception as e:
        log_and_notify(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–∏–Ω–∫—ñ–≤: {e}")
        return False

# -------------------------
# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –∑ Dexscreener (ETH, BSC, SOL)
# -------------------------
def get_top_tokens(limit=10):
    chains = ["ethereum", "bsc", "solana"]
    tokens = []

    for chain in chains:
        try:
            headers = {"User-Agent": "Mozilla/5.0"}
            url = f"https://api.dexscreener.com/latest/dex/pairs/{chain}"
            resp = requests.get(url, headers=headers, timeout=10)

            if resp.status_code != 200:
                log_and_notify(f"‚ùå Dexscreener {chain} HTTP {resp.status_code}")
                continue

            try:
                data = resp.json()
            except Exception:
                log_and_notify(f"‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Dexscreener ({chain}):\n{resp.text[:200]}")
                continue

            for pair in data.get("pairs", [])[:limit]:
                base = pair.get("baseToken", {})
                if "symbol" in base and "priceUsd" in pair:
                    symbol = base["symbol"].upper() + "/USDT"
                    dex_price = float(pair["priceUsd"])
                    tokens.append((symbol, dex_price))

            log_and_notify(f"üîç {chain.upper()}: –æ—Ç—Ä–∏–º–∞–Ω–æ {len(tokens)} —Ç–æ–∫–µ–Ω—ñ–≤ (–∑–∞–≥–∞–ª–æ–º)")
        except Exception as e:
            log_and_notify(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø —Ç–æ–∫–µ–Ω—ñ–≤ {chain}: {e}")

    return tokens

# -------------------------
# –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ Gate
# -------------------------
def open_gate_position(symbol, side):
    pair = symbol.replace("/", "/USDT:USDT")
    if not is_pair_available(symbol):
        log_and_notify(f"‚ö†Ô∏è –ü–∞—Ä–∞ {pair} –≤—ñ–¥—Å—É—Ç–Ω—è –Ω–∞ Gate Futures, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
        return None, None
    if symbol in active_positions:
        log_and_notify(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü—ñ—è –ø–æ {symbol} –≤–∂–µ –≤—ñ–¥–∫—Ä–∏—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
        return None, None

    try:
        balance = gate.fetch_balance()
        usdt_available = balance['total'].get('USDT', 0)
        if usdt_available < TRADE_AMOUNT_USD:
            log_and_notify(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ USDT –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ ({usdt_available})")
            return None, None

        ticker = gate.fetch_ticker(pair)
        gate_price = ticker['last']
        amount = TRADE_AMOUNT_USD / gate_price

        order = gate.create_order(
            symbol=pair,
            type="market",
            side=side.lower(),
            amount=amount
        )
        active_positions[symbol] = side
        log_and_notify(f"‚úÖ –í—ñ–¥–∫—Ä–∏—Ç–æ {side} {amount:.4f} {symbol}\n–¶—ñ–Ω–∞ Gate: {gate_price:.4f}")
        return amount, gate_price
    except Exception as e:
        log_and_notify(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó: {e}")
        return None, None

# -------------------------
# –õ—ñ–º—ñ—Ç–Ω–∏–π –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –∑–∞ DEX
# -------------------------
def close_gate_position(symbol, side, amount, dex_price):
    pair = symbol.replace("/", "/USDT:USDT")
    if not is_pair_available(symbol):
        log_and_notify(f"‚ö†Ô∏è –ü–∞—Ä–∞ {pair} –≤—ñ–¥—Å—É—Ç–Ω—è –Ω–∞ Gate Futures, –Ω–µ –º–æ–∂–µ–º–æ –∑–∞–∫—Ä–∏—Ç–∏")
        return
    try:
        close_side = "SELL" if side == "BUY" else "BUY"
        order = gate.create_order(
            symbol=pair,
            type="limit",
            side=close_side.lower(),
            amount=amount,
            price=dex_price,
            params={"reduceOnly": True}
        )
        log_and_notify(f"üéØ –õ—ñ–º—ñ—Ç–Ω–∏–π –æ—Ä–¥–µ—Ä {close_side} {amount:.4f} {symbol}\n–¶—ñ–Ω–∞ DEX: {dex_price:.4f}")
        if symbol in active_positions:
            del active_positions[symbol]
    except Exception as e:
        log_and_notify(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó: {e}")

# -------------------------
# –ê—Ä–±—ñ—Ç—Ä–∞–∂ –ø–æ –æ–¥–Ω–æ–º—É —Ç–æ–∫–µ–Ω—ñ
# -------------------------
def arbitrage(symbol, dex_price):
    try:
        pair = symbol.replace("/", "/USDT:USDT")
        if not is_pair_available(symbol):
            return

        gate_ticker = gate.fetch_ticker(pair)
        gate_price = gate_ticker['last']
        spread = (dex_price - gate_price) / gate_price * 100

        log_and_notify(f"{symbol} | DEX: {dex_price:.4f} | Gate: {gate_price:.4f} | Spread: {spread:.2f}%")

        if spread >= SPREAD_THRESHOLD:
            amount, _ = open_gate_position(symbol, "BUY")
            if amount:
                close_gate_position(symbol, "BUY", amount, dex_price)
        elif spread <= -SPREAD_THRESHOLD:
            amount, _ = open_gate_position(symbol, "SELL")
            if amount:
                close_gate_position(symbol, "SELL", amount, dex_price)
    except Exception as e:
        log_and_notify(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É: {e}")

# -------------------------
# –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –∞—Ä–±—ñ—Ç—Ä–∞–∂—É
# -------------------------
def start_arbitrage():
    log_and_notify("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –ü–æ—á–∏–Ω–∞—é –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É...")
    while True:
        tokens = get_top_tokens(limit=10)
        if not tokens:
            log_and_notify("‚ö†Ô∏è –¢–æ–∫–µ–Ω—ñ–≤ –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ, —á–µ–∫–∞—é...")
        for symbol, dex_price in tokens:
            arbitrage(symbol, dex_price)
        time.sleep(CHECK_INTERVAL)

# -------------------------
# Telegram Webhook
# -------------------------
@app.route(WEBHOOK_PATH, methods=["POST"])
def webhook():
    json_str = request.get_data().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "!", 200

def setup_webhook():
    url = f"https://api.telegram.org/bot{API_KEY_TELEGRAM}/setWebhook"
    response = requests.post(url, data={"url": WEBHOOK_URL})
    print("Webhook setup:", response.json())

# -------------------------
# –ó–∞–ø—É—Å–∫
# -------------------------
if __name__ == "__main__":
    setup_webhook()
    threading.Thread(target=start_arbitrage, daemon=True).start()
    app.run(host="0.0.0.0", port=5000)