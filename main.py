import ccxt
import requests
import time
import os
from datetime import datetime
from flask import Flask, request
import telebot
import threading
import json

# -------------------------
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ environment variables
# -------------------------
API_KEY_TELEGRAM = os.getenv("API_KEY_TELEGRAM")
CHAT_ID = os.getenv("CHAT_ID")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = WEBHOOK_HOST + WEBHOOK_PATH

GATE_API_KEY = os.getenv("GATE_API_KEY")
GATE_API_SECRET = os.getenv("GATE_API_SECRET")

MORALIS_API_KEY = os.getenv("MORALIS_API_KEY")
COINGECKO_API_KEY = os.getenv("COINGECKO_API_KEY", "")

TRADE_AMOUNT_USD = float(os.getenv("TRADE_AMOUNT_USD", 5))
SPREAD_THRESHOLD = float(os.getenv("SPREAD_THRESHOLD", 2.0))
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", 300))  # –ó–±—ñ–ª—å—à–∏–ª–∏ –¥–æ 5 —Ö–≤–∏–ª–∏–Ω

bot = telebot.TeleBot(API_KEY_TELEGRAM)
app = Flask(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±—ñ—Ä–∂
try:
    gate = ccxt.gateio({
        "apiKey": GATE_API_KEY,
        "secret": GATE_API_SECRET,
        "options": {"defaultType": "spot"}  # –ó–º—ñ–Ω–∏–ª–∏ –Ω–∞ spot –≤–º–µ—Å—Ç–æ swap
    })
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Gate.io
    gate.load_markets()
    print(f"{datetime.now()} | ‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Gate.io")
except Exception as e:
    print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Gate.io: {e}")
    gate = None

active_positions = {}
token_blacklist = set()
coingecko_last_call = 0

# -------------------------
# –ü–û–ö–†–ê–©–ï–ù–ò–ô –û–¢–†–ò–ú–ê–ù–ù–Ø –¢–û–ö–ï–ù–Ü–í
# -------------------------
def get_top_tokens_from_coingecko(limit=25):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø —Ç–æ–∫–µ–Ω—ñ–≤ –∑ CoinGecko –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º –∑–∞–ø–∏—Ç—ñ–≤"""
    global coingecko_last_call
    
    # –û–±–º–µ–∂–µ–Ω–Ω—è: 1 –∑–∞–ø–∏—Ç –≤ 60 —Å–µ–∫—É–Ω–¥
    current_time = time.time()
    if current_time - coingecko_last_call < 60:
        print(f"{datetime.now()} | ‚è≥ CoinGecko: –∑–∞—á–µ–∫–∞–π—Ç–µ 60 —Å–µ–∫—É–Ω–¥ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏")
        return []
    
    try:
        url = "https://api.coingecko.com/api/v3/coins/markets"
        params = {
            "vs_currency": "usd",
            "order": "market_cap_desc",
            "per_page": limit,
            "page": 1,
            "sparkline": False
        }
        
        headers = {}
        if COINGECKO_API_KEY and COINGECKO_API_KEY != "your_coingecko_api_key":
            headers = {"x-cg-demo-api-key": COINGECKO_API_KEY}
            
        response = requests.get(url, params=params, headers=headers, timeout=15)
        coingecko_last_call = current_time
        
        if response.status_code == 200:
            tokens = []
            for coin in response.json():
                symbol = coin["symbol"].upper()
                price = coin["current_price"]
                if price and price > 0:
                    # –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å–∏–º–≤–æ–ª—É –¥–ª—è Gate.io
                    tokens.append((f"{symbol}_USDT", price))
            print(f"{datetime.now()} | ‚úÖ CoinGecko: –∑–Ω–∞–π–¥–µ–Ω–æ {len(tokens)} —Ç–æ–∫–µ–Ω—ñ–≤")
            return tokens
        else:
            print(f"{datetime.now()} | ‚ùå CoinGecko HTTP {response.status_code}")
            return []
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå CoinGecko –ø–æ–º–∏–ª–∫–∞: {e}")
        return []

def get_tokens_from_moralis_fixed(chain, limit=10):
    """–§—ñ–∫—Å–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å—ñ—è Moralis API"""
    if not MORALIS_API_KEY or MORALIS_API_KEY == "your_moralis_api_key":
        return []
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è —Ç–æ–ø —Ç–æ–∫–µ–Ω—ñ–≤
    try:
        url = f"https://deep-index.moralis.io/api/v2.2/erc20/top?chain={chain}&limit={limit}"
        headers = {"X-API-Key": MORALIS_API_KEY}
        
        response = requests.get(url, headers=headers, timeout=10)
        
        if response.status_code == 200:
            tokens = []
            data = response.json()
            
            for token in data:
                symbol = token.get("symbol", "").upper()
                price = token.get("usdPrice", 0)
                
                if symbol and price > 0:
                    tokens.append((f"{symbol}_USDT", price))
            
            print(f"{datetime.now()} | ‚úÖ Moralis {chain}: –∑–Ω–∞–π–¥–µ–Ω–æ {len(tokens)} —Ç–æ–∫–µ–Ω—ñ–≤")
            return tokens
        else:
            print(f"{datetime.now()} | ‚ùå Moralis {chain} HTTP {response.status_code}: {response.text}")
            return []
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå Moralis {chain} –ø–æ–º–∏–ª–∫–∞: {e}")
        return []

# -------------------------
# –†–ï–ó–ï–†–í–ù–ò–ô –°–ü–ò–°–û–ö –¢–û–ö–ï–ù–Ü–í (–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏)
# -------------------------
def get_backup_tokens():
    """–†–µ–∑–µ—Ä–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏"""
    backup_tokens = [
        ("BTC_USDT", 50000),
        ("ETH_USDT", 3000),
        ("BNB_USDT", 500),
        ("SOL_USDT", 100),
        ("XRP_USDT", 0.5),
        ("ADA_USDT", 0.4),
        ("DOGE_USDT", 0.1),
        ("DOT_USDT", 5),
        ("LINK_USDT", 15),
        ("MATIC_USDT", 0.8),
        ("AVAX_USDT", 20),
        ("ATOM_USDT", 10),
        ("LTC_USDT", 70),
        ("UNI_USDT", 6),
        ("XLM_USDT", 0.12)
    ]
    print(f"{datetime.now()} | ‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫: {len(backup_tokens)} —Ç–æ–∫–µ–Ω—ñ–≤")
    return backup_tokens

# -------------------------
# –ü–û–ö–†–ê–©–ï–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–Ü –ü–ê–†–ò
# -------------------------
def is_pair_available(symbol):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø–∞—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ Gate.io"""
    if not gate:
        return False
        
    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ä–∏–Ω–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑
        markets = gate.load_markets()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ —Å–∏–º–≤–æ–ª
        if symbol in markets:
            market = markets[symbol]
            return market.get('active', False)
        
        return False
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–∞—Ä–∏ {symbol}: {e}")
        return False

# -------------------------
# –ü–û–ö–†–ê–©–ï–ù–ò–ô –ê–†–ë–Ü–¢–†–ê–ñ
# -------------------------
def smart_arbitrage(symbol, dex_price):
    """–†–æ–∑—É–º–Ω–∏–π –∞—Ä–±—ñ—Ç—Ä–∞–∂ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ"""
    if not gate or symbol in active_positions or not is_pair_available(symbol):
        return
        
    try:
        ticker = gate.fetch_ticker(symbol)
        gate_price = ticker['last']
        
        if gate_price == 0 or dex_price == 0:
            return
            
        spread = ((dex_price - gate_price) / gate_price) * 100
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ
        if abs(spread) < SPREAD_THRESHOLD:
            return
            
        print(f"{datetime.now()} | üìä {symbol} | Gate: {gate_price:.6f} | DEX: {dex_price:.6f} | Spread: {spread:.2f}%")
        
        # –õ–æ–≥—É—î–º–æ –∑–Ω–∞–π–¥–µ–Ω–∏–π –∞—Ä–±—ñ—Ç—Ä–∞–∂ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–æ—Ä–≥—ñ–≤–ª—ñ)
        if abs(spread) >= SPREAD_THRESHOLD:
            msg = f"üéØ –ó–Ω–∞–π–¥–µ–Ω–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂ {symbol}\nSpread: {spread:.2f}%"
            print(f"{datetime.now()} | {msg}")
            
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É {symbol}: {e}")

# -------------------------
# –û–°–ù–û–í–ù–ò–ô –¶–ò–ö–õ –ê–†–ë–Ü–¢–†–ê–ñ–£
# -------------------------
def start_arbitrage():
    """–û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –∞—Ä–±—ñ—Ç—Ä–∞–∂—É"""
    bot.send_message(CHAT_ID, "üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –ü–æ—á–∏–Ω–∞—é –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥...")
    
    cycle = 0
    while True:
        cycle += 1
        print(f"{datetime.now()} | üîÑ –¶–∏–∫–ª {cycle}")
        
        tokens = []
        
        # –°–ø–æ—Å—ñ–± 1: CoinGecko (–∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º –∑–∞–ø–∏—Ç—ñ–≤)
        if cycle % 2 == 1:  # –ö–æ–∂–µ–Ω –¥—Ä—É–≥–∏–π —Ü–∏–∫–ª –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ CoinGecko
            tokens.extend(get_top_tokens_from_coingecko(20))
        
        # –°–ø–æ—Å—ñ–± 2: Moralis (—Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å—ñ—è)
        if MORALIS_API_KEY and MORALIS_API_KEY != "your_moralis_api_key":
            chains = ["eth", "bsc"]
            for chain in chains:
                try:
                    chain_tokens = get_tokens_from_moralis_fixed(chain, 8)
                    if chain_tokens:
                        tokens.extend(chain_tokens)
                    time.sleep(1)
                except Exception as e:
                    print(f"{datetime.now()} | ‚ùå Moralis {chain} –ø—Ä–æ–ø—É—â–µ–Ω–æ: {e}")
        
        # –í–∏–¥–∞–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏
        unique_tokens = list(set(tokens))
        
        # –Ø–∫—â–æ —Ç–æ–∫–µ–Ω–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫
        if not unique_tokens:
            print(f"{datetime.now()} | ‚ö†Ô∏è –ñ–æ–¥–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —Ä–µ–∑–µ—Ä–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫")
            unique_tokens = get_backup_tokens()
        
        print(f"{datetime.now()} | üì¶ –ó–Ω–∞–π–¥–µ–Ω–æ {len(unique_tokens)} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        for symbol, price in unique_tokens:
            if gate:
                smart_arbitrage(symbol, price)
            time.sleep(0.5)
        
        time.sleep(CHECK_INTERVAL)

# -------------------------
# TELEGRAM –ö–û–ú–ê–ù–î–ò
# -------------------------
@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç—É"""
    bot.reply_to(message, "ü§ñ –ê—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏–π –±–æ—Ç –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!\n\n"
                         "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
                         "/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏\n"
                         "/balance - –ë–∞–ª–∞–Ω—Å\n"
                         "/check_api - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ API –∫–ª—é—á—ñ–≤\n"
                         "/stop - –ó—É–ø–∏–Ω–∏—Ç–∏ –±–æ—Ç–∞")

@bot.message_handler(commands=['check_api'])
def check_api_command(message):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ API –∫–ª—é—á—ñ–≤"""
    issues = []
    
    if not API_KEY_TELEGRAM or API_KEY_TELEGRAM == "your_telegram_bot_token":
        issues.append("‚ùå Telegram API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
    
    if not CHAT_ID or CHAT_ID == "your_chat_id":
        issues.append("‚ùå Chat ID –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
    
    if not GATE_API_KEY or GATE_API_KEY == "your_gate_api_key":
        issues.append("‚ùå Gate.io API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
    
    if not GATE_API_SECRET or GATE_API_SECRET == "your_gate_api_secret":
        issues.append("‚ùå Gate.io API —Å–µ–∫—Ä–µ—Ç –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
    
    if issues:
        response = "üî¥ –ü—Ä–æ–±–ª–µ–º–∏ –∑ API –∫–ª—é—á–∞–º–∏:\n\n" + "\n".join(issues)
    else:
        response = "‚úÖ –í—Å—ñ API –∫–ª—é—á—ñ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –∫–æ—Ä–µ–∫—Ç–Ω–æ!"
    
    bot.reply_to(message, response)

@bot.message_handler(commands=['status'])
def send_status(message):
    """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏"""
    try:
        if gate:
            balance = gate.fetch_balance()
            usdt_balance = balance['total'].get('USDT', 0)
            msg = f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î\nüí∞ –ë–∞–ª–∞–Ω—Å: {usdt_balance:.2f} USDT\n"
            msg += f"üìä –ê–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π: {len(active_positions)}\n"
            msg += f"‚ö´ –ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫: {len(token_blacklist)} —Ç–æ–∫–µ–Ω—ñ–≤"
        else:
            msg = "‚ùå –ù–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Gate.io"
        bot.reply_to(message, msg)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# -------------------------
# WEBHOOK –¢–ê –ó–ê–ü–£–°–ö
# -------------------------
@app.route(WEBHOOK_PATH, methods=["POST"])
def webhook():
    json_str = request.get_data().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "!", 200

def setup_webhook():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è webhook"""
    try:
        url = f"https://api.telegram.org/bot{API_KEY_TELEGRAM}/setWebhook"
        response = requests.post(url, data={"url": WEBHOOK_URL})
        print("Webhook setup:", response.json())
    except Exception as e:
        print(f"Webhook setup failed: {e}")

if __name__ == "__main__":
    print(f"{datetime.now()} | üöÄ –ó–∞–ø—É—Å–∫ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–æ–≥–æ –±–æ—Ç–∞...")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –∫–ª—é—á—ñ–≤
    required_keys = [API_KEY_TELEGRAM, CHAT_ID, GATE_API_KEY, GATE_API_SECRET]
    if not all(required_keys):
        print(f"{datetime.now()} | ‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ API –∫–ª—é—á—ñ!")
        exit(1)
    
    setup_webhook()
    threading.Thread(target=start_arbitrage, daemon=True).start()
    app.run(host="0.0.0.0", port=5000)