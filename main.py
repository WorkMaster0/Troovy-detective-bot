import requests
from flask import request
import os
import logging
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥—É–ª—ñ–≤
from reality_shift import reality_shift_command
from quantum_arbitrage import quantum_arbitrage_command
from dark_pool import dark_pool_command
from quantum_security import QuantumSecuritySystem
from config import WHITELIST_USERS

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class QuantumTradingBot:
    def __init__(self, token):
        self.token = token
        self.application = Application.builder().token(token).build()
        self.security_system = QuantumSecuritySystem()
        
    def setup_handlers(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("reality_shift", reality_shift_command))
        self.application.add_handler(CommandHandler("quantum_arbitrage", quantum_arbitrage_command))
        self.application.add_handler(CommandHandler("dark_pool", dark_pool_command))
        self.application.add_handler(CommandHandler("status", self.status))

    def verify_kraken_ip(self, client_ip: str) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ –∑–∞–ø–∏—Ç –≤—ñ–¥ Kraken (–¥–ª—è webhook)"""
    kraken_ips = [
        '52.89.214.238',
        '34.212.75.30', 
        '54.218.53.128',
        '52.32.178.7',
        '52.36.174.99'
    ]
    return client_ip in kraken_ips
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç—É"""
        user = update.effective_user
        
        if user.id not in WHITELIST_USERS:
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
            return
            
        await update.message.reply_text(
            "üåå Quantum Trading Bot HRT-9000\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
            "/reality_shift - –ö–≤–∞–Ω—Ç–æ–≤–∏–π –∑—Å—É–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ\n"
            "/quantum_arbitrage - –ö–≤–∞–Ω—Ç–æ–≤–∏–π –∞—Ä–±—ñ—Ç—Ä–∞–∂\n"
            "/dark_pool - –¢–µ–º–Ω–∏–π –ø—É–ª\n"
            "/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏"
        )
    
    async def status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏"""
        status_data = await self.security_system.get_system_status()
        await update.message.reply_text(
            f"üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏:\n"
            f"üîó –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—ñ—Ä–∂: {status_data['exchange_connections']}\n"
            f"‚ö° –®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ–¥–≥—É–∫—É: {status_data['response_time']}ms\n"
            f"üíé –ê–∫—Ç–∏–≤–Ω—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó: {status_data['active_strategies']}\n"
            f"üåê –ö–≤–∞–Ω—Ç–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å: {status_data['quantum_level']}"
        )
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.setup_handlers()
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()
        
        logger.info("ü§ñ Quantum Trading Bot –∑–∞–ø—É—â–µ–Ω–æ!")
        
        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–∏—Ö –∑–∞–¥–∞—á
        asyncio.create_task(self._background_tasks())
        
        # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        await self.application.stop()

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    load_dotenv()
    
    bot_token = os.getenv('BOT_TOKEN')
    if not bot_token:
        logger.error("BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    bot = QuantumTradingBot(bot_token)
    await bot.run()

if __name__ == '__main__':
    asyncio.run(main())