# main.py
import requests
import telebot
from flask import Flask, request
from datetime import datetime
import threading
import time
import logging
from handlers import *

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# -------------------------
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
# -------------------------
API_KEY_TELEGRAM = "8051222216:AAFORHEn1IjWllQyPp8W_1OY3gVxcBNVvZI"
CHAT_ID = "6053907025"
WEBHOOK_HOST = "https://troovy-detective-bot-1-4on4.onrender.com"
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = WEBHOOK_HOST + WEBHOOK_PATH

bot = telebot.TeleBot(API_KEY_TELEGRAM)
app = Flask(__name__)

last_signals = {}

# -------------------------
# –§—É–Ω–∫—Ü—ñ—ó —Å–∏–≥–Ω–∞–ª—ñ–≤
# -------------------------
def send_signal_message(symbol, signal_data):
    """–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—É –≤ Telegram"""
    try:
        current_time = datetime.now()
        
        if symbol in last_signals:
            last_time = last_signals[symbol]
            if (current_time - last_time).total_seconds() < 3600:
                return False
        
        last_signals[symbol] = current_time
        
        if signal_data["type"] == "LONG":
            emoji = "üöÄ"
            title = "LONG breakout"
            desc = f"—Ü—ñ–Ω–∞ –ø—Ä–æ–±–∏–ª–∞ –æ–ø—ñ—Ä {signal_data['level']:.4f}"
        elif signal_data["type"] == "SHORT":
            emoji = "‚ö°" 
            title = "SHORT breakout"
            desc = f"—Ü—ñ–Ω–∞ –ø—Ä–æ–±–∏–ª–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫—É {signal_data['level']:.4f}"
        else:
            emoji = "‚ö†Ô∏è"
            title = "Pre-top detected"
            desc = f"–º–æ–∂–ª–∏–≤–∏–π short –±—ñ–ª—è {signal_data['level']:.4f}"
        
        msg = (
            f"{emoji} <b>{symbol}</b>\n"
            f"{title}: {desc}\n"
            f"üìä –†–∏–Ω–∫–æ–≤–∞: {signal_data.get('current_price', 0):.4f} | "
            f"–í—ñ–¥—Ä–∏–≤: {signal_data['diff']:+.4f} ({signal_data['diff_pct']:+.2f}%)\n"
        )
        
        if signal_data["type"] == "PRE_TOP":
            msg += f"üìà –Ü–º–ø—É–ª—å—Å: {signal_data['impulse']*100:.1f}%\n"
        
        msg += f"‚è∞ {current_time.strftime('%H:%M:%S')}"
        
        bot.send_message(CHAT_ID, msg, parse_mode="HTML")
        logger.info(f"–ù–∞–¥—ñ—Å–ª–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol}: {signal_data['type']}")
        return True
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª—É {symbol}: {e}")
        return False

def analyze_symbol(symbol):
    """–ê–Ω–∞–ª—ñ–∑ –º–æ–Ω–µ—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ S/R —Ç–∞ pre-top"""
    try:
        df_1h = get_klines(symbol, interval="1h", limit=200)
        df_4h = get_klines(symbol, interval="4h", limit=100)
        
        if not df_1h or not df_4h or len(df_1h["c"]) < 50:
            return None
        
        closes_1h = np.array(df_1h["c"], dtype=float)
        closes_4h = np.array(df_4h["c"], dtype=float)
        volumes_1h = np.array(df_1h["v"], dtype=float)
        
        sr_levels_1h = find_support_resistance(closes_1h, window=15, delta=0.005)
        sr_levels_4h = find_support_resistance(closes_4h, window=10, delta=0.005)
        
        all_sr_levels = sorted(set(sr_levels_1h + sr_levels_4h))
        last_price = closes_1h[-1]
        signals = []
        
        for lvl in all_sr_levels:
            diff = last_price - lvl
            diff_pct = (diff / lvl) * 100
            
            if last_price > lvl * 1.01 and abs(diff_pct) < 50:
                signals.append({
                    "type": "LONG",
                    "level": lvl,
                    "diff": diff,
                    "diff_pct": diff_pct,
                    "timeframe": "1h/4h"
                })
                break
            elif last_price < lvl * 0.99 and abs(diff_pct) < 50:
                signals.append({
                    "type": "SHORT", 
                    "level": lvl,
                    "diff": diff,
                    "diff_pct": diff_pct,
                    "timeframe": "1h/4h"
                })
                break
        
        impulse_4h = (closes_4h[-1] - closes_4h[-4]) / closes_4h[-4] if len(closes_4h) >= 4 else 0
        impulse_1h = (closes_1h[-1] - closes_1h[-6]) / closes_1h[-6] if len(closes_1h) >= 6 else 0
        
        vol_spike = volumes_1h[-1] > 2.0 * np.mean(volumes_1h[-20:]) if len(volumes_1h) >= 20 else False
        
        nearest_resistance = min([lvl for lvl in all_sr_levels if lvl > last_price], default=None)
        
        if nearest_resistance and (impulse_4h > 0.08 or impulse_1h > 0.05) and vol_spike:
            diff_to_res = nearest_resistance - last_price
            diff_pct_to_res = (diff_to_res / last_price) * 100
            
            if diff_pct_to_res < 10:
                signals.append({
                    "type": "PRE_TOP",
                    "level": nearest_resistance,
                    "diff": diff_to_res,
                    "diff_pct": diff_pct_to_res,
                    "impulse": max(impulse_4h, impulse_1h),
                    "timeframe": "1h/4h"
                })
        
        return signals if signals else None
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É {symbol}: {e}")
        return None

def check_golden_crosses():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–æ–ª–æ—Ç–∏—Ö —Ö—Ä–µ—Å—Ç—ñ–≤"""
    try:
        crosses = find_golden_crosses()
        
        if not crosses:
            return
        
        # –ì—Ä—É–ø—É—î–º–æ –ø–æ —Ç–∏–ø–∞—Ö
        golden = [c for c in crosses if c["type"] == "GOLDEN"]
        death = [c for c in crosses if c["type"] == "DEATH"]
        
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –ø—Ä–æ —Å–∏–ª—å–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏
        strong_signals = [c for c in crosses if c["crossover_strength"] > 0.5]
        
        for signal in strong_signals:
            emoji = "üü¢" if signal["type"] == "GOLDEN" else "üî¥"
            msg = (
                f"{emoji} <b>{signal['symbol']}</b>\n"
                f"{'–ó–æ–ª–æ—Ç–∏–π' if signal['type'] == 'GOLDEN' else '–°–º–µ—Ä—Ç–µ–ª—å–Ω–∏–π'} —Ö—Ä–µ—Å—Ç\n"
                f"üí∞ –¶—ñ–Ω–∞: {signal['price']:.4f}\n"
                f"üìà EMA20: {signal['ema20']:.4f}\n"
                f"üìâ EMA50: {signal['ema50']:.4f}\n"
                f"‚ö° –°–∏–ª–∞: {signal['crossover_strength']:.2f}%\n"
                f"‚è∞ {datetime.now().strftime('%H:%M:%S')}"
            )
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –Ω–∞–¥—Å–∏–ª–∞–ª–∏ –≤–∂–µ —Å–∏–≥–Ω–∞–ª –¥–ª—è —Ü—ñ—î—ó –º–æ–Ω–µ—Ç–∏
            if signal['symbol'] not in last_signals or \
               (datetime.now() - last_signals[signal['symbol']]).total_seconds() > 3600:
                
                bot.send_message(CHAT_ID, msg, parse_mode="HTML")
                last_signals[signal['symbol']] = datetime.now()
                logger.info(f"–ù–∞–¥—ñ—Å–ª–∞–Ω–æ —Å–∏–≥–Ω–∞–ª —Ö—Ä–µ—Å—Ç–∞: {signal['symbol']} {signal['type']}")
                
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ö—Ä–µ—Å—Ç—ñ–≤: {e}")

# -------------------------
# –ö–æ–º–∞–Ω–¥–∏ Telegram
# -------------------------
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    help_text = (
        "ü§ñ Smart Auto Breakout Bot\n\n"
        "üîπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏:\n"
        "üöÄ Breakout - –ø—Ä–æ–±—ñ–π —Ä—ñ–≤–Ω—ñ–≤\n"
        "‚ö†Ô∏è Pre-top - –ø–µ—Ä–µ–¥ –≤–µ—Ä—à–∏–Ω–æ—é\n\n"
        "üîπ –ö–æ–º–∞–Ω–¥–∏:\n"
        "/scan_now - —Ä—É—á–Ω–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è\n"
        "/pump_candidates - —Ç–æ–ø –ø–∞–º–ø –∫–∞–Ω–¥–∏–¥–∞—Ç–∏\n"
        "/volume_heatmap SYMBOL - TVH –∞–Ω–∞–ª—ñ–∑\n"
        "/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n\n"
        "–°–∏–≥–Ω–∞–ª–∏ –Ω–∞–¥—Å–∏–ª–∞—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω"
    )
    bot.send_message(message.chat.id, help_text)

@bot.message_handler(commands=['pump_candidates'])
def pump_candidates_handler(message):
    """–¢–æ–ø –∫–∞–Ω–¥–∏–¥–∞—Ç–∏ –¥–ª—è –ø–∞–º–ø—É"""
    try:
        bot.send_message(message.chat.id, "üîç –®—É–∫–∞—é –Ω–∞–π–∫—Ä–∞—â—ñ –ø–∞–º–ø –∫–∞–Ω–¥–∏–¥–∞—Ç–∏...")
        
        candidates = get_top_pump_candidates(limit=8)
        
        if not candidates:
            bot.send_message(message.chat.id, "‚ÑπÔ∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ö–æ—Ä–æ—à–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –¥–ª—è –ø–∞–º–ø—É")
            return
        
        response = "üî• <b>–¢–æ–ø –∫–∞–Ω–¥–∏–¥–∞—Ç–∏ –¥–ª—è –ø–∞–º–ø—É:</b>\n\n"
        
        for i, candidate in enumerate(candidates, 1):
            symbol = candidate["symbol"]
            confidence = candidate["confidence"] * 100
            price_change = candidate["price_change_1h"]
            volume_ratio = candidate["volume_ratio"]
            
            response += (
                f"{i}. <b>{symbol}</b>\n"
                f"   üìä –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {confidence:.1f}%\n"
                f"   üìà –ó–º—ñ–Ω–∞ (1h): {price_change:+.2f}%\n"
                f"   üîä –û–±'—î–º: x{volume_ratio:.1f}\n"
            )
            
            if candidate["breakout_level"]:
                response += f"   üöÄ –ü—Ä–æ–±–∏–≤ —Ä—ñ–≤–µ–Ω—å: {candidate['breakout_level']:.4f}\n"
            
            response += "\n"
        
        bot.send_message(message.chat.id, response, parse_mode="HTML")
        
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

@bot.message_handler(commands=['volume_heatmap'])
def volume_heatmap_handler(message):
    """TVH –∞–Ω–∞–ª—ñ–∑ –¥–ª—è –º–æ–Ω–µ—Ç–∏"""
    try:
        args = message.text.split()
        if len(args) < 2:
            bot.send_message(message.chat.id, "‚ÑπÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /volume_heatmap SYMBOL")
            return
        
        symbol = args[1].upper()
        if not symbol.endswith('USDT'):
            symbol += 'USDT'
        
        bot.send_message(message.chat.id, f"üìä –ê–Ω–∞–ª—ñ–∑—É—é TVH –¥–ª—è {symbol}...")
        
        analysis = analyze_volume_heatmap(symbol)
        
        if not analysis:
            bot.send_message(message.chat.id, f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ {symbol}")
            return
        
        response = (
            f"üìà <b>Volume Heatmap –¥–ª—è {symbol}</b>\n\n"
            f"üí∞ –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: {analysis['current_price']:.4f}\n"
            f"üìä –ó–º—ñ–Ω–∞ (24h): {analysis['price_change_24h']:+.2f}%\n"
            f"üîä –û–±'—î–º: x{analysis['volume_ratio']:.1f} –≤—ñ–¥ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ\n"
            f"   ‚Ä¢ –ü–æ—Ç–æ—á–Ω–∏–π: {analysis['current_volume']:.0f}\n"
            f"   ‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π: {analysis['avg_volume_20']:.0f}\n\n"
            f"üî• <b>–ù–∞–π–≤–∏—â—ñ Volume Nodes:</b>\n"
        )
        
        for price, volume in analysis['high_volume_nodes']:
            response += f"   ‚Ä¢ {price:.4f}: {volume:.0f}\n"
        
        bot.send_message(message.chat.id, response, parse_mode="HTML")
        
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

@bot.message_handler(commands=['scan_now'])
def scan_now_handler(message):
    """–†—É—á–Ω–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è"""
    try:
        bot.send_message(message.chat.id, "üîç –ó–∞–ø—É—Å–∫–∞—é —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è...")
        
        url = "https://api.binance.com/api/v3/ticker/24hr"
        data = requests.get(url, timeout=10).json()
        
        usdt_pairs = [
            d for d in data 
            if d["symbol"].endswith("USDT") and float(d["quoteVolume"]) > 5_000_000
        ]
        
        sorted_symbols = sorted(
            usdt_pairs,
            key=lambda x: abs(float(x["priceChangePercent"])),
            reverse=True
        )
        
        top_symbols = [s["symbol"] for s in sorted_symbols[:15]]
        signals_found = 0
        results = []
        
        for symbol in top_symbols:
            signal_data = analyze_symbol(symbol)
            if signal_data:
                best_signal = max(signal_data, key=lambda x: abs(x["diff_pct"]))
                df = get_klines(symbol, interval="1h", limit=2)
                if df and len(df["c"]) > 0:
                    best_signal["current_price"] = df["c"][-1]
                
                if best_signal["type"] == "LONG":
                    emoji = "üöÄ"
                    desc = f"–ø—Ä–æ–±–∏–≤ –æ–ø—ñ—Ä {best_signal['level']:.4f}"
                elif best_signal["type"] == "SHORT":
                    emoji = "‚ö°"
                    desc = f"–ø—Ä–æ–±–∏–≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É {best_signal['level']:.4f}"
                else:
                    emoji = "‚ö†Ô∏è"
                    desc = f"pre-top –±—ñ–ª—è {best_signal['level']:.4f}"
                
                results.append(
                    f"{emoji} {symbol}: {desc} "
                    f"({best_signal['diff_pct']:+.1f}%)"
                )
                signals_found += 1
        
        if results:
            response = "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è:\n\n" + "\n".join(results)
            bot.send_message(message.chat.id, response)
        else:
            bot.send_message(message.chat.id, "‚ÑπÔ∏è –ñ–æ–¥–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è: {e}")

@bot.message_handler(commands=['status'])
def status_handler(message):
    """–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    status_text = (
        "ü§ñ <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b>\n\n"
        f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π\n"
        f"‚è∞ –û—Å—Ç–∞–Ω–Ω—ñ–π —Å–∏–≥–Ω–∞–ª: {len(last_signals)} –º–æ–Ω–µ—Ç\n"
        f"üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω\n"
        f"üìä –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥: —Ç–æ–ø-30 –∞–∫—Ç–∏–≤–Ω–∏—Ö –º–æ–Ω–µ—Ç\n\n"
        f"‚ö° <b>–£–Ω—ñ–∫–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:</b>\n"
        f"‚Ä¢ Breakout —Å–∏–≥–Ω–∞–ª–∏\n"
        f"‚Ä¢ Pre-top –¥–µ—Ç–µ–∫—Ü—ñ—è\n"
        f"‚Ä¢ Volume Heatmap (TVH)\n"
        f"‚Ä¢ –ü–∞–º–ø –∫–∞–Ω–¥–∏–¥–∞—Ç–∏\n"
        f"‚Ä¢ Multi-timeframe –∞–Ω–∞–ª—ñ–∑"
    )
    bot.send_message(message.chat.id, status_text, parse_mode="HTML")

# ==================== –ù–û–í–Ü –ö–û–ú–ê–ù–î–ò ====================
@bot.message_handler(commands=['whale_activity'])
def whale_activity_handler(message):
    """–î–µ—Ç–µ–∫—Ü—ñ—è –∫–∏—Ç—ñ–≤—Å—å–∫–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
    try:
        bot.send_message(message.chat.id, "üêã –®—É–∫–∞—é –∫–∏—Ç—ñ–≤—Å—å–∫—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å...")
        
        url = "https://api.binance.com/api/v3/ticker/24hr"
        data = requests.get(url, timeout=10).json()
        
        usdt_pairs = [
            d for d in data 
            if d["symbol"].endswith("USDT") and float(d["quoteVolume"]) > 8_000_000
        ]
        
        top_symbols = [s["symbol"] for s in sorted(usdt_pairs, 
                     key=lambda x: float(x["priceChangePercent"]), 
                     reverse=True)[:15]]
        
        whale_signals = []
        for symbol in top_symbols:
            activity = detect_whale_activity(symbol)
            if activity and activity["whale_detected"]:
                whale_signals.append(activity)
            time.sleep(0.3)
        
        if not whale_signals:
            bot.send_message(message.chat.id, "‚ÑπÔ∏è –ö–∏—Ç—ñ–≤—Å—å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –Ω–µ –≤–∏—è–≤–ª–µ–Ω–∞")
            return
        
        response = "üêã <b>–ö–∏—Ç—ñ–≤—Å—å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤–∏—è–≤–ª–µ–Ω–∞:</b>\n\n"
        for i, signal in enumerate(whale_signals[:5], 1):
            response += (
                f"{i}. <b>{signal['symbol']}</b>\n"
                f"   üí∞ –¶—ñ–Ω–∞: {signal['price']:.4f}\n"
                f"   üîä –û–±'—î–º: x{signal['volume_ratio']:.1f}\n"
                f"   üìä Z-score: {signal['z_score']:.2f}\n\n"
            )
        
        bot.send_message(message.chat.id, response, parse_mode="HTML")
        
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

@bot.message_handler(commands=['liquidity_zones'])
def liquidity_zones_handler(message):
    """–ê–Ω–∞–ª—ñ–∑ –ª—ñ–∫–≤—ñ–¥–Ω–∏—Ö –∑–æ–Ω"""
    try:
        args = message.text.split()
        if len(args) < 2:
            bot.send_message(message.chat.id, "‚ÑπÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /liquidity_zones SYMBOL")
            return
        
        symbol = args[1].upper()
        if not symbol.endswith('USDT'):
            symbol += 'USDT'
        
        bot.send_message(message.chat.id, f"üíß –ê–Ω–∞–ª—ñ–∑—É—é –ª—ñ–∫–≤—ñ–¥–Ω—ñ –∑–æ–Ω–∏ –¥–ª—è {symbol}...")
        
        analysis = calculate_liquidity_zones(symbol)
        
        if not analysis:
            bot.send_message(message.chat.id, f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ {symbol}")
            return
        
        response = (
            f"üíß <b>–õ—ñ–∫–≤—ñ–¥–Ω—ñ –∑–æ–Ω–∏ –¥–ª—è {symbol}</b>\n"
            f"üí∞ –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: {analysis['current_price']:.4f}\n\n"
            f"üî• <b>–¢–æ–ø –ª—ñ–∫–≤—ñ–¥–Ω—ñ –∑–æ–Ω–∏:</b>\n"
        )
        
        for i, zone in enumerate(analysis['liquidity_zones'][:3], 1):
            response += (
                f"{i}. –ó–æ–Ω–∞: {zone['center']:.4f}\n"
                f"   üìä –û–±'—î–º: {zone['total_volume']:.0f}\n"
                f"   üìà –î—ñ–∞–ø–∞–∑–æ–Ω: {zone['min_price']:.4f} - {zone['max_price']:.4f}\n"
                f"   üéØ –©—ñ–ª—å–Ω—ñ—Å—Ç—å: {zone['density']} —Å–≤—ñ—á–æ–∫\n\n"
            )
        
        bot.send_message(message.chat.id, response, parse_mode="HTML")
        
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

@bot.message_handler(commands=['volatility_prediction'])
def volatility_prediction_handler(message):
    """–ü—Ä–µ–¥–∏–∫—Ü—ñ—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ"""
    try:
        bot.send_message(message.chat.id, "üìä –ê–Ω–∞–ª—ñ–∑—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å...")
        
        url = "https://api.binance.com/api/v3/ticker/24hr"
        data = requests.get(url, timeout=10).json()
        
        usdt_pairs = [
            d for d in data 
            if d["symbol"].endswith("USDT") and float(d["quoteVolume"]) > 5_000_000
        ]
        
        top_symbols = [s["symbol"] for s in sorted(usdt_pairs,
                     key=lambda x: abs(float(x["priceChangePercent"])),
                     reverse=True)[:10]]
        
        volatility_signals = []
        for symbol in top_symbols:
            prediction = predict_volatility_spikes(symbol)
            if prediction and prediction["volatility_spike_predicted"]:
                volatility_signals.append(prediction)
            time.sleep(0.3)
        
        if not volatility_signals:
            bot.send_message(message.chat.id, "‚ÑπÔ∏è –°–ø–ª–µ—Å–∫–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ –Ω–µ –ø—Ä–æ–≥–Ω–æ–∑—É—é—Ç—å—Å—è")
            return
        
        response = "‚ö° <b>–ü—Ä–æ–≥–Ω–æ–∑ —Å–ø–ª–µ—Å–∫—ñ–≤ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ:</b>\n\n"
        for i, signal in enumerate(volatility_signals[:5], 1):
            response += (
                f"{i}. <b>{signal['symbol']}</b>\n"
                f"   üí∞ –¶—ñ–Ω–∞: {signal['price']:.4f}\n"
                f"   üìä –í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å: {signal['current_volatility']*100:.2f}%\n"
                f"   üìà –í—ñ–¥–Ω–æ—à–µ–Ω–Ω—è: x{signal['volatility_ratio']:.2f}\n\n"
            )
        
        bot.send_message(message.chat.id, response, parse_mode="HTML")
        
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

@bot.message_handler(commands=['market_manipulation'])
def market_manipulation_handler(message):
    """–î–µ—Ç–µ–∫—Ü—ñ—è –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ–π —Ä–∏–Ω–∫–æ–º"""
    try:
        bot.send_message(message.chat.id, "üîç –®—É–∫–∞—é –æ–∑–Ω–∞–∫–∏ –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ–π...")
        
        url = "https://api.binance.com/api/v3/ticker/24hr"
        data = requests.get(url, timeout=10).json()
        
        usdt_pairs = [
            d for d in data 
            if d["symbol"].endswith("USDT") and float(d["quoteVolume"]) > 3_000_000 and
            abs(float(d["priceChangePercent"])) > 8.0
        ]
        
        top_symbols = [s["symbol"] for s in usdt_pairs[:8]]
        
        manipulation_signals = []
        for symbol in top_symbols:
            analysis = detect_market_manipulation(symbol)
            if analysis and analysis["manipulation_detected"]:
                manipulation_signals.append(analysis)
            time.sleep(0.3)
        
        if not manipulation_signals:
            bot.send_message(message.chat.id, "‚úÖ –û–∑–Ω–∞–∫ –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ–π –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ")
            return
        
        response = "‚ö†Ô∏è <b>–í–∏—è–≤–ª–µ–Ω–æ –º–æ–∂–ª–∏–≤—ñ –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—ó:</b>\n\n"
        for i, signal in enumerate(manipulation_signals, 1):
            response += (
                f"{i}. <b>{signal['symbol']}</b>\n"
                f"   üéØ Score: {signal['manipulation_score']}/4\n"
                f"   üìä –ö–æ—Ä–µ–ª—è—Ü—ñ—è: {signal['correlation']:.2f}\n"
                f"   üìà Body ratio: {signal['avg_body_ratio']:.2f}\n\n"
            )
        
        response += "üîí <i>–ë—É–¥—å—Ç–µ –æ–±–µ—Ä–µ–∂–Ω—ñ –∑ —Ü–∏–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏</i>"
        bot.send_message(message.chat.id, response, parse_mode="HTML")
        
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

@bot.message_handler(commands=['golden_crosses'])
def golden_crosses_handler(message):
    """–ü–æ—à—É–∫ –∑–æ–ª–æ—Ç–∏—Ö/—Å–º–µ—Ä—Ç–µ–ª—å–Ω–∏—Ö —Ö—Ä–µ—Å—Ç—ñ–≤"""
    try:
        bot.send_message(message.chat.id, "üìà –®—É–∫–∞—é —Ö—Ä–µ—Å—Ç–∏...")
        
        crosses = find_golden_crosses()
        
        if not crosses:
            bot.send_message(message.chat.id, "‚ÑπÔ∏è –•—Ä–µ—Å—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
        
        response = "üìä <b>–ó–Ω–∞–π–¥–µ–Ω—ñ —Ö—Ä–µ—Å—Ç–∏:</b>\n\n"
        
        golden_crosses = [c for c in crosses if c["type"] == "GOLDEN"]
        death_crosses = [c for c in crosses if c["type"] == "DEATH"]
        
        if golden_crosses:
            response += "üü¢ <b>–ó–æ–ª–æ—Ç—ñ —Ö—Ä–µ—Å—Ç–∏:</b>\n"
            for cross in golden_crosses[:3]:
                response += (
                    f"‚Ä¢ {cross['symbol']} - {cross['crossover_strength']:.2f}%\n"
                    f"  EMA20: {cross['ema20']:.4f}, EMA50: {cross['ema50']:.4f}\n"
                )
            response += "\n"
        
        if death_crosses:
            response += "üî¥ <b>–°–º–µ—Ä—Ç–µ–ª—å–Ω—ñ —Ö—Ä–µ—Å—Ç–∏:</b>\n"
            for cross in death_crosses[:3]:
                response += (
                    f"‚Ä¢ {cross['symbol']} - {cross['crossover_strength']:.2f}%\n"
                    f"  EMA20: {cross['ema20']:.4f}, EMA50: {cross['ema50']:.4f}\n"
                )
        
        bot.send_message(message.chat.id, response, parse_mode="HTML")
        
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

@bot.message_handler(commands=['smart_money'])
def smart_money_handler(message):
    """–Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ Smart Money"""
    try:
        args = message.text.split()
        if len(args) < 2:
            bot.send_message(message.chat.id, "‚ÑπÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /smart_money SYMBOL")
            return
        
        symbol = args[1].upper()
        if not symbol.endswith('USDT'):
            symbol += 'USDT'
        
        bot.send_message(message.chat.id, f"üß† –ê–Ω–∞–ª—ñ–∑—É—é Smart Money –¥–ª—è {symbol}...")
        
        analysis = get_smart_money_indicators(symbol)
        
        if not analysis:
            bot.send_message(message.chat.id, f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ {symbol}")
            return
        
        # –ï–º–æ–¥–∑—ñ –¥–ª—è –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü—ñ—ó
        divergence_emoji = {
            "BULLISH": "üü¢",
            "BEARISH": "üî¥", 
            "HIDDEN_BULLISH": "üü°",
            "HIDDEN_BEARISH": "üü†",
            "NEUTRAL": "‚ö™"
        }
        
        response = (
            f"üß† <b>Smart Money –∞–Ω–∞–ª—ñ–∑ –¥–ª—è {symbol}</b>\n\n"
            f"üí∞ –¶—ñ–Ω–∞: {analysis['current_price']:.4f}\n"
            f"üìä Volume Delta: {analysis['volume_delta']:+.3f}\n"
            f"üìà Buy Pressure: {analysis['buy_pressure']*100:.1f}%\n"
            f"üéØ –î–∏–≤–µ—Ä–≥–µ–Ω—Ü—ñ—è: {divergence_emoji.get(analysis['divergence'], '‚ö™')} {analysis['divergence']}\n"
            f"üìâ –ó–º—ñ–Ω–∞ —Ü—ñ–Ω–∏: {analysis['price_change']:+.2f}%\n"
            f"üìä –ó–º—ñ–Ω–∞ –æ–±'—î–º—É: {analysis['volume_change']:+.2f}%\n\n"
        )
        
        # –Ü–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—è
        if analysis['volume_delta'] > 0.1:
            response += "üü¢ –°–∏–ª—å–Ω–∏–π –ø–æ–∫—É–ø–Ω–∏–π —Ç–∏—Å–∫\n"
        elif analysis['volume_delta'] < -0.1:
            response += "üî¥ –°–∏–ª—å–Ω–∏–π –ø—Ä–æ–¥–∞–∂–Ω–∏–π —Ç–∏—Å–∫\n"
        else:
            response += "‚ö™ –ë–∞–ª–∞–Ω—Å —Å–∏–ª\n"
        
        bot.send_message(message.chat.id, response, parse_mode="HTML")
        
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# -------------------------
# –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞
# -------------------------
def check_market():
    """–ü–æ—Å—Ç—ñ–π–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–∏–Ω–∫—É"""
    logger.info("–ó–∞–ø—É—Å–∫ Smart Auto –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–∏–Ω–∫—É...")
    
    # –õ—ñ—á–∏–ª—å–Ω–∏–∫ —ñ—Ç–µ—Ä–∞—Ü—ñ–π –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫
    iteration_count = 0
    
    while True:
        try:
            iteration_count += 1
            
            # –ö–æ–∂–Ω—ñ 3 —ñ—Ç–µ—Ä–∞—Ü—ñ—ó (15 —Ö–≤–∏–ª–∏–Ω) –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–æ–ª–æ—Ç—ñ —Ö—Ä–µ—Å—Ç–∏
            if iteration_count % 3 == 0:
                logger.info("–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–æ–ª–æ—Ç—ñ —Ö—Ä–µ—Å—Ç–∏...")
                check_golden_crosses()
            
            # –ö–æ–∂–Ω—ñ 6 —ñ—Ç–µ—Ä–∞—Ü—ñ–π (30 —Ö–≤–∏–ª–∏–Ω) –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–∏—Ç—ñ–≤—Å—å–∫—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
            if iteration_count % 6 == 0:
                logger.info("–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–∏—Ç—ñ–≤—Å—å–∫—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å...")
                check_whale_activity_auto()
            
            # –ö–æ–∂–Ω—ñ 12 —ñ—Ç–µ—Ä–∞—Ü—ñ–π (60 —Ö–≤–∏–ª–∏–Ω) –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—ó
            if iteration_count % 12 == 0:
                logger.info("–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º–æ–∂–ª–∏–≤—ñ –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—ó...")
                check_market_manipulation_auto()
            
            # –û—Å–Ω–æ–≤–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–∏–Ω–∫—É (–∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω)
            url = "https://api.binance.com/api/v3/ticker/24hr"
            data = requests.get(url, timeout=10).json()
            
            usdt_pairs = [
                d for d in data 
                if d["symbol"].endswith("USDT") and float(d["quoteVolume"]) > 5_000_000
            ]
            
            sorted_symbols = sorted(
                usdt_pairs,
                key=lambda x: abs(float(x["priceChangePercent"])),
                reverse=True
            )
            
            top_symbols = [s["symbol"] for s in sorted_symbols[:30]]
            logger.info(f"–ê–Ω–∞–ª—ñ–∑—É—î–º–æ {len(top_symbols)} –º–æ–Ω–µ—Ç: {top_symbols[:5]}...")
            
            signals_found = 0
            
            for symbol in top_symbols:
                try:
                    signal_data = analyze_symbol(symbol)
                    
                    if signal_data:
                        best_signal = max(signal_data, key=lambda x: abs(x["diff_pct"]))
                        
                        df = get_klines(symbol, interval="1h", limit=2)
                        if df and len(df["c"]) > 0:
                            best_signal["current_price"] = df["c"][-1]
                        
                        if send_signal_message(symbol, best_signal):
                            signals_found += 1
                            
                    time.sleep(0.5)  # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –º–æ–Ω–µ—Ç–∞–º–∏
                    
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ {symbol}: {e}")
                    continue
            
            logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {signals_found} —Å–∏–≥–Ω–∞–ª—ñ–≤. –û—á—ñ–∫—É–≤–∞–Ω–Ω—è 5 —Ö–≤–∏–ª–∏–Ω...")
            time.sleep(300)  # 5 —Ö–≤–∏–ª–∏–Ω –º—ñ–∂ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º–∏
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            time.sleep(60)  # 1 —Ö–≤–∏–ª–∏–Ω–∞ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ

# -------------------------
# Flask —Ç–∞ Webhook
# -------------------------
@app.route(WEBHOOK_PATH, methods=['POST'])
def webhook():
    try:
        json_str = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_str)
        bot.process_new_updates([update])
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ webhook: {e}")
    return 'OK', 200

@app.route('/')
def home():
    return 'Smart Auto Bot is running!', 200

@app.route('/status')
def web_status():
    return {
        'status': 'active',
        'last_signals': len(last_signals),
        'timestamp': datetime.now().isoformat()
    }, 200

def setup_webhook():
    try:
        url = f'https://api.telegram.org/bot{API_KEY_TELEGRAM}/setWebhook'
        response = requests.post(url, data={'url': WEBHOOK_URL}, timeout=10)
        logger.info(f'Webhook setup: {response.json()}')
    except Exception as e:
        logger.error(f'–ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è webhook: {e}')

# -------------------------
# –ó–∞–ø—É—Å–∫
# -------------------------
if __name__ == '__main__':
    logger.info('–ó–∞–ø—É—Å–∫ Smart Auto Bot...')
    
    setup_webhook()
    
    market_thread = threading.Thread(target=check_market, daemon=True)
    market_thread.start()
    logger.info('–ü–æ—Ç—ñ–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–∏–Ω–∫—É –∑–∞–ø—É—â–µ–Ω–æ')
    
    try:
        app.run(host='0.0.0.0', port=5000, debug=False, use_reloader=False)
    except Exception as e:
        logger.error(f'–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É Flask: {e}')