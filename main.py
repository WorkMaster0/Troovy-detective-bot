import ccxt
import requests
import time
import os
from datetime import datetime
from flask import Flask, request
import telebot
import threading
import json
import math
from typing import List, Tuple, Dict

# -------------------------
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ environment variables
# -------------------------
API_KEY_TELEGRAM = os.getenv("API_KEY_TELEGRAM")
CHAT_ID = os.getenv("CHAT_ID")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = WEBHOOK_HOST + WEBHOOK_PATH

GATE_API_KEY = os.getenv("GATE_API_KEY")
GATE_API_SECRET = os.getenv("GATE_API_SECRET")

MORALIS_API_KEY = os.getenv("MORALIS_API_KEY")
COINGECKO_API_KEY = os.getenv("COINGECKO_API_KEY", "")

TRADE_AMOUNT_USD = float(os.getenv("TRADE_AMOUNT_USD", 5))
SPREAD_THRESHOLD = float(os.getenv("SPREAD_THRESHOLD", 2.0))
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", 300))
MIN_VOLUME_USD = float(os.getenv("MIN_VOLUME_USD", 10000))  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –æ–±'—î–º

bot = telebot.TeleBot(API_KEY_TELEGRAM)
app = Flask(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±—ñ—Ä–∂
try:
    gate = ccxt.gateio({
        "apiKey": GATE_API_KEY,
        "secret": GATE_API_SECRET,
        "options": {"defaultType": "spot"}
    })
    gate.load_markets()
    print(f"{datetime.now()} | ‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Gate.io")
except Exception as e:
    print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Gate.io: {e}")
    gate = None

active_positions = {}
token_blacklist = set()
coingecko_last_call = 0

# -------------------------
# –ü–û–ö–†–ê–©–ï–ù–ï –û–¢–†–ò–ú–ê–ù–ù–Ø –¢–û–ö–ï–ù–Ü–í
# -------------------------
def get_top_tokens_from_coingecko(limit=25) -> List[Tuple[str, float]]:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø —Ç–æ–∫–µ–Ω—ñ–≤ –∑ CoinGecko"""
    global coingecko_last_call
    
    current_time = time.time()
    if current_time - coingecko_last_call < 60:
        return []
    
    try:
        url = "https://api.coingecko.com/api/v3/coins/markets"
        params = {
            "vs_currency": "usd",
            "order": "market_cap_desc",
            "per_page": limit,
            "page": 1,
            "sparkline": False
        }
        
        headers = {}
        if COINGECKO_API_KEY:
            headers = {"x-cg-demo-api-key": COINGECKO_API_KEY}
            
        response = requests.get(url, params=params, headers=headers, timeout=15)
        coingecko_last_call = current_time
        
        if response.status_code == 200:
            tokens = []
            for coin in response.json():
                symbol = coin["symbol"].upper()
                price = coin["current_price"]
                if price and price > 0:
                    # –ü–†–ê–í–ò–õ–¨–ù–ò–ô –§–û–†–ú–ê–¢ –î–õ–Ø GATE.IO
                    tokens.append((f"{symbol}/USDT", price))
            return tokens
        return []
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå CoinGecko –ø–æ–º–∏–ª–∫–∞: {e}")
        return []

def get_tokens_from_binance() -> List[Tuple[str, float]]:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø —Ç–æ–∫–µ–Ω—ñ–≤ –∑ Binance —á–µ—Ä–µ–∑ —ó—Ö API"""
    try:
        url = "https://api.binance.com/api/v3/ticker/price"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            tokens = []
            for item in response.json():
                symbol = item['symbol']
                if symbol.endswith('USDT'):
                    tokens.append((symbol.replace('USDT', '/USDT'), float(item['price'])))
                    if len(tokens) >= 30:  # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
                        break
            return tokens
        return []
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå Binance –ø–æ–º–∏–ª–∫–∞: {e}")
        return []

# -------------------------
# –¢–û–†–ì–û–í–ê –õ–û–ì–Ü–ö–ê
# -------------------------
def execute_trade(symbol: str, gate_price: float, dex_price: float, spread: float):
    """–í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó"""
    try:
        if spread > 0:  # DEX —Ü—ñ–Ω–∞ –≤–∏—â–∞ - –∫—É–ø—É—î–º–æ –Ω–∞ Gate, –ø—Ä–æ–¥–∞—î–º–æ –Ω–∞ DEX
            # –ö—É–ø—ñ–≤–ª—è –Ω–∞ Gate.io
            amount = TRADE_AMOUNT_USD / gate_price
            order = gate.create_market_buy_order(symbol, amount)
            
            msg = f"‚úÖ –í–ò–ö–û–ù–ê–ù–û: –ö—É–ø—ñ–≤–ª—è {symbol}\n"
            msg += f"–°—É–º–∞: {amount:.6f}\n"
            msg += f"–¶—ñ–Ω–∞: {gate_price:.6f}\n"
            msg += f"Spread: {spread:.2f}%"
            
        else:  # Gate —Ü—ñ–Ω–∞ –≤–∏—â–∞ - –∫—É–ø—É—î–º–æ –Ω–∞ DEX, –ø—Ä–æ–¥–∞—î–º–æ –Ω–∞ Gate
            # –ü—Ä–æ–¥–∞–∂ –Ω–∞ Gate.io
            amount = TRADE_AMOUNT_USD / gate_price
            order = gate.create_market_sell_order(symbol, amount)
            
            msg = f"‚úÖ –í–ò–ö–û–ù–ê–ù–û: –ü—Ä–æ–¥–∞–∂ {symbol}\n"
            msg += f"–°—É–º–∞: {amount:.6f}\n"
            msg += f"–¶—ñ–Ω–∞: {gate_price:.6f}\n"
            msg += f"Spread: {spread:.2f}%"
        
        bot.send_message(CHAT_ID, msg)
        print(f"{datetime.now()} | {msg}")
        
    except Exception as e:
        error_msg = f"‚ùå –ü–û–ú–ò–õ–ö–ê —Ç–æ—Ä–≥—ñ–≤–ª—ñ {symbol}: {e}"
        bot.send_message(CHAT_ID, error_msg)
        print(f"{datetime.now()} | {error_msg}")

# -------------------------
# –ü–û–ö–†–ê–©–ï–ù–ò–ô –ê–†–ë–Ü–¢–†–ê–ñ
# -------------------------
def smart_arbitrage(symbol: str, dex_price: float):
    """–†–æ–∑—É–º–Ω–∏–π –∞—Ä–±—ñ—Ç—Ä–∞–∂ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ"""
    if not gate or symbol in active_positions or symbol in token_blacklist:
        return
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –ø–∞—Ä–∏
        markets = gate.load_markets()
        if symbol not in markets or not markets[symbol].get('active', False):
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±'—î–º—É —Ç–æ—Ä–≥—ñ–≤
        ticker = gate.fetch_ticker(symbol)
        gate_price = ticker['last']
        volume = ticker['quoteVolume']  # –û–±'—î–º –≤ USDT
        
        if gate_price == 0 or dex_price == 0 or volume < MIN_VOLUME_USD:
            return
        
        spread = ((dex_price - gate_price) / gate_price) * 100
        
        # –§—ñ–ª—å—Ç—Ä –∑–Ω–∞—á—É—â–æ–≥–æ —Å–ø—Ä–µ–¥—É
        if abs(spread) < SPREAD_THRESHOLD:
            return
        
        print(f"{datetime.now()} | üìä {symbol} | Gate: {gate_price:.6f} | DEX: {dex_price:.6f} | Spread: {spread:.2f}%")
        
        # –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ –ø—Ä–∏ –∑–Ω–∞—á–Ω–æ–º—É —Å–ø—Ä–µ–¥—ñ
        if abs(spread) >= SPREAD_THRESHOLD:
            execute_trade(symbol, gate_price, dex_price, spread)
            
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É {symbol}: {e}")
        token_blacklist.add(symbol)  # –î–æ–¥–∞—î–º–æ –≤ —á–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫

# -------------------------
# –û–°–ù–û–í–ù–ò–ô –¶–ò–ö–õ –ê–†–ë–Ü–¢–†–ê–ñ–£
# -------------------------
def start_arbitrage():
    """–û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –∞—Ä–±—ñ—Ç—Ä–∞–∂—É"""
    bot.send_message(CHAT_ID, "üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –ü–æ—á–∏–Ω–∞—é –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥...")
    
    cycle = 0
    while True:
        cycle += 1
        print(f"{datetime.now()} | üîÑ –¶–∏–∫–ª {cycle}")
        
        tokens = []
        
        # –†—ñ–∑–Ω—ñ –¥–∂–µ—Ä–µ–ª–∞ —Ç–æ–∫–µ–Ω—ñ–≤
        if cycle % 3 == 0:
            tokens.extend(get_top_tokens_from_coingecko(20))
        else:
            tokens.extend(get_tokens_from_binance())
        
        # –í–∏–¥–∞–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏
        unique_tokens = list(set(tokens))
        
        print(f"{datetime.now()} | üì¶ –ó–Ω–∞–π–¥–µ–Ω–æ {len(unique_tokens)} —Ç–æ–∫–µ–Ω—ñ–≤")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂
        for symbol, price in unique_tokens:
            smart_arbitrage(symbol, price)
            time.sleep(0.3)  # –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ rate limits
        
        time.sleep(CHECK_INTERVAL)

# -------------------------
# –î–û–î–ê–¢–ö–û–í–Ü –ö–û–ú–ê–ù–î–ò
# -------------------------
@bot.message_handler(commands=['profit'])
def show_profit(message):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–∏–±—É—Ç–æ–∫"""
    # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø—Ä–∏–±—É—Ç–∫—É
    bot.reply_to(message, "üìà –§—É–Ω–∫—Ü—ñ—è –∞–Ω–∞–ª—ñ–∑—É –ø—Ä–∏–±—É—Ç–∫—É –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ...")

@bot.message_handler(commands=['blacklist'])
def show_blacklist(message):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —á–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫"""
    bl_list = "\n".join(list(token_blacklist)[:10])
    bot.reply_to(message, f"‚ö´ –ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫ ({len(token_blacklist)}):\n{bl_list}")

# -------------------------
# –ó–ê–ü–£–°–ö
# -------------------------
if __name__ == "__main__":
    print(f"{datetime.now()} | üöÄ –ó–∞–ø—É—Å–∫ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–æ–≥–æ –±–æ—Ç–∞...")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –∫–ª—é—á—ñ–≤
    required_keys = [API_KEY_TELEGRAM, CHAT_ID, GATE_API_KEY, GATE_API_SECRET]
    if not all(required_keys):
        print(f"{datetime.now()} | ‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ API –∫–ª—é—á—ñ!")
        exit(1)
    
    # –ó–∞–ø—É—Å–∫ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    arbitrage_thread = threading.Thread(target=start_arbitrage, daemon=True)
    arbitrage_thread.start()
    
    # –ó–∞–ø—É—Å–∫ Flask –¥–ª—è webhook
    app.run(host="0.0.0.0", port=5000)