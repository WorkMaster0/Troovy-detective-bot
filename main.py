import ccxt
import requests
import time
import os
from datetime import datetime
from flask import Flask, request
import telebot
import threading
import json

# -------------------------
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ environment variables
# -------------------------
API_KEY_TELEGRAM = os.getenv("API_KEY_TELEGRAM")
CHAT_ID = os.getenv("CHAT_ID")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = WEBHOOK_HOST + WEBHOOK_PATH

GATE_API_KEY = os.getenv("GATE_API_KEY")
GATE_API_SECRET = os.getenv("GATE_API_SECRET")

MORALIS_API_KEY = os.getenv("MORALIS_API_KEY")
COINGECKO_API_KEY = os.getenv("COINGECKO_API_KEY", "")

TRADE_AMOUNT_USD = float(os.getenv("TRADE_AMOUNT_USD", 5))
SPREAD_THRESHOLD = float(os.getenv("SPREAD_THRESHOLD", 2.0))
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", 60))

bot = telebot.TeleBot(API_KEY_TELEGRAM)
app = Flask(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±—ñ—Ä–∂
try:
    gate = ccxt.gateio({
        "apiKey": GATE_API_KEY,
        "secret": GATE_API_SECRET,
        "options": {"defaultType": "swap"}
    })
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Gate.io
    gate.load_markets()
    print(f"{datetime.now()} | ‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Gate.io")
except Exception as e:
    print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Gate.io: {e}")
    gate = None

active_positions = {}
token_blacklist = set()

# -------------------------
# –ü–ï–†–ï–í–Ü–†–ö–ê API –ö–õ–Æ–ß–Ü–í
# -------------------------
def check_api_keys():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—ñ API –∫–ª—é—á—ñ–≤"""
    issues = []
    
    if not API_KEY_TELEGRAM or API_KEY_TELEGRAM == "your_telegram_bot_token":
        issues.append("‚ùå Telegram API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
    
    if not CHAT_ID or CHAT_ID == "your_chat_id":
        issues.append("‚ùå Chat ID –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
    
    if not GATE_API_KEY or GATE_API_KEY == "your_gate_api_key":
        issues.append("‚ùå Gate.io API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
    
    if not GATE_API_SECRET or GATE_API_SECRET == "your_gate_api_secret":
        issues.append("‚ùå Gate.io API —Å–µ–∫—Ä–µ—Ç –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
    
    if not MORALIS_API_KEY or MORALIS_API_KEY == "your_moralis_api_key":
        issues.append("‚ö†Ô∏è Moralis API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ (–Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ)")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞—Ü–µ–∑–¥–∞—Ç–Ω–æ—Å—Ç—ñ Gate.io API
    if gate:
        try:
            balance = gate.fetch_balance()
            print(f"{datetime.now()} | ‚úÖ Gate.io API –ø—Ä–∞—Ü—é—î, –±–∞–ª–∞–Ω—Å: {balance['total'].get('USDT', 0):.2f} USDT")
        except Exception as e:
            issues.append(f"‚ùå Gate.io API –Ω–µ –ø—Ä–∞—Ü—é—î: {str(e)[:100]}")
    
    return issues

# -------------------------
# –ü–û–ö–†–ê–©–ï–ù–ò–ô –û–¢–†–ò–ú–ê–ù–ù–Ø –¢–û–ö–ï–ù–Ü–í
# -------------------------
def get_top_tokens_from_coingecko(limit=30):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø —Ç–æ–∫–µ–Ω—ñ–≤ –∑ CoinGecko"""
    try:
        url = "https://api.coingecko.com/api/v3/coins/markets"
        params = {
            "vs_currency": "usd",
            "order": "market_cap_desc",
            "per_page": limit,
            "page": 1,
            "sparkline": False
        }
        
        headers = {}
        if COINGECKO_API_KEY and COINGECKO_API_KEY != "your_coingecko_api_key":
            headers = {"x-cg-demo-api-key": COINGECKO_API_KEY}
            
        response = requests.get(url, params=params, headers=headers, timeout=10)
        
        if response.status_code == 200:
            tokens = []
            for coin in response.json():
                symbol = coin["symbol"].upper() + "/USDT"
                price = coin["current_price"]
                if price and price > 0:
                    tokens.append((symbol, price))
            print(f"{datetime.now()} | ‚úÖ CoinGecko: –∑–Ω–∞–π–¥–µ–Ω–æ {len(tokens)} —Ç–æ–∫–µ–Ω—ñ–≤")
            return tokens
        else:
            print(f"{datetime.now()} | ‚ùå CoinGecko HTTP {response.status_code}")
            return []
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå CoinGecko –ø–æ–º–∏–ª–∫–∞: {e}")
        return []

def get_tokens_from_coingecko_trending(limit=15):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–µ–Ω–¥–æ–≤–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤ –∑ CoinGecko"""
    try:
        url = "https://api.coingecko.com/api/v3/search/trending"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            tokens = []
            data = response.json()
            trending_coins = data.get("coins", [])[:limit]
            
            for item in trending_coins:
                coin_id = item["item"]["id"]
                symbol = item["item"]["symbol"].upper() + "/USDT"
                
                # –°–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É —Ü—ñ–Ω–∏
                price_url = f"https://api.coingecko.com/api/v3/simple/price?ids={coin_id}&vs_currencies=usd"
                price_response = requests.get(price_url, timeout=8)
                
                if price_response.status_code == 200:
                    price_data = price_response.json()
                    usd_price = price_data.get(coin_id, {}).get("usd", 0)
                    if usd_price > 0:
                        tokens.append((symbol, usd_price))
            
            print(f"{datetime.now()} | ‚úÖ CoinGecko Trending: –∑–Ω–∞–π–¥–µ–Ω–æ {len(tokens)} —Ç–æ–∫–µ–Ω—ñ–≤")
            return tokens
        return []
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå CoinGecko trending –ø–æ–º–∏–ª–∫–∞: {e}")
        return []

def get_tokens_from_moralis(chain, limit=15):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –∑ Moralis"""
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ API –∫–ª—é—á –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ
    if not MORALIS_API_KEY or MORALIS_API_KEY == "your_moralis_api_key":
        return []
    
    chain_mapping = {
        "eth": "eth",
        "bsc": "bsc", 
        "polygon": "polygon"
    }
    
    if chain not in chain_mapping:
        return []
    
    moralis_chain = chain_mapping[chain]
    url = f"https://deep-index.moralis.io/api/v2.2/erc20/metadata?chain={moralis_chain}&limit={limit}"
    headers = {"X-API-Key": MORALIS_API_KEY}
    
    try:
        response = requests.get(url, headers=headers, timeout=10)
        
        if response.status_code == 200:
            tokens = []
            data = response.json()
            
            if isinstance(data, list):
                for token in data[:limit]:  # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
                    symbol = token.get("symbol", "").upper()
                    address = token.get("address", "")
                    
                    if not symbol or not address or symbol in token_blacklist:
                        continue
                    
                    tokens.append((f"{symbol}/USDT", 1.0))  # –¢–∏–ø–æ–≤–∞ —Ü—ñ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç—É
                    
            print(f"{datetime.now()} | ‚úÖ Moralis {chain}: –∑–Ω–∞–π–¥–µ–Ω–æ {len(tokens)} —Ç–æ–∫–µ–Ω—ñ–≤")
            return tokens
        else:
            print(f"{datetime.now()} | ‚ùå Moralis {chain} HTTP {response.status_code}")
            return []
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå Moralis {chain} –ø–æ–º–∏–ª–∫–∞: {e}")
        return []

# -------------------------
# –†–ï–ó–ï–†–í–ù–ò–ô –°–ü–ò–°–û–ö –¢–û–ö–ï–ù–Ü–í
# -------------------------
def get_backup_tokens():
    """–†–µ–∑–µ—Ä–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤"""
    backup_tokens = [
        ("BTC/USDT", 50000),
        ("ETH/USDT", 3000),
        ("BNB/USDT", 500),
        ("SOL/USDT", 100),
        ("XRP/USDT", 0.5),
        ("ADA/USDT", 0.4),
        ("DOGE/USDT", 0.1),
        ("DOT/USDT", 5),
        ("LINK/USDT", 15),
        ("MATIC/USDT", 0.8),
        ("AVAX/USDT", 20),
        ("ATOM/USDT", 10),
        ("LTC/USDT", 70),
        ("UNI/USDT", 6),
        ("XLM/USDT", 0.12)
    ]
    print(f"{datetime.now()} | ‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫: {len(backup_tokens)} —Ç–æ–∫–µ–Ω—ñ–≤")
    return backup_tokens

# -------------------------
# –ü–û–ö–†–ê–©–ï–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–Ü –ü–ê–†–ò
# -------------------------
def is_pair_available(symbol):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø–∞—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ Gate.io"""
    if not gate:
        return False
        
    try:
        base_symbol = symbol.split('/')[0]
        formats = [
            f"{base_symbol}_USDT",
            f"{base_symbol}/USDT:USDT",
            f"{base_symbol.lower()}_usdt"
        ]
        
        markets = gate.load_markets()
        for fmt in formats:
            if fmt in markets:
                market = markets[fmt]
                if market['active']:
                    return True
        return False
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–∞—Ä–∏ {symbol}: {e}")
        return False

# -------------------------
# –û–°–ù–û–í–ù–ò–ô –¶–ò–ö–õ –ê–†–ë–Ü–¢–†–ê–ñ–£
# -------------------------
def start_arbitrage():
    """–û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –∞—Ä–±—ñ—Ç—Ä–∞–∂—É"""
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ API –∫–ª—é—á—ñ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
    api_issues = check_api_keys()
    if api_issues:
        error_msg = "üî¥ –ü–†–û–ë–õ–ï–ú–ò –ó API –ö–õ–Æ–ß–ê–ú–ò:\n\n" + "\n".join(api_issues)
        print(f"{datetime.now()} | {error_msg}")
        bot.send_message(CHAT_ID, error_msg)
    
    bot.send_message(CHAT_ID, "üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –ü–æ—á–∏–Ω–∞—é –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥...")
    
    cycle = 0
    while True:
        cycle += 1
        print(f"{datetime.now()} | üîÑ –¶–∏–∫–ª {cycle}")
        
        tokens = []
        
        # –°–ø–æ—Å—ñ–± 1: CoinGecko (–Ω–∞–π–Ω–∞–¥—ñ–π–Ω—ñ—à–∏–π)
        tokens.extend(get_top_tokens_from_coingecko(25))
        tokens.extend(get_tokens_from_coingecko_trending(10))
        
        # –°–ø–æ—Å—ñ–± 2: Moralis (—è–∫—â–æ –ø—Ä–∞—Ü—é—î)
        if MORALIS_API_KEY and MORALIS_API_KEY != "your_moralis_api_key":
            chains = ["eth", "bsc"]
            for chain in chains:
                try:
                    chain_tokens = get_tokens_from_moralis(chain, 10)
                    if chain_tokens:
                        tokens.extend(chain_tokens)
                    time.sleep(1)
                except Exception as e:
                    print(f"{datetime.now()} | ‚ùå Moralis {chain} –ø—Ä–æ–ø—É—â–µ–Ω–æ: {e}")
        
        # –í–∏–¥–∞–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏
        unique_tokens = list(set(tokens))
        
        # –Ø–∫—â–æ —Ç–æ–∫–µ–Ω–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫
        if not unique_tokens:
            print(f"{datetime.now()} | ‚ö†Ô∏è –ñ–æ–¥–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —Ä–µ–∑–µ—Ä–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫")
            unique_tokens = get_backup_tokens()
        
        print(f"{datetime.now()} | üì¶ –ó–Ω–∞–π–¥–µ–Ω–æ {len(unique_tokens)} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        for symbol, price in unique_tokens:
            if gate:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ gate —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
                smart_arbitrage(symbol, price)
            time.sleep(0.2)
        
        time.sleep(CHECK_INTERVAL)

# -------------------------
# –°–ø—Ä–æ—â–µ–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∞—Ä–±—ñ—Ç—Ä–∞–∂—É –¥–ª—è —Ç–µ—Å—Ç—É
# -------------------------
def smart_arbitrage(symbol, dex_price):
    """–°–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –∞—Ä–±—ñ—Ç—Ä–∞–∂—É –¥–ª—è —Ç–µ—Å—Ç—É"""
    if not gate or symbol in active_positions or not is_pair_available(symbol):
        return
        
    try:
        gate_symbol = symbol.replace("/", "_USDT")
        ticker = gate.fetch_ticker(gate_symbol)
        gate_price = ticker['last']
        
        if gate_price == 0 or dex_price == 0:
            return
            
        spread = ((dex_price - gate_price) / gate_price) * 100
        
        print(f"{datetime.now()} | üìä {symbol} | Gate: {gate_price:.6f} | DEX: {dex_price:.6f} | Spread: {spread:.2f}%")
        
        # –¢—ñ–ª—å–∫–∏ –ª–æ–≥—É—î–º–æ, –Ω–µ –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —Ä–µ–∞–ª—å–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó
        if abs(spread) >= SPREAD_THRESHOLD:
            msg = f"üéØ –ó–Ω–∞–π–¥–µ–Ω–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂ {symbol}\nSpread: {spread:.2f}%"
            print(f"{datetime.now()} | {msg}")
            
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É {symbol}: {e}")

# -------------------------
# TELEGRAM –ö–û–ú–ê–ù–î–ò
# -------------------------
@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç—É"""
    bot.reply_to(message, "ü§ñ –ê—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏–π –±–æ—Ç –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!\n\n"
                         "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
                         "/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏\n"
                         "/balance - –ë–∞–ª–∞–Ω—Å\n"
                         "/check_api - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ API –∫–ª—é—á—ñ–≤\n"
                         "/stop - –ó—É–ø–∏–Ω–∏—Ç–∏ –±–æ—Ç–∞")

@bot.message_handler(commands=['check_api'])
def check_api_command(message):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ API –∫–ª—é—á—ñ–≤"""
    issues = check_api_keys()
    if issues:
        response = "üî¥ –ü—Ä–æ–±–ª–µ–º–∏ –∑ API –∫–ª—é—á–∞–º–∏:\n\n" + "\n".join(issues)
    else:
        response = "‚úÖ –í—Å—ñ API –∫–ª—é—á—ñ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –∫–æ—Ä–µ–∫—Ç–Ω–æ!"
    bot.reply_to(message, response)

@bot.message_handler(commands=['status'])
def send_status(message):
    """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏"""
    try:
        if gate:
            balance = gate.fetch_balance()
            usdt_balance = balance['total'].get('USDT', 0)
            msg = f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î\nüí∞ –ë–∞–ª–∞–Ω—Å: {usdt_balance:.2f} USDT\n"
            msg += f"üìä –ê–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π: {len(active_positions)}\n"
            msg += f"‚ö´ –ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫: {len(token_blacklist)} —Ç–æ–∫–µ–Ω—ñ–≤"
        else:
            msg = "‚ùå –ù–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Gate.io"
        bot.reply_to(message, msg)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

@bot.message_handler(commands=['balance'])
def send_balance(message):
    """–ë–∞–ª–∞–Ω—Å"""
    try:
        if gate:
            balance = gate.fetch_balance()
            usdt = balance['total'].get('USDT', 0)
            bot.reply_to(message, f"üí∞ –ë–∞–ª–∞–Ω—Å: {usdt:.2f} USDT")
        else:
            bot.reply_to(message, "‚ùå –ù–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Gate.io")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# -------------------------
# WEBHOOK –¢–ê –ó–ê–ü–£–°–ö
# -------------------------
@app.route(WEBHOOK_PATH, methods=["POST"])
def webhook():
    json_str = request.get_data().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "!", 200

def setup_webhook():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è webhook"""
    try:
        url = f"https://api.telegram.org/bot{API_KEY_TELEGRAM}/setWebhook"
        response = requests.post(url, data={"url": WEBHOOK_URL})
        print("Webhook setup:", response.json())
    except Exception as e:
        print(f"Webhook setup failed: {e}")

if __name__ == "__main__":
    print(f"{datetime.now()} | üöÄ –ó–∞–ø—É—Å–∫ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–æ–≥–æ –±–æ—Ç–∞...")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –∫–ª—é—á—ñ–≤
    required_keys = [API_KEY_TELEGRAM, CHAT_ID, GATE_API_KEY, GATE_API_SECRET]
    if not all(required_keys):
        print(f"{datetime.now()} | ‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ API –∫–ª—é—á—ñ!")
        exit(1)
    
    setup_webhook()
    threading.Thread(target=start_arbitrage, daemon=True).start()
    app.run(host="0.0.0.0", port=5000)