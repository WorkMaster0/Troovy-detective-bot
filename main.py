import ccxt
import requests
import time
import os
from datetime import datetime
from flask import Flask, request
import telebot
import threading
import json
import math
from typing import List, Tuple, Dict

# -------------------------
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
# -------------------------
API_KEY_TELEGRAM = os.getenv("API_KEY_TELEGRAM")
CHAT_ID = os.getenv("CHAT_ID")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = WEBHOOK_HOST + WEBHOOK_PATH

GATE_API_KEY = os.getenv("GATE_API_KEY")
GATE_API_SECRET = os.getenv("GATE_API_SECRET")

TRADE_AMOUNT_USD = float(os.getenv("TRADE_AMOUNT_USD", 50))
SPREAD_THRESHOLD = float(os.getenv("SPREAD_THRESHOLD", 1.0))
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", 60))
LEVERAGE = int(os.getenv("LEVERAGE", 3))
MAX_POSITIONS = int(os.getenv("MAX_POSITIONS", 3))

bot = telebot.TeleBot(API_KEY_TELEGRAM)
app = Flask(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±—ñ—Ä–∂—ñ
try:
    exchange = ccxt.gateio({
        "apiKey": GATE_API_KEY,
        "secret": GATE_API_SECRET,
        "options": {"defaultType": "swap"}
    })
    exchange.load_markets()
    print(f"{datetime.now()} | ‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Gate.io Futures")
except Exception as e:
    print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}")
    exchange = None

active_positions = {}
trade_history = []
profit_loss = 0.0

# -------------------------
# –°–ü–†–ê–í–ñ–ù–Ü–ô –ê–†–ë–Ü–¢–†–ê–ñ: –§'–Æ–ß–ï–†–°–ò vs –°–ü–û–¢
# -------------------------
def get_gateio_futures_prices(symbols: List[str] = None) -> Dict[str, float]:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω —Ñ'—é—á–µ—Ä—Å—ñ–≤ –∑ Gate.io"""
    prices = {}
    if not exchange:
        return prices
        
    try:
        if not symbols:
            # –¢–æ–ø-20 –ª—ñ–∫–≤—ñ–¥–Ω–∏—Ö –ø–∞—Ä
            symbols = ['BTC', 'ETH', 'SOL', 'XRP', 'ADA', 'AVAX', 'DOT', 'LINK', 'MATIC', 'DOGE',
                      'BNB', 'ATOM', 'LTC', 'OP', 'ARB', 'FIL', 'APT', 'NEAR', 'ALGO', 'XLM']
        
        for symbol in symbols:
            try:
                ticker = exchange.fetch_ticker(f"{symbol}/USDT:USDT")
                if ticker and ticker['last'] and ticker['last'] > 0:
                    prices[symbol] = ticker['last']
            except:
                continue
                
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ'—é—á–µ—Ä—Å–Ω–∏—Ö —Ü—ñ–Ω: {e}")
    
    return prices

def get_gateio_spot_prices(symbols: List[str] = None) -> Dict[str, float]:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–æ—Ç–æ–≤–∏—Ö —Ü—ñ–Ω –∑ Gate.io (–¥–ª—è –∞—Ä–±—ñ—Ç—Ä–∞–∂—É)"""
    prices = {}
    
    try:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ CoinGecko –¥–ª—è —Å–ø–æ—Ç–æ–≤–∏—Ö —Ü—ñ–Ω
        url = "https://api.coingecko.com/api/v3/simple/price"
        if symbols:
            ids = ",".join([f"{s.lower()}" for s in symbols if s != 'USDT'])
        else:
            ids = "bitcoin,ethereum,solana,ripple,cardano,avalanche-2,polkadot,chainlink,polygon,dogecoin"
        
        params = {
            "ids": ids,
            "vs_currencies": "usd"
        }
        
        response = requests.get(url, params=params, timeout=10)
        if response.status_code == 200:
            data = response.json()
            for coin_id, price_data in data.items():
                symbol = coin_id.upper().replace("-", "")
                if symbol == "AVALANCHE2":
                    symbol = "AVAX"
                prices[symbol] = price_data['usd']
                
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–æ—Ç–æ–≤–∏—Ö —Ü—ñ–Ω: {e}")
    
    return prices

def calculate_real_spread(futures_price: float, spot_price: float) -> float:
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥—É –º—ñ–∂ —Ñ'—é—á–µ—Ä—Å–∞–º–∏ —ñ —Å–ø–æ—Ç–æ–º"""
    if not futures_price or not spot_price or spot_price == 0:
        return 0
    return ((futures_price - spot_price) / spot_price) * 100

# -------------------------
# –¢–û–†–ì–û–í–ê –õ–û–ì–Ü–ö–ê
# -------------------------
def calculate_futures_amount(symbol: str, price: float) -> float:
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤"""
    try:
        market = exchange.market(f"{symbol}/USDT:USDT")
        contract_size = float(market['contractSize'])
        
        if price <= 0 or contract_size <= 0:
            return 0
            
        amount = (TRADE_AMOUNT_USD * LEVERAGE) / (price * contract_size)
        precision = int(market['precision']['amount'])
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
        min_amount = float(market['limits']['amount']['min'])
        if amount < min_amount:
            print(f"{datetime.now()} | ‚ö†Ô∏è –ö—ñ–ª—å–∫—ñ—Å—Ç—å {amount} –º–µ–Ω—à–∞ –∑–∞ –º—ñ–Ω—ñ–º—É–º {min_amount}")
            return 0
            
        return round(amount, precision)
        
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ {symbol}: {e}")
        return 0

def execute_trade_based_on_premium(symbol: str, futures_price: float, spot_price: float, spread: float):
    """–¢–æ—Ä–≥—ñ–≤–ª—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø—Ä–µ–º—ñ—ó —Ñ'—é—á–µ—Ä—Å—ñ–≤"""
    try:
        if len(active_positions) >= MAX_POSITIONS:
            return
            
        amount = calculate_futures_amount(symbol, futures_price)
        if amount <= 0:
            return
        
        futures_symbol = f"{symbol}/USDT:USDT"
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–ª–µ—á–µ
        exchange.set_leverage(LEVERAGE, futures_symbol)
        
        if spread > 0:  # –§'—é—á–µ—Ä—Å–∏ –¥–æ—Ä–æ–∂—á—ñ (–ø—Ä–µ–º—ñ—è) - –ø—Ä–æ–¥–∞—î–º–æ
            order = exchange.create_market_sell_order(futures_symbol, amount)
            side = "SHORT"
            reason = "–§'—é—á–µ—Ä—Å–∏ –¥–æ—Ä–æ–∂—á—ñ –∑–∞ —Å–ø–æ—Ç"
        else:  # –§'—é—á–µ—Ä—Å–∏ –¥–µ—à–µ–≤—à—ñ (–¥–∏—Å–∫–æ–Ω—Ç) - –∫—É–ø—É—î–º–æ
            order = exchange.create_market_buy_order(futures_symbol, amount)
            side = "LONG"  
            reason = "–§'—é—á–µ—Ä—Å–∏ –¥–µ—à–µ–≤—à—ñ –∑–∞ —Å–ø–æ—Ç"
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
        trade_info = {
            'symbol': symbol,
            'side': side,
            'futures_price': futures_price,
            'spot_price': spot_price,
            'spread': spread,
            'amount': amount,
            'timestamp': datetime.now(),
            'order_id': order['id'],
            'reason': reason
        }
        trade_history.append(trade_info)
        active_positions[symbol] = trade_info
        
        msg = f"üéØ {side} {symbol}\n"
        msg += f"üìà –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
        msg += f"üí∞ –§'—é—á–µ—Ä—Å: ${futures_price:.6f}\n"
        msg += f"üí∞ –°–ø–æ—Ç: ${spot_price:.6f}\n"
        msg += f"üìä –°–ø—Ä–µ–¥: {spread:+.2f}%\n"
        msg += f"üì¶ –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {amount:.6f}\n"
        msg += f"‚öñÔ∏è –ü–ª–µ—á–µ: {LEVERAGE}x\n"
        msg += f"üÜî Order: {order['id']}"
        
        bot.send_message(CHAT_ID, msg)
        print(f"{datetime.now()} | {msg}")
        
    except Exception as e:
        error_msg = f"‚ùå –ü–û–ú–ò–õ–ö–ê —Ç–æ—Ä–≥—ñ–≤–ª—ñ {symbol}: {e}"
        bot.send_message(CHAT_ID, error_msg)
        print(f"{datetime.now()} | {error_msg}")

# -------------------------
# –ü–û–®–£–ö –†–ï–ê–õ–¨–ù–ò–• –ê–†–ë–Ü–¢–†–ê–ñ–ù–ò–• –ú–û–ñ–õ–ò–í–û–°–¢–ï–ô
# -------------------------
def find_real_arbitrage_opportunities():
    """–ü–æ—à—É–∫ —Ä–µ–∞–ª—å–Ω–∏—Ö –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π"""
    opportunities = []
    
    try:
        # –¢–æ–ø-15 –ª—ñ–∫–≤—ñ–¥–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤
        top_symbols = ['BTC', 'ETH', 'SOL', 'XRP', 'ADA', 'AVAX', 'DOT', 'LINK', 'MATIC', 'DOGE', 'BNB', 'ATOM', 'LTC', 'OP', 'ARB']
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ü—ñ–Ω–∏
        futures_prices = get_gateio_futures_prices(top_symbols)
        spot_prices = get_gateio_spot_prices(top_symbols)
        
        for symbol in top_symbols:
            if symbol in active_positions:
                continue
                
            futures_price = futures_prices.get(symbol)
            spot_price = spot_prices.get(symbol)
            
            if not futures_price or not spot_price or spot_price == 0:
                continue
                
            spread = calculate_real_spread(futures_price, spot_price)
            
            # –®—É–∫–∞—î–º–æ —Ä–µ–∞–ª—å–Ω—ñ –∞—Ä–±—ñ—Ç—Ä–∞–∂—ñ (1-10% —Å–ø—Ä–µ–¥)
            if abs(spread) >= SPREAD_THRESHOLD and abs(spread) <= 10.0:
                opportunities.append((symbol, futures_price, spot_price, spread))
    
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∞—Ä–±—ñ—Ç—Ä–∞–∂—É: {e}")
    
    return opportunities

# -------------------------
# –ú–û–ù–Ü–¢–û–†–ò–ù–ì –¢–ê –ó–ê–ö–†–ò–¢–¢–Ø
# -------------------------
def monitor_positions():
    """–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü—ñ–π"""
    while True:
        try:
            for symbol in list(active_positions.keys()):
                try:
                    position = active_positions[symbol]
                    ticker = exchange.fetch_ticker(f"{symbol}/USDT:USDT")
                    current_price = ticker['last']
                    entry_price = position['futures_price']
                    
                    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ PnL
                    if position['side'] == 'LONG':
                        pnl_percent = ((current_price - entry_price) / entry_price) * 100 * LEVERAGE
                    else:
                        pnl_percent = ((entry_price - current_price) / entry_price) * 100 * LEVERAGE
                    
                    # –ó–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—ñ —Ü—ñ–ª—ñ
                    if abs(pnl_percent) >= 3.0:  # 3% –ø—Ä–∏–±—É—Ç–æ–∫/–∑–±–∏—Ç–æ–∫
                        close_position(symbol, current_price, pnl_percent)
                        
                except Exception as e:
                    print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É {symbol}: {e}")
            
            time.sleep(30)
            
        except Exception as e:
            print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
            time.sleep(60)

def close_position(symbol: str, current_price: float, pnl_percent: float):
    """–ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó"""
    try:
        position = active_positions[symbol]
        futures_symbol = f"{symbol}/USDT:USDT"
        
        if position['side'] == 'LONG':
            order = exchange.create_market_sell_order(futures_symbol, position['amount'])
        else:
            order = exchange.create_market_buy_order(futures_symbol, position['amount'])
        
        # –û–Ω–æ–≤–ª—é—î–º–æ PnL
        global profit_loss
        profit_loss += (pnl_percent / 100) * TRADE_AMOUNT_USD
        
        del active_positions[symbol]
        
        msg = f"üîí –ó–ê–ö–†–ò–¢–û {symbol} {position['side']}\n"
        msg += f"üìà PnL: {pnl_percent:+.2f}%\n"
        msg += f"üí∞ –¶—ñ–Ω–∞: ${current_price:.6f}\n"
        msg += f"üíµ –ü—Ä–∏–±—É—Ç–æ–∫: ${(pnl_percent/100)*TRADE_AMOUNT_USD:.2f}\n"
        msg += f"üè¶ –ó–∞–≥–∞–ª—å–Ω–∏–π PnL: ${profit_loss:.2f}"
        
        bot.send_message(CHAT_ID, msg)
        print(f"{datetime.now()} | {msg}")
        
    except Exception as e:
        error_msg = f"‚ùå –ü–û–ú–ò–õ–ö–ê –∑–∞–∫—Ä–∏—Ç—Ç—è {symbol}: {e}"
        bot.send_message(CHAT_ID, error_msg)
        print(f"{datetime.now()} | {error_msg}")

# -------------------------
# –û–°–ù–û–í–ù–ò–ô –¶–ò–ö–õ
# -------------------------
def start_arbitrage_bot():
    """–ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª –±–æ—Ç–∞"""
    bot.send_message(CHAT_ID, "üöÄ –ó–∞–ø—É—â–µ–Ω–æ –†–ï–ê–õ–¨–ù–ò–ô –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏–π –±–æ—Ç!")
    
    # –ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
    monitor_thread = threading.Thread(target=monitor_positions, daemon=True)
    monitor_thread.start()
    
    cycle = 0
    while True:
        cycle += 1
        
        try:
            balance = exchange.fetch_balance()['USDT']['total'] if exchange else 0
            print(f"{datetime.now()} | üîÑ –¶–∏–∫–ª {cycle} | –ë–∞–ª–∞–Ω—Å: ${balance:.2f}")
            
            # –ü–æ—à—É–∫ –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π
            opportunities = find_real_arbitrage_opportunities()
            
            if opportunities:
                print(f"{datetime.now()} | üìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(opportunities)} —Ä–µ–∞–ª—å–Ω–∏—Ö –∞—Ä–±—ñ—Ç—Ä–∞–∂—ñ–≤")
                
                for symbol, futures_price, spot_price, spread in opportunities:
                    if len(active_positions) < MAX_POSITIONS:
                        execute_trade_based_on_premium(symbol, futures_price, spot_price, spread)
                        time.sleep(2)
            
            time.sleep(CHECK_INTERVAL)
            
        except Exception as e:
            print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ: {e}")
            time.sleep(60)

# -------------------------
# TELEGRAM –ö–û–ú–ê–ù–î–ò
# -------------------------
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "ü§ñ –†–µ–∞–ª—å–Ω–∏–π –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏–π –±–æ—Ç –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!")

@bot.message_handler(commands=['status'])
def show_status(message):
    if not exchange:
        bot.reply_to(message, "‚ùå –ë—ñ—Ä–∂–∞ –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∞")
        return
        
    balance = exchange.fetch_balance()['USDT']['total']
    msg = f"üí∞ –ë–∞–ª–∞–Ω—Å: ${balance:.2f}\n"
    msg += f"üìä –ü–æ–∑–∏—Ü—ñ–π: {len(active_positions)}\n"
    msg += f"üìà PnL: ${profit_loss:.2f}"
    bot.reply_to(message, msg)

@bot.message_handler(commands=['arbitrage'])
def find_arbitrage_cmd(message):
    opportunities = find_real_arbitrage_opportunities()
    
    if opportunities:
        msg = "üéØ –†–µ–∞–ª—å–Ω—ñ –∞—Ä–±—ñ—Ç—Ä–∞–∂—ñ:\n\n"
        for symbol, futures, spot, spread in opportunities:
            msg += f"‚Ä¢ {symbol}: {spread:+.2f}%\n"
            msg += f"  Futures: ${futures:.6f}\n"
            msg += f"  Spot: ${spot:.6f}\n\n"
    else:
        msg = "üîç –ê—Ä–±—ñ—Ç—Ä–∞–∂—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ"
    
    bot.reply_to(message, msg)

# -------------------------
# –ó–ê–ü–£–°–ö
# -------------------------
if __name__ == "__main__":
    print(f"{datetime.now()} | üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–æ–≥–æ –±–æ—Ç–∞...")
    
    if not all([API_KEY_TELEGRAM, CHAT_ID, GATE_API_KEY, GATE_API_SECRET]):
        print(f"{datetime.now()} | ‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –∫–ª—é—á—ñ!")
        exit(1)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot_thread = threading.Thread(target=start_arbitrage_bot, daemon=True)
    bot_thread.start()
    
    # –ó–∞–ø—É—Å–∫ Telegram
    bot.remove_webhook()
    bot.polling(none_stop=True)