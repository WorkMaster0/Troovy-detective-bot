import ccxt
import requests
import time
import os
from datetime import datetime, timedelta
from flask import Flask, request
import telebot
import threading
import json
import pandas as pd
from collections import deque

# -------------------------
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ environment variables
# -------------------------
API_KEY_TELEGRAM = os.getenv("API_KEY_TELEGRAM")
CHAT_ID = os.getenv("CHAT_ID")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = WEBHOOK_HOST + WEBHOOK_PATH

GATE_API_KEY = os.getenv("GATE_API_KEY")
GATE_API_SECRET = os.getenv("GATE_API_SECRET")

MORALIS_API_KEY = os.getenv("MORALIS_API_KEY")
COINGECKO_API_KEY = os.getenv("COINGECKO_API_KEY", "")

TRADE_AMOUNT_USD = float(os.getenv("TRADE_AMOUNT_USD", 50))
FUNDING_THRESHOLD = float(os.getenv("FUNDING_THRESHOLD", 0.001))  # 0.1%
CORRELATION_THRESHOLD = float(os.getenv("CORRELATION_THRESHOLD", 5.0))  # 5%
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", 60))  # 60 —Å–µ–∫—É–Ω–¥

bot = telebot.TeleBot(API_KEY_TELEGRAM)
app = Flask(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±—ñ—Ä–∂—ñ
try:
    gate = ccxt.gateio({
        "apiKey": GATE_API_KEY,
        "secret": GATE_API_SECRET,
        "options": {"defaultType": "swap"}  # –ó–º—ñ–Ω–∏–ª–∏ –Ω–∞ swap –¥–ª—è —Ñ'—é—á–µ—Ä—Å—ñ–≤
    })
    gate.load_markets()
    print(f"{datetime.now()} | ‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Gate.io Futures")
except Exception as e:
    print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Gate.io: {e}")
    gate = None

# –Ü—Å—Ç–æ—Ä–∏—á–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
historical_data = {}
correlation_pairs = [
    ('BTC/USDT:USDT', 'ETH/USDT:USDT'),
    ('SOL/USDT:USDT', 'APT/USDT:USDT'), 
    ('BNB/USDT:USDT', 'BTC/USDT:USDT'),
    ('XRP/USDT:USDT', 'ADA/USDT:USDT')
]

# -------------------------
# –§–£–ù–ö–¶–Ü–á –î–õ–Ø –§'–Æ–ß–ï–†–°–ù–û–ì–û –ê–†–ë–Ü–¢–†–ê–ñ–£
# -------------------------

def get_funding_rate(symbol):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ funding rate –¥–ª—è —Ñ'—é—á–µ—Ä—Å—É"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É –¥–ª—è Gate.io API
        contract_name = symbol.replace('/USDT:USDT', '_USDT')
        
        url = "https://api.gateio.ws/api/v4/futures/usdt/funding_rate"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            funding_data = response.json()
            for item in funding_data:
                if item['name'] == contract_name:
                    return float(item['rate']), float(item.get('predicted_rate', 0))
            
        return None, None
    except Exception as e:
        print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è funding rate: {e}")
        return None, None

def calculate_annualized_funding(funding_rate):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä—ñ—á–Ω–æ–≥–æ funding rate"""
    if funding_rate is None:
        return 0
    # Funding –∫–æ–∂–Ω—ñ 8 –≥–æ–¥–∏–Ω (3 —Ä–∞–∑–∏ –Ω–∞ –¥–µ–Ω—å)
    return funding_rate * 3 * 365 * 100  # –£ –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö

def detect_funding_arbitrage():
    """
    –ó–Ω–∞—Ö–æ–¥–∏–º–æ –º–æ–º–µ–Ω—Ç–∏, –∫–æ–ª–∏ funding rate –Ω–∞ —Ñ'—é—á–µ—Ä—Å–∞—Ö –Ω–∞—Å—Ç—ñ–ª—å–∫–∏ –≤–∏—Å–æ–∫–∏–π,
    —â–æ –º–æ–∂–Ω–∞ –≤—ñ–¥–∫—Ä–∏–≤–∞—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é –∑ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–∏–º –ø—Ä–∏–±—É—Ç–∫–æ–º
    """
    symbols = ['BTC/USDT:USDT', 'ETH/USDT:USDT', 'SOL/USDT:USDT', 'XRP/USDT:USDT']
    
    opportunities = []
    
    for symbol in symbols:
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ funding rate
            current_funding, predicted_funding = get_funding_rate(symbol)
            
            if current_funding is None:
                continue
                
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä—ñ—á–Ω–æ–≥–æ funding rate
            annualized = calculate_annualized_funding(abs(current_funding))
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ funding rate –ø–µ—Ä–µ–≤–∏—â—É—î –ø–æ—Ä—ñ–≥
            if abs(current_funding) > FUNDING_THRESHOLD and annualized > 30:
                # –û—Ç—Ä–∏–º—É—î–º–æ —Ü—ñ–Ω–∏ –¥–ª—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
                ticker = gate.fetch_ticker(symbol)
                
                opportunity = {
                    'symbol': symbol,
                    'current_funding': current_funding,
                    'predicted_funding': predicted_funding,
                    'annualized': annualized,
                    'price': ticker['last'],
                    'signal': 'LONG' if current_funding < 0 else 'SHORT',
                    'confidence': min(100, int(annualized / 3)),
                    'timestamp': datetime.now().isoformat()
                }
                
                opportunities.append(opportunity)
                print(f"{datetime.now()} | üìä Funding opportunity: {symbol} - {annualized:.1f}% —Ä—ñ—á–Ω–∏—Ö")
                
        except Exception as e:
            print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ {symbol}: {e}")
    
    return opportunities

def update_historical_data():
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –∫–æ—Ä–µ–ª—è—Ü—ñ–π–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É"""
    global historical_data
    
    for pair1, pair2 in correlation_pairs:
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ —Ü—ñ–Ω–∏
            price1 = gate.fetch_ticker(pair1)['last']
            price2 = gate.fetch_ticker(pair2)['last']
            
            ratio = price1 / price2
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
            key = f"{pair1}_{pair2}"
            if key not in historical_data:
                historical_data[key] = deque(maxlen=100)  # –û—Å—Ç–∞–Ω–Ω—ñ 100 —Ç–æ—á–æ–∫
            
            historical_data[key].append({
                'timestamp': datetime.now(),
                'ratio': ratio,
                'price1': price1,
                'price2': price2
            })
            
        except Exception as e:
            print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö: {e}")

def detect_correlation_arbitrage():
    """
    –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ä–æ–∑—Ä–∏–≤–∏ –≤ –∫–æ—Ä–µ–ª—è—Ü—ñ—ó –º—ñ–∂ –ø–æ–≤'—è–∑–∞–Ω–∏–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏
    """
    opportunities = []
    
    for pair1, pair2 in correlation_pairs:
        try:
            key = f"{pair1}_{pair2}"
            if key not in historical_data or len(historical_data[key]) < 20:
                continue
                
            # –û—Å—Ç–∞–Ω–Ω—î —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è
            current_data = historical_data[key][-1]
            current_ratio = current_data['ratio']
            
            # –Ü—Å—Ç–æ—Ä–∏—á–Ω–µ —Å–µ—Ä–µ–¥–Ω—î —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è
            historical_ratios = [data['ratio'] for data in historical_data[key]]
            mean_ratio = sum(historical_ratios) / len(historical_ratios)
            
            # –í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö
            deviation = abs((current_ratio - mean_ratio) / mean_ratio) * 100
            
            if deviation > CORRELATION_THRESHOLD:
                # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞–ø—Ä—è–º–æ–∫ —Å–∏–≥–Ω–∞–ª—É
                if current_ratio > mean_ratio:
                    signal = f"BUY {pair2} / SELL {pair1}"
                else:
                    signal = f"BUY {pair1} / SELL {pair2}"
                
                opportunity = {
                    'pairs': (pair1, pair2),
                    'deviation': deviation,
                    'current_ratio': current_ratio,
                    'mean_ratio': mean_ratio,
                    'signal': signal,
                    'confidence': min(95, int(deviation * 2)),
                    'timestamp': datetime.now().isoformat()
                }
                
                opportunities.append(opportunity)
                print(f"{datetime.now()} | üìä Correlation opportunity: {deviation:.1f}% deviation")
                
        except Exception as e:
            print(f"{datetime.now()} | ‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ—Ä–µ–ª—è—Ü—ñ–π–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É: {e}")
    
    return opportunities

def execute_futures_trade(signal):
    """–í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ –Ω–∞ —Ñ'—é—á–µ—Ä—Å–∞—Ö"""
    if not gate:
        print(f"{datetime.now()} | ‚ùå –ë—ñ—Ä–∂–∞ –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∞")
        return False
    
    try:
        symbol = signal.get('symbol')
        trade_type = signal.get('signal', '').upper()
        
        if not symbol or trade_type not in ['LONG', 'SHORT']:
            return False
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó
        ticker = gate.fetch_ticker(symbol)
        price = ticker['last']
        amount = TRADE_AMOUNT_USD / price
        
        if trade_type == 'LONG':
            order = gate.create_market_buy_order(symbol, amount)
            print(f"{datetime.now()} | ‚úÖ LONG –ø–æ–∑–∏—Ü—ñ—è: {amount:.6f} {symbol}")
        else:
            order = gate.create_market_sell_order(symbol, amount)
            print(f"{datetime.now()} | ‚úÖ SHORT –ø–æ–∑–∏—Ü—ñ—è: {amount:.6f} {symbol}")
        
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram
        msg = f"üéØ 100% –°–ò–ì–ù–ê–õ! {symbol}\n"
        msg += f"–¢–∏–ø: {trade_type}\n"
        msg += f"Funding rate: {signal.get('current_funding', 0)*100:.3f}%\n"
        msg += f"–†—ñ—á–Ω–∏–π: {signal.get('annualized', 0):.1f}%\n"
        msg += f"–í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {signal.get('confidence', 0)}%\n"
        msg += f"–†–æ–∑–º—ñ—Ä: {TRADE_AMOUNT_USD} USDT"
        
        bot.send_message(CHAT_ID, msg)
        return True
        
    except Exception as e:
        error_msg = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ: {e}"
        print(f"{datetime.now()} | {error_msg}")
        bot.send_message(CHAT_ID, error_msg)
        return False

# -------------------------
# –û–°–ù–û–í–ù–ò–ô –¶–ò–ö–õ –¢–û–†–ì–Ü–í–õ–Ü
# -------------------------

def start_arbitrage():
    """–û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –∞—Ä–±—ñ—Ç—Ä–∞–∂—É"""
    bot.send_message(CHAT_ID, "üöÄ –§'—é—á–µ—Ä—Å–Ω–∏–π –∞—Ä–±—ñ—Ç—Ä–∞–∂-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    bot.send_message(CHAT_ID, f"üìä –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ funding rate > {FUNDING_THRESHOLD*100:.3f}%")
    
    last_correlation_update = datetime.now()
    
    while True:
        try:
            print(f"{datetime.now()} | üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π...")
            
            # 1. –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å—Ç–æ—Ä–∏—á–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –∫–æ—Ä–µ–ª—è—Ü—ñ—ó –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
            if (datetime.now() - last_correlation_update).seconds > 300:
                update_historical_data()
                last_correlation_update = datetime.now()
            
            # 2. –®—É–∫–∞—î–º–æ funding rate –∞—Ä–±—ñ—Ç—Ä–∞–∂
            funding_opportunities = detect_funding_arbitrage()
            for opportunity in funding_opportunities:
                if opportunity['confidence'] > 80:  # –ú—ñ–Ω—ñ–º—É–º 80% –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ
                    execute_futures_trade(opportunity)
                    time.sleep(2)  # –ó–∞—á–µ–∫–∞—Ç–∏ –º—ñ–∂ —É–≥–æ–¥–∞–º–∏
            
            # 3. –®—É–∫–∞—î–º–æ –∫–æ—Ä–µ–ª—è—Ü—ñ–π–Ω–∏–π –∞—Ä–±—ñ—Ç—Ä–∞–∂
            correlation_opportunities = detect_correlation_arbitrage()
            for opportunity in correlation_opportunities:
                if opportunity['confidence'] > 85:  # –ú—ñ–Ω—ñ–º—É–º 85% –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ
                    # –î–ª—è –∫–æ—Ä–µ–ª—è—Ü—ñ–π–Ω–æ–≥–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É –ø–æ—Ç—Ä—ñ–±–Ω–∞ –ø–∞—Ä–Ω–∞ —Ç–æ—Ä–≥—ñ–≤–ª—è
                    msg = f"üìä –ö–æ—Ä–µ–ª—è—Ü—ñ–π–Ω–∏–π —Å–∏–≥–Ω–∞–ª!\n"
                    msg += f"–ü–∞—Ä–∏: {opportunity['pairs'][0]} / {opportunity['pairs'][1]}\n"
                    msg += f"–í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è: {opportunity['deviation']:.1f}%\n"
                    msg += f"–°–∏–≥–Ω–∞–ª: {opportunity['signal']}\n"
                    msg += f"–í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {opportunity['confidence']}%"
                    
                    bot.send_message(CHAT_ID, msg)
            
            time.sleep(CHECK_INTERVAL)
            
        except Exception as e:
            print(f"{datetime.now()} | ‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É —Ü–∏–∫–ª—ñ: {e}")
            time.sleep(60)

# -------------------------
# TELEGRAM –ö–û–ú–ê–ù–î–ò
# -------------------------

@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç—É"""
    bot.reply_to(message, "ü§ñ –§'—é—á–µ—Ä—Å–Ω–∏–π –∞—Ä–±—ñ—Ç—Ä–∞–∂-–±–æ—Ç –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!\n\n"
                         "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
                         "/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏\n"
                         "/funding - –ü–æ—Ç–æ—á–Ω—ñ funding rates\n"
                         "/opportunities - –ü–æ—à—É–∫ –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π\n"
                         "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥—ñ–≤–ª—ñ")

@bot.message_handler(commands=['funding'])
def check_funding(message):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ç–æ—á–Ω–∏—Ö funding rates"""
    symbols = ['BTC/USDT:USDT', 'ETH/USDT:USDT', 'SOL/USDT:USDT']
    
    msg = "üìä –ü–æ—Ç–æ—á–Ω—ñ Funding Rates:\n\n"
    
    for symbol in symbols:
        try:
            funding_rate, predicted_rate = get_funding_rate(symbol)
            if funding_rate is not None:
                annualized = calculate_annualized_funding(abs(funding_rate))
                msg += f"{symbol}: {funding_rate*100:.3f}%"
                msg += f" (—Ä—ñ—á–Ω–∏—Ö: {annualized:.1f}%)\n"
        except:
            msg += f"{symbol}: –ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è\n"
    
    bot.reply_to(message, msg)

@bot.message_handler(commands=['opportunities'])
def find_opportunities(message):
    """–ú–∏—Ç—Ç—î–≤–∏–π –ø–æ—à—É–∫ –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π"""
    funding_ops = detect_funding_arbitrage()
    correlation_ops = detect_correlation_arbitrage()
    
    if not funding_ops and not correlation_ops:
        bot.reply_to(message, "üîç –ú–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    msg = "üéØ –ó–Ω–∞–π–¥–µ–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:\n\n"
    
    for op in funding_ops:
        msg += f"üí∞ Funding: {op['symbol']}\n"
        msg += f"   Rate: {op['current_funding']*100:.3f}%\n"
        msg += f"   –†—ñ—á–Ω–∏—Ö: {op['annualized']:.1f}%\n"
        msg += f"   –°–∏–≥–Ω–∞–ª: {op['signal']}\n"
        msg += f"   –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {op['confidence']}%\n\n"
    
    for op in correlation_ops:
        msg += f"üìà –ö–æ—Ä–µ–ª—è—Ü—ñ—è: {op['pairs'][0]}/{op['pairs'][1]}\n"
        msg += f"   –í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è: {op['deviation']:.1f}%\n"
        msg += f"   –°–∏–≥–Ω–∞–ª: {op['signal']}\n"
        msg += f"   –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {op['confidence']}%\n\n"
    
    bot.reply_to(message, msg)

@bot.message_handler(commands=['status'])
def send_status(message):
    """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏"""
    try:
        if gate:
            balance = gate.fetch_balance()
            usdt_balance = balance['total'].get('USDT', 0)
            msg = f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î\nüí∞ –ë–∞–ª–∞–Ω—Å: {usdt_balance:.2f} USDT\n"
            msg += f"üìä –Ü—Å—Ç–æ—Ä–∏—á–Ω—ñ –¥–∞–Ω—ñ: {len(historical_data)} –ø–∞—Ä\n"
            msg += f"‚è∞ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ: {CHECK_INTERVAL}—Å"
        else:
            msg = "‚ùå –ù–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Gate.io"
        bot.reply_to(message, msg)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# -------------------------
# WEBHOOK –¢–ê –ó–ê–ü–£–°–ö
# -------------------------

@app.route(WEBHOOK_PATH, methods=["POST"])
def webhook():
    json_str = request.get_data().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "!", 200

def setup_webhook():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è webhook"""
    try:
        url = f"https://api.telegram.org/bot{API_KEY_TELEGRAM}/setWebhook"
        response = requests.post(url, data={"url": WEBHOOK_URL})
        print("Webhook setup:", response.json())
    except Exception as e:
        print(f"Webhook setup failed: {e}")

if __name__ == "__main__":
    print(f"{datetime.now()} | üöÄ –ó–∞–ø—É—Å–∫ —Ñ'—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂-–±–æ—Ç–∞...")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –∫–ª—é—á—ñ–≤
    required_keys = [API_KEY_TELEGRAM, CHAT_ID, GATE_API_KEY, GATE_API_SECRET]
    if not all(required_keys):
        print(f"{datetime.now()} | ‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ API –∫–ª—é—á—ñ!")
        exit(1)
    
    setup_webhook()
    threading.Thread(target=start_arbitrage, daemon=True).start()
    app.run(host="0.0.0.0", port=5000)