import ccxt
import requests
import time
from datetime import datetime

# -------------------------
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
# -------------------------
# Gate API (—Ñ º—é—á–µ—Ä—Å–∏ USDT)
GATE_API_KEY = "cf99af3f8c0c1a711408f1a1970be8be"
GATE_API_SECRET = "4bd0a51eac2133386e60f4c5e1a78ea9c364e542399bc1865e679f509e93f72e"

gate = ccxt.gateio({
    "apiKey": GATE_API_KEY,
    "secret": GATE_API_SECRET,
    "options": {"defaultType": "swap"}  # —Ñ'—é—á–µ—Ä—Å–∏ USDT
})

TRADE_AMOUNT_USD = 5       # –º–∞–ª–∏–π –æ–±—Å—è–≥ –¥–ª—è —Ç–µ—Å—Ç—É
SPREAD_THRESHOLD = 0.5     # –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Å–ø—Ä–µ–¥ %
CHECK_INTERVAL = 5         # —Å–µ–∫—É–Ω–¥ –º—ñ–∂ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º–∏

# -------------------------
# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø —Ç–æ–∫–µ–Ω—ñ–≤ –∑ DEX Screener
# -------------------------
def get_top_tokens(limit=10):
    try:
        resp = requests.get("https://api.dexscreener.com/latest/dex/tokens")
        data = resp.json()
        # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à—ñ limit —Ç–æ–∫–µ–Ω—ñ–≤
        tokens = []
        for t in data.get("pairs", [])[:limit]:
            symbol = t["baseToken"]["symbol"] + "/USDT"
            price = float(t["priceUsd"])
            tokens.append((symbol, price))
        return tokens
    except Exception as e:
        print("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø —Ç–æ–∫–µ–Ω—ñ–≤:", e)
        return []

# -------------------------
# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ –∑ DEX
# -------------------------
def get_dex_price(symbol):
    try:
        dex_sym = symbol.replace("/", "-")
        resp = requests.get(f"https://api.dexscreener.com/latest/dex/tokens/{dex_sym}")
        data = resp.json()
        price = float(data['pairs'][0]['priceUsd'])
        return price
    except Exception as e:
        print("–ü–æ–º–∏–ª–∫–∞ DEX:", e)
        return None

# -------------------------
# –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ Gate
# -------------------------
def open_gate_position(symbol, side):
    try:
        pair = symbol.replace("/", "/USDT:USDT")
        ticker = gate.fetch_ticker(pair)
        gate_price = ticker['last']
        amount = TRADE_AMOUNT_USD / gate_price

        order = gate.create_order(
            symbol=pair,
            type="market",
            side=side.lower(),
            amount=amount
        )
        print(f"{datetime.now()} | ‚úÖ –í—ñ–¥–∫—Ä–∏—Ç–æ {side} {amount} {symbol} –∑–∞ Gate —Ü—ñ–Ω–æ—é {gate_price:.4f}")
        return amount, gate_price
    except Exception as e:
        print("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó:", e)
        return None, None

# -------------------------
# –õ—ñ–º—ñ—Ç–Ω–∏–π –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –∑–∞ DEX
# -------------------------
def close_gate_position(symbol, side, amount, dex_price):
    try:
        pair = symbol.replace("/", "/USDT:USDT")
        close_side = "SELL" if side == "BUY" else "BUY"

        order = gate.create_order(
            symbol=pair,
            type="limit",
            side=close_side.lower(),
            amount=amount,
            price=dex_price,
            params={"reduceOnly": True}  # —Ç—ñ–ª—å–∫–∏ –∑–∞–∫—Ä–∏—Ç—Ç—è
        )
        print(f"{datetime.now()} | üéØ –õ—ñ–º—ñ—Ç–Ω–∏–π –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è {close_side} {amount} {symbol} –∑–∞ DEX —Ü—ñ–Ω–æ—é {dex_price}")
    except Exception as e:
        print("–ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó:", e)

# -------------------------
# –ê—Ä–±—ñ—Ç—Ä–∞–∂ –ø–æ –æ–¥–Ω–æ–º—É —Ç–æ–∫–µ–Ω—ñ
# -------------------------
def arbitrage(symbol):
    dex_price = get_dex_price(symbol)
    if not dex_price:
        return

    pair = symbol.replace("/", "/USDT:USDT")
    gate_ticker = gate.fetch_ticker(pair)
    gate_price = gate_ticker['last']

    spread = (dex_price - gate_price) / gate_price * 100
    print(f"{datetime.now()} | {symbol} | DEX: {dex_price:.4f} | Gate: {gate_price:.4f} | Spread: {spread:.2f}%")

    if spread >= SPREAD_THRESHOLD:
        # DEX –¥–æ—Ä–æ–∂—á–∏–π ‚Üí –∫—É–ø—É—î–º–æ –Ω–∞ Gate
        amount, _ = open_gate_position(symbol, "BUY")
        if amount:
            close_gate_position(symbol, "BUY", amount, dex_price)
    elif spread <= -SPREAD_THRESHOLD:
        # DEX –¥–µ—à–µ–≤—à–∏–π ‚Üí –ø—Ä–æ–¥–∞—î–º–æ –Ω–∞ Gate
        amount, _ = open_gate_position(symbol, "SELL")
        if amount:
            close_gate_position(symbol, "SELL", amount, dex_price)

# -------------------------
# –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª
# -------------------------
if __name__ == "__main__":
    while True:
        tokens = get_top_tokens(limit=10)  # —Ç–æ–ø 10 —Ç–æ–∫–µ–Ω—ñ–≤
        for symbol, _ in tokens:
            arbitrage(symbol)
        time.sleep(CHECK_INTERVAL)