# cortex_simple.py
import telebot
import requests
import sqlite3
import random
import os
from datetime import datetime

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
TOKEN = os.getenv('TELEGRAM_TOKEN')
bot = telebot.TeleBot(TOKEN, parse_mode="HTML")

# –ü—Ä–æ—Å—Ç–∞ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö
def init_db():
    conn = sqlite3.connect('cortex.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            telegram_id INTEGER UNIQUE,
            username TEXT,
            balance REAL DEFAULT 0,
            invested REAL DEFAULT 0,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS investments (
            id INTEGER PRIMARY KEY,
            user_id INTEGER,
            strategy TEXT,
            amount REAL,
            daily_profit REAL,
            start_date DATETIME,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
    conn.commit()
    return conn

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ë–î
def get_user(telegram_id):
    conn = sqlite3.connect('cortex.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE telegram_id = ?', (telegram_id,))
    user = cursor.fetchone()
    conn.close()
    return user

def create_user(telegram_id, username):
    conn = sqlite3.connect('cortex.db')
    cursor = conn.cursor()
    cursor.execute('INSERT INTO users (telegram_id, username) VALUES (?, ?)', 
                  (telegram_id, username))
    conn.commit()
    conn.close()

def add_investment(user_id, strategy, amount):
    daily_profit = calculate_daily_profit(strategy, amount)
    conn = sqlite3.connect('cortex.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO investments (user_id, strategy, amount, daily_profit, start_date)
        VALUES (?, ?, ?, ?, datetime('now'))
    ''', (user_id, strategy, amount, daily_profit))
    conn.commit()
    conn.close()
    return daily_profit

def calculate_daily_profit(strategy, amount):
    rates = {
        'bluechip': 0.0078,  # ~23.4% monthly
        'defi': 0.0104,      # ~31.2% monthly
        'ai': 0.0095         # ~28.7% monthly
    }
    return round(amount * rates.get(strategy, 0.008), 2)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω –∑ Binance
def get_crypto_price(symbol):
    try:
        url = f"https://api.binance.com/api/v3/ticker/price?symbol={symbol}"
        response = requests.get(url, timeout=5)
        data = response.json()
        return float(data['price'])
    except:
        return random.uniform(40000, 45000) if symbol == "BTCUSDT" else random.uniform(2200, 2500)

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def start(message):
    user = get_user(message.from_user.id)
    if not user:
        create_user(message.from_user.id, message.from_user.username)
    
    text = f"""
üéØ <b>Cortex Trading Ecosystem</b>
üëã –í—ñ—Ç–∞—é, {message.from_user.first_name}!

üí° <i>–î–µ—Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ–≥–æ –∑–∞—Ä–æ–±—ñ—Ç–∫—É</i>

üí∞ <b>–î–æ—Å—Ç—É–ø–Ω—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó:</b>
1. üî∏ Blue Chip Hodl - 23.4% –º—ñ—Å—è—á–Ω–æ
2. üî∏ DeFi Yield Farming - 31.2% –º—ñ—Å—è—á–Ω–æ  
3. üî∏ AI Swing Trading - 28.7% –º—ñ—Å—è—á–Ω–æ

üí∏ <b>–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—è:</b> $10
üïí <b>–í–∏–ø–ª–∞—Ç–∏:</b> –©–æ–¥–µ–Ω–Ω–æ –æ 09:00 UTC
üîí <b>–°—Ç—Ä–∞—Ö–æ–≤–∏–π —Ñ–æ–Ω–¥:</b> $50,000

üìä <b>–ü–æ—Ç–æ—á–Ω—ñ —Ü—ñ–Ω–∏:</b>
‚Çø Bitcoin: ${get_crypto_price('BTCUSDT'):,.0f}
üî∑ Ethereum: ${get_crypto_price('ETHUSDT'):,.0f}

–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /invest –¥–ª—è –ø–æ—á–∞—Ç–∫—É!
–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /stats –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    """
    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=['invest'])
def invest(message):
    text = """
üéØ <b>–û–ë–ï–†–Ü–¢–¨ –°–¢–†–ê–¢–ï–ì–Ü–Æ:</b>

1. üî∏ Blue Chip Hodl - 23.4% –º—ñ—Å—è—á–Ω–æ
   üìà –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è –Ω–∞ —Ç–æ–ø-10 –º–æ–Ω–µ—Ç

2. üî∏ DeFi Yield Farming - 31.2% –º—ñ—Å—è—á–Ω–æ  
   üí∞ –í–∏—Å–æ–∫—ñ –ø—Ä–∏–±—É—Ç–∫–∏ —á–µ—Ä–µ–∑ DeFi –ø—Ä–æ—Ç–æ–∫–æ–ª–∏

3. üî∏ AI Swing Trading - 28.7% –º—ñ—Å—è—á–Ω–æ
   ü§ñ AI –∞–ª–≥–æ—Ä–∏—Ç–º–∏ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ—Å—Ç—Ä–æ–∫–æ–≤–∏—Ö —É–≥–æ–¥

–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó (1, 2 –∞–±–æ 3):
    """
    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=['stats'])
def stats(message):
    user = get_user(message.from_user.id)
    if user:
        conn = sqlite3.connect('cortex.db')
        cursor = conn.cursor()
        cursor.execute('SELECT SUM(amount), SUM(daily_profit) FROM investments WHERE user_id = ?', (user[0],))
        investment = cursor.fetchone()
        conn.close()
        
        total_invested = investment[0] or 0
        daily_profit = investment[1] or 0
        monthly_profit = daily_profit * 30
        
        text = f"""
üìä <b>–í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>

üíº –ó–∞–≥–∞–ª–æ–º —ñ–Ω–≤–µ—Å—Ç–æ–≤–∞–Ω–æ: ${total_invested:,.2f}
üí∞ –©–æ–¥–µ–Ω–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: ${daily_profit:,.2f}
üìà –ú—ñ—Å—è—á–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: ~${monthly_profit:,.2f}

üéØ –ê–∫—Ç–∏–≤–Ω—ñ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó: {3 if total_invested > 0 else 0}
üïí –ù–∞—Å—Ç—É–ø–Ω–∞ –≤–∏–ø–ª–∞—Ç–∞: 09:00 UTC

–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /invest –¥–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π
        """
        bot.send_message(message.chat.id, text)
    else:
        bot.send_message(message.chat.id, "–°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start")

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id
    text = message.text.strip()
    
    if text in ['1', '2', '3']:
        strategies = {
            '1': 'bluechip',
            '2': 'defi', 
            '3': 'ai'
        }
        bot.send_message(message.chat.id, "üíµ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó ($):", 
                        reply_markup=telebot.types.ForceReply())
        bot.register_next_step_handler(message, lambda m: process_investment(m, strategies[text]))
        
    elif text.replace('.', '').isdigit():
        amount = float(text)
        if amount >= 10:
            user = get_user(user_id)
            if user:
                daily_profit = add_investment(user[0], 'bluechip', amount)
                bot.send_message(message.chat.id, 
                               f"‚úÖ –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—è ${amount:,.2f} –ø—Ä–∏–π–Ω—è—Ç–∞!\n"
                               f"üí∞ –©–æ–¥–µ–Ω–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: ${daily_profit:,.2f}\n"
                               f"üìà –ú—ñ—Å—è—á–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: ~${daily_profit * 30:,.2f}")
            else:
                bot.send_message(message.chat.id, "–°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start")
        else:
            bot.send_message(message.chat.id, "‚ùå –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ - $10")
    else:
        bot.send_message(message.chat.id, "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É")

def process_investment(message, strategy):
    try:
        amount = float(message.text)
        if amount >= 10:
            user = get_user(message.from_user.id)
            if user:
                daily_profit = add_investment(user[0], strategy, amount)
                
                strategy_names = {
                    'bluechip': 'Blue Chip Hodl',
                    'defi': 'DeFi Yield Farming',
                    'ai': 'AI Swing Trading'
                }
                
                bot.send_message(message.chat.id, 
                               f"‚úÖ –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—è –ø—Ä–∏–π–Ω—è—Ç–∞!\n"
                               f"üìä –°—Ç—Ä–∞—Ç–µ–≥—ñ—è: {strategy_names[strategy]}\n"
                               f"üíµ –°—É–º–∞: ${amount:,.2f}\n"
                               f"üí∞ –©–æ–¥–µ–Ω–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: ${daily_profit:,.2f}\n"
                               f"üìà –ú—ñ—Å—è—á–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: ~${daily_profit * 30:,.2f}\n\n"
                               f"üïí –í–∏–ø–ª–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω–æ –æ 09:00 UTC")
            else:
                bot.send_message(message.chat.id, "–°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start")
        else:
            bot.send_message(message.chat.id, "‚ùå –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ - $10")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è")

if __name__ == "__main__":
    init_db()
    print("üß† Cortex Trader –∑–∞–ø—É—â–µ–Ω–æ...")
    bot.infinity_polling()